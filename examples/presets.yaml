# yaml-language-server: $schema=../schemas/development.json

# ANCHOR: workflow_presets
github:
  workflow_presets:
    # Common settings for all workflows
    base:
      defaults:
        run:
          shell: bash
      env:
        my_env: somevalue
        another_env: anothervalue

    extended:
      extends_presets:
        - base
      on:
        push:
          branches:
            - main
      jobs:
        # Adding a job by using its preset ID
        check_main_branch: check_main_branch
        do_something:
          extends_presets:
            - base
          if: needs.check_branch.outputs.is_on_main == 'true'
          name: Do something while on main branch
          steps:
            - run: echo "Done something from main branch!"

  workflow_job_presets:
    # Common settings for all jobs
    base:
      runs-on: ubuntu-latest
      timeout-minutes: 25
      continue-on-error: false
      env:
        my_env: somevalue
        another_env: anothervalue

    check_main_branch:
      extends_presets:
        - base
      env:
        another_other_value: yetanothervalue
      outputs:
        is_on_main: ${{ steps.branch_check.outputs.is_on_main }}
      steps:
        # Using a step preset
        - check_main

  steps_presets:
    # Reusable step preset
    check_main:
      name: Check if a tag is on the main branch
      id: branch_check
      run: |
        if git branch -r --contains ${{ github.ref }} | grep -q 'origin/main'; then
        echo "On main branch. Proceeding with the workflow..."
        echo "is_on_main=true" >> "$GITHUB_OUTPUT"
        else
        echo "Not on main branch. Skipping workflow..."
        fi
# ANCHOR_END: workflow_presets
# ANCHOR: templates
templates:
  dockerfile: |
    FROM node:23-alpine

    COPY . .
    EXPOSE {{ docker_dev_port | default(value=5173) }}
    CMD ["npm", "run", "dev"]

# Templating presets
templating_presets:
  dockerfile:
    context:
      # Group context, lower priority
      docker_dev_port: 9530
    # List of templates
    templates:
      # Single template
      - output: Dockerfile
        template: dockerfile
        # Local context with higher priority
        context:
          docker_dev_port: 5173

# ANCHOR_END: templates

# ANCHOR: all

# `Cargo.toml` presets
# ANCHOR: cargo
cargo_toml_presets:
  cli-custom:
    extends_presets:
      - cli-tools
      - serde-ordered
    dependencies:
      clap:
        features:
          - derive
      owo-colors:
        features:
          - supports-colors

  cli-tools:
    dependencies:
      ratatui: "0.29"
      clap: "4.5"
      serde: "1"
      owo-colors: "4"

  serde-ordered:
    dependencies:
      serde:
        version: "1"
        features:
          - preserve_order
      indexmap:
        version: "2.11"
        features:
          - serde
# ANCHOR_END: cargo

# Docker Compose presets
# ANCHOR: docker_compose
docker:
  service_presets:
    # A base service preset with common configurations
    base_service:
      environment:
        TZ: Europe/Berlin
      networks:
        - my_network

    # A preset for a db service
    database:
      extends_presets:
        - base_service
      image: postgres

    caddy:
      extends_presets:
        - base_service
      image: lucaslorentz/caddy-docker-proxy:ci-alpine
      networks:
        - my_network
      ports:
        - 80:80
        - 443:443

  compose_presets:
    # Base preset for a compose file
    base:
      volumes:
        my_volume:
          external: true
      networks:
        my_network:
          external: true

    extended:
      extends_presets:
        - base
      services:
        # Using the service preset by ID
        db: database
        my_service:
          networks:
            - my_network
          volumes:
            - my_volume:/target
      volumes:
        my_other_volume:
          external: true
# ANCHOR_END: docker_compose

# ANCHOR: git
# Gitignore presets
gitignore_presets:
  # Can be a string
  base:
    content: |
      *.env
      dist
  # Or a list of strings
  ts:
    extends_presets:
      # When being merged, the new entries are placed at the top
      - base
    content:
      - "*.tsBuildInfo"
      - node_modules

# Pre-commit presets
pre_commit_presets:
  # Commonly used repo
  base:
    repos:
      - repo: https://github.com/gitleaks/gitleaks
        rev: v8.28.0
        hooks:
          - id: gitleaks

  # Hooks specific to typescript projects
  typescript:
    # Extending the base preset
    extends_presets:
      - base
    repos:
      - repo: local
        hooks:
          - id: oxlint
            name: oxlint
            entry: oxlint
            language: system
            files: '\.svelte$|\.js$|\.ts$'
            types: [file]

# ANCHOR: git_preset
# Git presets
git_presets:
  ts_package:
    # ANCHOR: using_workflow_preset
    workflows:
      - file_name: my_workflow.yaml
        # Preset ID
        id: extended
    # ANCHOR_END: using_workflow_preset
    # License file to generate
    license: Apache-2.0
    # Selecting a preset
    gitignore: ts
    pre_commit: typescript
    # ANCHOR_END: git

    # Templates that will be generated with this preset
    # starting from the new repo's root
    with_templates:
      - id: dockerfile
    # ANCHOR_END: git_preset

    # ANCHOR: hooks
    # Commands to run before generation, from the root of the new project
    hooks_pre:
      - command:
          # Inlining a new template definition here,
          # but as always, we can use stored templates too
          name: pre_hook
          content: "echo '{{ greeting }}' > pre.txt"
        context:
          greeting: hi

    # Commands to run after generation, from the root of the new project
    hooks_post:
      - command:
          name: post_hook
          content: "echo '{{ greeting }}' > post.txt"
        context:
          greeting: hi
    # ANCHOR_END: hooks

typescript:
  # By default, typescript and oxlint are added to
  # the dependencies
  no_default_deps: true

  # By default, all versions marked with `latest` are converted to
  # a version range starting from the current version
  no_convert_latest_to_range: true

  # Version range to use when converting from `latest`
  version_range: patch

  # `pnpm-workspace.yaml` presets
  pnpm_presets:
    base:
      # All the dirs listed here will be created automatically
      # when new monorepos are created
      packages:
        - packages/*
        - apps/*
      onlyBuiltDependencies:
        - esbuild
      minimumReleaseAge: 1440

  # `package.json` presets
  # ANCHOR: package_json
  package_json_presets:
    # Defining some reusable fields such as some common scripts and dependencies
    frontend:
      description: I am the base preset
      scripts:
        build: vite build
        dev: vite dev
      devDependencies:
        tailwindcss: "*"
        vite: "*"

    svelte_frontend:
      extends_presets: ["frontend"]
      # Adding new fields
      license: MIT
      # Overriding others
      description: I am the frontend preset
      # And merging dependencies
      devDependencies:
        svelte: "*"

    # ANCHOR_END: package_json

  # Tsconfig presets
  # ANCHOR: tsconfig
  ts_config_presets:
    base:
      references:
        - path: /some/path
      include:
        - src
      compilerOptions:
        noEmit: true
        verbatimModuleSyntax: true

    extended:
      extends_presets:
        - base
      # Unlike in real tsconfigs with `extends`, references are merged here,
      # and so are all other collections such as `files` or `include`.
      references:
        - path: /other/path
      include:
        - tests
      compilerOptions:
        # Whereas other fields are overwritten
        noEmit: false

    # ANCHOR_END: tsconfig

  # Oxlint presets
  # ANCHOR: oxlint
  oxlint_presets:
    base:
      ignorePatterns:
        - "**/node_modules/**"

    extended:
      extends_presets:
        - base
      ignorePatterns:
        - .cache
  # ANCHOR_END: oxlint

  # Vitest presets
  # ANCHOR: vitest
  vitest_presets:
    base:
      # Where the config file should be generated, starting from
      # the root of the package.
      # It defaults to the value of `tests_dir`
      out_dir: null

      # The directory to use for tests, from the root of the package
      tests_dir: tests

      # The directory, inside `tests_dir`, that contains the setup files for tests.
      # A file named `tests_setup.ts`, containing some basic testing boilerplate,
      # will be generated inside of it.
      setup_dir: setup

      # A list of setup files (the paths will be joined to the `setup_dir`)
      # `tests_setup.ts` will be added automatically.
      setup_files:
        - somefile.ts
        - anotherfile.ts
      environment: jsdom
      silent: passed-only

  # ANCHOR_END: vitest

  # Package presets
  # ANCHOR: package
  package_presets:
    example:
      name: example

      # For every preset, we can either refer to them
      # by their id...
      package_json: svelte_frontend

      # ...or we can inline a preset definition
      oxlint:
        extends_presets:
          - extended
        ignorePatterns:
          - .output

      # We can define one or many tsconfig files
      ts_config:
        # Can be omitted, would default to `tsconfig.json`
        - output: tsconfig.json
          config:
            # Once again creating a new config here with some extras
            extends_presets:
              - extended
            include:
              - scripts

      vitest: base
      # ANCHOR_END: package

      # ANCHOR_END: all
