name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  check_branch:
    runs-on: ubuntu-latest

    outputs:
      is_on_main: ${{ steps.branch_check.outputs.is_on_main }}

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check if tag is on main branch
        id: branch_check
        run: |
          if git branch -r --contains ${{ github.ref }} | grep -q 'origin/main'; then
            echo "On main branch. Proceeding with the workflow..."
            echo "is_on_main=true" >> "$GITHUB_OUTPUT"
          else
            echo "Not on main branch. Skipping workflow..."
          fi

  create_release:
    runs-on: ubuntu-latest

    needs: check_branch
    if: needs.check_branch.outputs.is_on_main == 'true'

    steps:
      - uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0

      - uses: taiki-e/create-gh-release-action@v1
        with:
          changelog: CHANGELOG.md
          branch: main
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_assets:
    needs: create_release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-13
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm
          - target: aarch64-apple-darwin
            os: macos-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0

      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: sketch
          target: ${{ matrix.target }}
          token: ${{ secrets.GITHUB_TOKEN }}

    # deploy_docs:
  #   runs-on: ubuntu-latest
  #
  #   needs: check_branch
  #   if: needs.check_branch.outputs.is_on_main == 'true'
  #
  #   steps:
  #     - uses: actions/checkout@v5
  #       with:
  #         fetch-depth: 0
  #
  #     - name: Get version from tag
  #       run: |
  #         VERSION="${{github.ref_name}}"
  #         echo "VERSION=${VERSION}" >> $GITHUB_ENV
  #         MAJOR=$(echo "$VERSION" | sed -n 's/^v\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\).*$/\1/p')
  #         MINOR=$(echo "$VERSION" | sed -n 's/^v\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\).*$/\2/p')
  #         PATCH=$(echo "$VERSION" | sed -n 's/^v\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\).*$/\3/p')
  #         if [ -z "$MAJOR" ] || [ -z "$MINOR" ] || [ -z "$PATCH" ]; then
  #         echo "::error::Could not parse major.minor.patch from tag: $VERSION. Tag must be like vX.Y.Z"
  #         exit 1
  #         fi
  #
  #         echo "Parsed: Version=$VERSION Major=$MAJOR, Minor=$MINOR, Patch=$PATCH"
  #
  #         echo "DOCS_DEST_DIR=v$MAJOR.$MINOR" >> $GITHUB_ENV
  #
  #     - name: Setup mdBook
  #       uses: peaceiris/actions-mdbook@v2
  #       with:
  #         mdbook-version: "latest"
  #
  #     - run: mdbook build docs
  #
  #     - name: Checkout existing gh-pages content
  #       uses: actions/checkout@v5
  #       with:
  #         ref: gh-pages
  #         path: gh-pages-deploy
  #
  #     - name: Update staging directory with new docs
  #       run: |
  #         # Copy new docs to the root
  #         cp -r ./docs/book/* ./gh-pages-deploy
  #
  #         # Copy new docs to the versioned subdirectory
  #         mkdir -p ./gh-pages-deploy/${{ env.DOCS_DEST_DIR }}
  #         cp -r ./docs/book/* ./gh-pages-deploy/${{ env.DOCS_DEST_DIR }}
  #
  #     - name: Deploy docs
  #       uses: peaceiris/actions-gh-pages@v4
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: ./gh-pages-deploy
  #         force_orphan: false
