name: release-test

on:
  push:
    tags:
      - "v*"

jobs:
  check_branch:
    runs-on: ubuntu-latest

    outputs:
      is_on_test: ${{ steps.branch_check.outputs.is_on_test }}

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check if tag is on test branch
        id: branch_check
        run: |
          if git branch -r --contains ${{ github.ref }} | grep -q 'origin/test'; then
            echo "On test branch. Proceeding with the workflow..."
            echo "is_on_test=true" >> "$GITHUB_OUTPUT"
          else
            echo "Not on test branch. Skipping workflow..."
          fi

  update_docs:
    runs-on: ubuntu-latest

    needs: check_branch
    if: needs.check_branch.outputs.is_on_test == 'true'

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version from tag
        run: |
          VERSION="${{github.ref_name}}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          MAJOR=$(echo "$VERSION" | sed -n 's/^v\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\).*$/\1/p')
          MINOR=$(echo "$VERSION" | sed -n 's/^v\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\).*$/\2/p')
          PATCH=$(echo "$VERSION" | sed -n 's/^v\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\).*$/\3/p')
          if [ -z "$MAJOR" ] || [ -z "$MINOR" ] || [ -z "$PATCH" ]; then
          echo "::error::Could not parse major.minor.patch from tag: $VERSION. Tag must be like vX.Y.Z"
          exit 1
          fi

          echo "Parsed: Version=$VERSION Major=$MAJOR, Minor=$MINOR, Patch=$PATCH"

          echo "DOCS_DEST_DIR=v$MAJOR.$MINOR" >> $GITHUB_ENV

      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v2
        with:
          mdbook-version: "latest"

      - run: mdbook build docs

      - name: Checkouot existing gh-pages content
        uses: actions/checkout@v5
        with:
          ref: gh-pages
          path: gh-pages-deploy

      - name: Update staging directory with new docs
        run: |
          # Copy new docs to the root
          cp -r ./docs/book/* ./gh-pages-deploy

          # Copy new docs to the versioned subdirectory
          mkdir -p ./gh-pages-deploy/${{ env.DOCS_DEST_DIR }}
          cp -r ./docs/book/* ./gh-pages-deploy/${{ env.DOCS_DEST_DIR }}

      - name: Deploy docs
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages-deploy
          force_orphan: false
