{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Config",
  "description": "The global configuration struct.",
  "type": "object",
  "properties": {
    "typescript": {
      "description": "The configuration for typescript projects.",
      "anyOf": [
        {
          "$ref": "#/$defs/TypescriptConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": null
    },
    "docker": {
      "description": "Configuration and presets for Docker.",
      "anyOf": [
        {
          "$ref": "#/$defs/DockerConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": null
    },
    "shell": {
      "description": "The shell to use for commands [default: `cmd.exe` on windows and `sh` elsewhere].",
      "type": [
        "string",
        "null"
      ],
      "default": null
    },
    "templates_dir": {
      "description": "The path to the templates directory.",
      "type": [
        "string",
        "null"
      ],
      "default": null
    },
    "no_overwrite": {
      "description": "Do not overwrite existing files.",
      "type": [
        "boolean",
        "null"
      ],
      "default": null
    },
    "extends": {
      "description": "The paths (absolute, or relative to the originating config file) to the config files to extend.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string"
      },
      "default": []
    },
    "templates": {
      "description": "A map that contains template definitions.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "default": {}
    },
    "templating_presets": {
      "description": "A map that contains templating presets.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/TemplatingPreset"
      },
      "default": {}
    },
    "pre_commit_presets": {
      "description": "A map that contains pre-commit presets.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/PreCommitPreset"
      },
      "default": {}
    },
    "gitignore_presets": {
      "description": "A map that contains gitignore presets.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/GitignorePreset"
      },
      "default": {}
    },
    "git_presets": {
      "description": "A map that contains presets for git repos.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/RepoPreset"
      },
      "default": {}
    },
    "cargo_toml_presets": {
      "description": "A map that contains presets for `Cargo.toml` files.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/CargoTomlPreset"
      },
      "default": {}
    },
    "vars": {
      "description": "The global variables that will be available for every template being generated.\nThey are overridden by vars set in a template's local context or via the cli.",
      "type": "object",
      "additionalProperties": true,
      "default": {}
    }
  },
  "$defs": {
    "TypescriptConfig": {
      "description": "All settings related to typescript projects.",
      "type": "object",
      "properties": {
        "package_manager": {
          "description": "The package manager being used. [default: pnpm].",
          "anyOf": [
            {
              "$ref": "#/$defs/PackageManager"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "no_default_deps": {
          "description": "Do not add default dependencies to new `package.json` files (typescript and oxlint, plus vitest if enabled)",
          "type": [
            "boolean",
            "null"
          ],
          "default": null
        },
        "version_range": {
          "description": "The kind of version range to use for dependencies that are fetched automatically. [default: minor]",
          "anyOf": [
            {
              "$ref": "#/$defs/VersionRange"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "catalog": {
          "description": "Uses the pnpm catalog for default dependencies, and automatically adds dependencies marked with `catalog:` to the catalog, if they are missing.",
          "type": [
            "boolean",
            "null"
          ],
          "default": null
        },
        "no_convert_latest_to_range": {
          "description": "Do not convert dependencies marked as `latest` to a version range.",
          "type": [
            "boolean",
            "null"
          ],
          "default": null
        },
        "people": {
          "description": "A map of individual [`PersonData`] that can be referenced as authors, contributors or maintainers in a [`PackageJsonPreset`].",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/PersonData"
          },
          "default": {}
        },
        "package_json_presets": {
          "description": "A map containing [`PackageJsonPreset`]s.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/PackageJsonPreset"
          },
          "default": {}
        },
        "ts_config_presets": {
          "description": "A map containing [`TsConfigPreset`]s.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/TsConfigPreset"
          },
          "default": {}
        },
        "oxlint_presets": {
          "description": "A map containing [`OxlintPreset`]s.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/OxlintPreset"
          },
          "default": {}
        },
        "package_presets": {
          "description": "A map of [`PackageConfig`] presets.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/PackageConfig"
          },
          "default": {}
        },
        "pnpm_presets": {
          "description": "A map of presets for `pnpm-workspace.yaml` configurations.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/PnpmPreset"
          },
          "default": {}
        },
        "vitest_presets": {
          "description": "A map of presets for vitest setups.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/VitestConfig"
          },
          "default": {}
        }
      }
    },
    "PackageManager": {
      "description": "A js/ts package manager.",
      "type": "string",
      "enum": [
        "pnpm",
        "npm",
        "deno",
        "bun",
        "yarn"
      ]
    },
    "VersionRange": {
      "description": "The kinds of version ranges for a dependency with semantic versioning.",
      "type": "string",
      "enum": [
        "patch",
        "minor",
        "exact"
      ]
    },
    "PersonData": {
      "description": "A struct that represents how an individual's information is represented in a `package.json` file in the author, maintainers and contributors fields.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": [
            "string",
            "null"
          ]
        },
        "url": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "PackageJsonPreset": {
      "description": "A [`PackageJson`] preset.",
      "type": "object",
      "properties": {
        "extends_presets": {
          "description": "The list of extended presets.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "default": []
        },
        "name": {
          "description": "The name of the package.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "private": {
          "description": "If set to true, then npm will refuse to publish it.",
          "type": [
            "boolean",
            "null"
          ],
          "default": null
        },
        "version": {
          "description": "Version must be parsable by node-semver, which is bundled with npm as a dependency.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "type": {
          "description": "When set to `module`, the type field allows a package to specify all .js files within are ES modules. If the `type` field is omitted or set to `commonjs`, all .js files are treated as CommonJS.",
          "$ref": "#/$defs/JsPackageType",
          "default": "module"
        },
        "workspaces": {
          "description": "Allows packages within a directory to depend on one another using direct linking of local files. Additionally, dependencies within a workspace are hoisted to the workspace root when possible to reduce duplication. Note: It's also a good idea to set `private` to true when using this feature.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "scripts": {
          "description": "A map of shell scripts to launch from the root of the package.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {}
        },
        "author": {
          "description": "The author of this package.",
          "anyOf": [
            {
              "$ref": "#/$defs/Person"
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "description": "This helps people discover your package, as it's listed in 'npm search'.",
          "type": [
            "string",
            "null"
          ]
        },
        "license": {
          "description": "You should specify a license for your package so that people know how they are permitted to use it, and any restrictions you're placing on it.",
          "type": [
            "string",
            "null"
          ]
        },
        "funding": {
          "description": "Used to inform about ways to help fund development of the package.\nYou can specify an object containing a URL that provides up-to-date information about ways to help fund development of your package, a string URL, or an array of objects and string URLs.",
          "anyOf": [
            {
              "$ref": "#/$defs/Funding"
            },
            {
              "type": "null"
            }
          ]
        },
        "repository": {
          "description": "Specify the place where your code lives. This is helpful for people who want to contribute.",
          "anyOf": [
            {
              "$ref": "#/$defs/Repository"
            },
            {
              "type": "null"
            }
          ]
        },
        "keywords": {
          "description": "This helps people discover your package, as it's listed in 'npm search'.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "homepage": {
          "description": "The url to the project homepage.",
          "type": [
            "string",
            "null"
          ]
        },
        "bin": {
          "description": "The single path for this package's binary, or a map of several binaries.",
          "anyOf": [
            {
              "$ref": "#/$defs/Bin"
            },
            {
              "type": "null"
            }
          ]
        },
        "files": {
          "description": "The 'files' field is an array of files to include in your project. If you name a folder in the array, then it will also include the files inside that folder.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "exports": {
          "description": "The `exports` field is used to restrict external access to non-exported module files, also enables a module to import itself using `name`.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/Exports"
          }
        },
        "packageManager": {
          "description": "Defines which package manager is expected to be used when working on the current project. This field is currently experimental and needs to be opted-in; see https://nodejs.org/api/corepack.html",
          "type": [
            "string",
            "null"
          ]
        },
        "pnpm": {
          "description": "Configuration settings for pnpm.",
          "anyOf": [
            {
              "$ref": "#/$defs/PnpmWorkspace"
            },
            {
              "type": "null"
            }
          ]
        },
        "overrides": {
          "description": "Overrides is used to support selective version overrides using npm, which lets you define custom package versions or ranges inside your dependencies. For yarn, use resolutions instead. See: https://docs.npmjs.com/cli/v9/configuring-npm/package-json#overrides",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": true
        },
        "dependencies": {
          "description": "Dependencies are specified with a simple hash of package name to version range. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or git URL.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {}
        },
        "devDependencies": {
          "description": "Specifies dependencies that are required for the development and testing of the project. These dependencies are not needed in the production environment.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {}
        },
        "peerDependencies": {
          "description": "Specifies dependencies that are required by the package but are expected to be provided by the consumer of the package.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "peerDependenciesMeta": {
          "description": "When a user installs your package, warnings are emitted if packages specified in \"peerDependencies\" are not already installed. The \"peerDependenciesMeta\" field serves to provide more information on how your peer dependencies are utilized. Most commonly, it allows peer dependencies to be marked as optional. Metadata for this field is specified with a simple hash of the package name to a metadata object.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/PeerDependencyMeta"
          }
        },
        "optionalDependencies": {
          "description": "Specifies dependencies that are optional for your project. These dependencies are attempted to be installed during the npm install process, but if they fail to install, the installation process will not fail.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "bundleDependencies": {
          "description": "Array of package names that will be bundled when publishing the package.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "main": {
          "description": "The main field is a module ID that is the primary entry point to your program.",
          "type": [
            "string",
            "null"
          ]
        },
        "browser": {
          "description": "Specifies the package's entrypoint for packages that work in browsers.",
          "type": [
            "string",
            "null"
          ]
        },
        "directories": {
          "description": "Indicates the structure of your package.",
          "anyOf": [
            {
              "$ref": "#/$defs/Directories"
            },
            {
              "type": "null"
            }
          ]
        },
        "bugs": {
          "description": "The url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.",
          "anyOf": [
            {
              "$ref": "#/$defs/Bugs"
            },
            {
              "type": "null"
            }
          ]
        },
        "contributors": {
          "description": "A list of people who contributed to this package.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Person"
          }
        },
        "maintainers": {
          "description": "A list of people who maintains this package.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Person"
          }
        },
        "man": {
          "description": "Specify either a single file or an array of filenames to put in place for the man program to find.",
          "anyOf": [
            {
              "$ref": "#/$defs/Man"
            },
            {
              "type": "null"
            }
          ]
        },
        "config": {
          "description": "An object that can be used to set configuration parameters used in package scripts that persist across upgrades.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": true
        },
        "publishConfig": {
          "description": "A set of config values that will be used at publish-time. It's especially handy if you want to set the tag, registry or access, so that you can ensure that a given package is not tagged with \"latest\", published to the global public registry or that a scoped module is private by default.",
          "anyOf": [
            {
              "$ref": "#/$defs/PublishConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "engines": {
          "description": "Defines which tools and versions are expected to be used.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "os": {
          "description": "Specify which operating systems your module will run on.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "cpu": {
          "description": "Specify that your code only runs on certain cpu architectures.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": true
    },
    "JsPackageType": {
      "description": "The type of JS package.",
      "type": "string",
      "enum": [
        "module",
        "CommonJs"
      ]
    },
    "Person": {
      "description": "The kinds of values used for representing an individual in a `package.json` file, which can be used to populate the `contributors` and `maintainers` fields.\nIf a plain string is used, it will be interpreted as an id for a [`PersonData`] that is stored in the global config.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/PersonData"
        }
      ]
    },
    "Funding": {
      "description": "You can specify an object containing a URL that provides up-to-date information about ways to help fund development of your package, a string URL, or an array of objects and string URLs.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/FundingData"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Funding"
          }
        }
      ]
    },
    "FundingData": {
      "description": "Used to inform about ways to help fund development of the package.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of funding or the platform through which funding can be provided, e.g. patreon, opencollective, tidelift or github",
          "type": [
            "string",
            "null"
          ]
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "url"
      ]
    },
    "Repository": {
      "description": "An enum representing formats for the `repository` field in a `package.json` file.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": [
                "string",
                "null"
              ]
            },
            "url": {
              "type": [
                "string",
                "null"
              ]
            },
            "directory": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      ]
    },
    "Bin": {
      "description": "The single path for this package's binary, or a map of several binaries.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      ]
    },
    "Exports": {
      "description": "A struct that represents a value in the `exports` object inside a `package.json` file.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "types": {
              "type": [
                "string",
                "null"
              ]
            },
            "import": {
              "type": [
                "string",
                "null"
              ]
            },
            "require": {
              "type": [
                "string",
                "null"
              ]
            },
            "node": {
              "type": [
                "string",
                "null"
              ]
            },
            "default": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": {
            "type": "string"
          }
        }
      ]
    },
    "PnpmWorkspace": {
      "description": "A struct representing a pnpm-workspace.yaml config.\n\nSee more: https://pnpm.io/settings",
      "type": "object",
      "properties": {
        "packages": {
          "description": "Glob patterns for the directories containing the packages for this workspace.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "cleanupUnusedCatalogs": {
          "description": "When set to true, pnpm will remove unused catalog entries during installation.\n\nSee more: https://pnpm.io/settings#cleanupunusedcatalogs",
          "type": [
            "boolean",
            "null"
          ]
        },
        "catalog": {
          "description": "The dependencies to store in the unnamed (default) catalog.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "catalogs": {
          "description": "A map of named catalogs and the dependencies listed in them.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "onlyBuiltDependencies": {
          "description": "A list of package names that are allowed to be executed during installation. Only packages listed in this array will be able to run install scripts. If onlyBuiltDependenciesFile and neverBuiltDependencies are not set, this configuration option will default to blocking all install scripts.\n\nSee more: https://pnpm.io/settings#onlybuiltdependencies",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "onlyBuiltDependenciesFile": {
          "description": "Specifies a JSON file that lists the only packages permitted to run installation scripts during the pnpm install process.\n\nSee more: https://pnpm.io/settings#onlybuiltdependenciesfile",
          "type": [
            "string",
            "null"
          ]
        },
        "neverBuiltDependencies": {
          "description": "A list of dependencies to run builds for. See more: https://pnpm.io/settings#neverbuiltdependencies",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "ignoredBuiltDependencies": {
          "description": "A list of package names that should not be built during installation.\n\nSee more: https://pnpm.io/settings#ignoredbuiltdependencies",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "dangerouslyAllowAllBuilds": {
          "description": "If set to true, all build scripts (e.g. preinstall, install, postinstall) from dependencies will run automatically, without requiring approval.\n\nSee more: https://pnpm.io/settings#dangerouslyallowallbuilds",
          "type": [
            "boolean",
            "null"
          ]
        },
        "overrides": {
          "description": "This field allows you to instruct pnpm to override any dependency in the dependency graph. This is useful for enforcing all your packages to use a single version of a dependency, backporting a fix, replacing a dependency with a fork, or removing an unused dependency.\n\nSee more: https://pnpm.io/settings#overrides",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "updateConfig": {
          "description": "Configuration for package updates.\n\nSee more: https://pnpm.io/settings#updateconfig",
          "anyOf": [
            {
              "$ref": "#/$defs/UpdateConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "minimumReleaseAge": {
          "description": "It specifies the number of minutes that must pass after a version is published before pnpm will install it. For example, setting `minimumReleaseAge: 1440` ensures that only packages released at least one day ago can be installed.\n\nSee more: https://pnpm.io/settings#minimumreleaseage",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "minimumReleaseAgeExclude": {
          "description": "If you set `minimumReleaseAge` but need to disable this restriction for certain dependencies, you can list them under the `minimumReleaseAgeExclude` setting.\n\nSee more: https://pnpm.io/settings#minimumreleaseageexclude",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "packageExtensions": {
          "description": "The packageExtensions fields offer a way to extend the existing package definitions with additional information. For example, if react-redux should have react-dom in its peerDependencies but it has not, it is possible to patch react-redux using packageExtensions.\n\nSee more: https://pnpm.io/settings#packageextensions",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/PackageExtension"
          }
        },
        "peerDependencyRules": {
          "description": "Rules for peer dependencies.\n\nSee more: https://pnpm.io/settings#peerdependencyrules",
          "anyOf": [
            {
              "$ref": "#/$defs/PeerDependencyRules"
            },
            {
              "type": "null"
            }
          ]
        },
        "allowedDeprecatedVersions": {
          "description": "A list of deprecated versions that the warnings are suppressed.\n\nSee more: https://pnpm.io/settings#alloweddeprecatedversions",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "patchedDependencies": {
          "description": "A list of dependencies that are patched.\n\nSee more: https://pnpm.io/settings#patcheddependencies",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "allowUnusedPatches": {
          "description": "When true, installation won't fail if some of the patches from the `patchedDependencies` field were not applied. Previously named `allowNonAppliedPatches`.\n\nSee more: https://pnpm.io/settings#allowunusedpatches",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignorePatchFailures": {
          "description": "Default is undefined. Errors out when a patch with an exact version or version range fails. Ignores failures from name-only patches. When true, prints a warning instead of failing when any patch cannot be applied. When false, errors out for any patch failure.\n\nSee more: https://pnpm.io/settings#ignorepatchfailures",
          "type": [
            "boolean",
            "null"
          ]
        },
        "configDependencies": {
          "description": "Config dependencies allow you to share and centralize configuration files, settings, and hooks across multiple projects. They are installed before all regular dependencies ('dependencies', 'devDependencies', 'optionalDependencies'), making them ideal for setting up custom hooks, patches, and catalog entries.\n\nSee more: https://pnpm.io/config-dependencies",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "auditConfig": {
          "description": "Settings for the `pnpm audit` command.\n\nSee more: https://pnpm.io/settings#auditconfig",
          "anyOf": [
            {
              "$ref": "#/$defs/AuditConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "requiredScripts": {
          "description": "Scripts listed in this array will be required in each project of the workspace. Otherwise, pnpm -r run <script name> will fail.\n\nSee more: https://pnpm.io/settings#requiredscripts",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "supportedArchitectures": {
          "description": "Specifies architectures for which you'd like to install optional dependencies, even if they don't match the architecture of the system running the install.\n\nSee more: https://pnpm.io/settings#supportedarchitectures",
          "anyOf": [
            {
              "$ref": "#/$defs/SupportedArchitectures"
            },
            {
              "type": "null"
            }
          ]
        },
        "ignoredOptionalDependencies": {
          "description": "A list of optional dependencies that the install should be skipped.\n\nSee more: https://pnpm.io/settings#ignoredoptionaldependencies",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "executionEnv": {
          "description": "Instructions for the runtime, such as the node version to use.\n\nSee more: https://pnpm.io/settings#executionenvnodeversion",
          "anyOf": [
            {
              "$ref": "#/$defs/ExecutionEnv"
            },
            {
              "type": "null"
            }
          ]
        },
        "hoist": {
          "description": "When true, all dependencies are hoisted to node_modules/.pnpm/node_modules.\n\nSee more: https://pnpm.io/settings#hoist",
          "type": [
            "boolean",
            "null"
          ]
        },
        "hoistWorkspacePackages": {
          "description": "When true, packages from the workspaces are symlinked to either <workspace_root>/node_modules/.pnpm/node_modules or to <workspace_root>/node_modules depending on other hoisting settings (hoistPattern and publicHoistPattern).\n\nSee more: https://pnpm.io/settings#hoistworkspacepackages",
          "type": [
            "boolean",
            "null"
          ]
        },
        "hoistPattern": {
          "description": "Tells pnpm which packages should be hoisted to node_modules/.pnpm/node_modules.\n\nSee more: https://pnpm.io/settings#hoistpattern",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "publicHoistPattern": {
          "description": "Unlike hoistPattern, which hoists dependencies to a hidden modules directory inside the virtual store, publicHoistPattern hoists dependencies matching the pattern to the root modules directory.\n\nSee more: https://pnpm.io/settings#publichoistpattern",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "shamefullyHoist": {
          "description": "By default, pnpm creates a semistrict node_modules, meaning dependencies have access to undeclared dependencies but modules outside of node_modules do not.\n\nSee more: https://pnpm.io/settings#shamefullyhoist",
          "type": [
            "boolean",
            "null"
          ]
        },
        "modulesDir": {
          "description": "The directory in which dependencies will be installed (instead of node_modules).\n\nSee more: https://pnpm.io/settings#modulesdir",
          "type": [
            "string",
            "null"
          ]
        },
        "nodeLinker": {
          "description": "Defines what linker should be used for installing Node packages.\n\nSee more: https://pnpm.io/settings#nodelinker",
          "anyOf": [
            {
              "$ref": "#/$defs/NodeLinker"
            },
            {
              "type": "null"
            }
          ]
        },
        "symlink": {
          "description": "When symlink is set to false, pnpm creates a virtual store directory without any symlinks. It is a useful setting together with nodeLinker=pnp.\n\nSee more: https://pnpm.io/settings#symlink",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enableModulesDir": {
          "description": "When false, pnpm will not write any files to the modules directory (node_modules).\n\nSee more: https://pnpm.io/settings#enablemodulesdir",
          "type": [
            "boolean",
            "null"
          ]
        },
        "virtualStoreDir": {
          "description": "The directory with links to the store.\n\nSee more: https://pnpm.io/settings#virtualstoredir",
          "type": [
            "string",
            "null"
          ]
        },
        "virtualStoreDirMaxLength": {
          "description": "Sets the maximum allowed length of directory names inside the virtual store directory (node_modules/.pnpm).\n\nSee more: https://pnpm.io/settings#virtualstoredirmaxlength",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "packageImportMethod": {
          "description": "Controls the way packages are imported from the store (if you want to disable symlinks inside node_modules, then you need to change the nodeLinker setting, not this one).\n\nSee more: https://pnpm.io/settings#packageimportmethod",
          "anyOf": [
            {
              "$ref": "#/$defs/PackageImportMethod"
            },
            {
              "type": "null"
            }
          ]
        },
        "modulesCacheMaxAge": {
          "description": "The time in minutes after which orphan packages from the modules directory should be removed.\n\nSee more: https://pnpm.io/settings#modulescachemaxage",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "dlxCacheMaxAge": {
          "description": "The time in minutes after which dlx cache expires.\n\nSee more: https://pnpm.io/settings#dlxcachemaxage",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "storeDir": {
          "description": "The location where all the packages are saved on the disk.\n\nSee more: https://pnpm.io/settings#storedir",
          "type": [
            "string",
            "null"
          ]
        },
        "verifyStoreIntegrity": {
          "description": "By default, if a file in the store has been modified, the content of this file is checked before linking it to a project's node_modules.\n\nSee more: https://pnpm.io/settings#verifystoreintegrity",
          "type": [
            "boolean",
            "null"
          ]
        },
        "strictStorePkgContentCheck": {
          "description": "Some registries allow the exact same content to be published under different package names and/or versions.\n\nSee more: https://pnpm.io/settings#strictstorepkgcontentcheck",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enableGlobalVirtualStore": {
          "description": "When enabled, node_modules contains only symlinks to a central virtual store, rather than to node_modules/.pnpm.\n\nSee more: https://pnpm.io/settings#enableglobalvirtualstore",
          "type": [
            "boolean",
            "null"
          ]
        },
        "lockfile": {
          "description": "When set to false, pnpm won't read or generate a pnpm-lock.yaml file.\n\nSee more: https://pnpm.io/settings#lockfile",
          "type": [
            "boolean",
            "null"
          ]
        },
        "preferFrozenLockfile": {
          "description": "When set to true and the available pnpm-lock.yaml satisfies the package.json dependencies directive, a headless installation is performed.\n\nSee more: https://pnpm.io/settings#preferfrozenlockfile",
          "type": [
            "boolean",
            "null"
          ]
        },
        "lockfileIncludeTarballUrl": {
          "description": "Add the full URL to the package's tarball to every entry in pnpm-lock.yaml.\n\nSee more: https://pnpm.io/settings#lockfileincludetarballurl",
          "type": [
            "boolean",
            "null"
          ]
        },
        "gitBranchLockfile": {
          "description": "When set to true, the generated lockfile name after installation will be named based on the current branch name to completely avoid merge conflicts.\n\nSee more: https://pnpm.io/settings#gitbranchlockfile",
          "type": [
            "boolean",
            "null"
          ]
        },
        "mergeGitBranchLockfilesBranchPattern": {
          "description": "This configuration matches the current branch name to determine whether to merge all git branch lockfile files.\n\nSee more: https://pnpm.io/settings#mergegitbranchlockfilesbranchpattern",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "peersSuffixMaxLength": {
          "description": "Max length of the peer IDs suffix added to dependency keys in the lockfile. If the suffix is longer, it is replaced with a hash.\n\nSee more: https://pnpm.io/settings#peerssuffixmaxlength",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "registry": {
          "description": "The base URL of the npm package registry (trailing slash included).\n\nSee more: https://pnpm.io/settings#registry",
          "type": [
            "string",
            "null"
          ]
        },
        "ca": {
          "description": "The Certificate Authority signing certificate that is trusted for SSL connections to the registry.\n\nSee more: https://pnpm.io/settings#ca",
          "type": [
            "string",
            "null"
          ]
        },
        "cafile": {
          "description": "A path to a file containing one or multiple Certificate Authority signing certificates.\n\nSee more: https://pnpm.io/settings#cafile",
          "type": [
            "string",
            "null"
          ]
        },
        "cert": {
          "description": "A client certificate to pass when accessing the registry.\n\nSee more: https://pnpm.io/settings#cert",
          "type": [
            "string",
            "null"
          ]
        },
        "key": {
          "description": "A client key to pass when accessing the registry.\n\nSee more: https://pnpm.io/settings#key",
          "type": [
            "string",
            "null"
          ]
        },
        "gitShallowHosts": {
          "description": "When fetching dependencies that are Git repositories, if the host is listed in this setting, pnpm will use shallow cloning to fetch only the needed commit, not all the history.\n\nSee more: https://pnpm.io/settings#gitshallowhosts",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "httpsProxy": {
          "description": "A proxy to use for outgoing HTTPS requests. If the HTTPS_PROXY, https_proxy, HTTP_PROXY or http_proxy environment variables are set, their values will be used instead.\n\nSee more: https://pnpm.io/settings#https-proxy",
          "type": [
            "string",
            "null"
          ]
        },
        "proxy": {
          "description": "A proxy to use for outgoing http requests. If the HTTP_PROXY or http_proxy environment variables are set, proxy settings will be honored by the underlying request library.\n\nSee more: https://pnpm.io/settings#proxy",
          "type": [
            "string",
            "null"
          ]
        },
        "localAddress": {
          "description": "The IP address of the local interface to use when making connections to the npm registry.\n\nSee more: https://pnpm.io/settings#local-address",
          "type": [
            "string",
            "null"
          ]
        },
        "maxsockets": {
          "description": "The maximum number of connections to use per origin (protocol/host/port combination).\n\nSee more: https://pnpm.io/settings#maxsockets",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "noproxy": {
          "description": "A comma-separated string of domain extensions that a proxy should not be used for.\n\nSee more: https://pnpm.io/settings#noproxy",
          "type": [
            "string",
            "null"
          ]
        },
        "strictSsl": {
          "description": "Whether or not to do SSL key validation when making requests to the registry via HTTPS.\n\nSee more: https://pnpm.io/settings#strict-ssl",
          "type": [
            "boolean",
            "null"
          ]
        },
        "networkConcurrency": {
          "description": "Controls the maximum number of HTTP(S) requests to process simultaneously.\n\nSee more: https://pnpm.io/settings#networkconcurrency",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "fetchRetries": {
          "description": "How many times to retry if pnpm fails to fetch from the registry.\n\nSee more: https://pnpm.io/settings#fetchretries",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "fetchRetryFactor": {
          "description": "The exponential factor for retry backoff.\n\nSee more: https://pnpm.io/settings#fetchretryfactor",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "fetchRetryMinTimeout": {
          "description": "The minimum (base) timeout for retrying requests.\n\nSee more: https://pnpm.io/settings#fetchretrymintimeout",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "fetchRetryMaxTimeout": {
          "description": "The maximum fallback timeout to ensure the retry factor does not make requests too long.\n\nSee more: https://pnpm.io/settings#fetchretrymaxtimeout",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "fetchTimeout": {
          "description": "The maximum amount of time to wait for HTTP requests to complete.\n\nSee more: https://pnpm.io/settings#fetchtimeout",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "autoInstallPeers": {
          "description": "When true, any missing non-optional peer dependencies are automatically installed.\n\nSee more: https://pnpm.io/settings#autoinstallpeers",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dedupePeerDependents": {
          "description": "When this setting is set to true, packages with peer dependencies will be deduplicated after peers resolution.\n\nSee more: https://pnpm.io/settings#dedupepeerdependents",
          "type": [
            "boolean",
            "null"
          ]
        },
        "strictPeerDependencies": {
          "description": "If this is enabled, commands will fail if there is a missing or invalid peer dependency in the tree.\n\nSee more: https://pnpm.io/settings#strictpeerdependencies",
          "type": [
            "boolean",
            "null"
          ]
        },
        "resolvePeersFromWorkspaceRoot": {
          "description": "When enabled, dependencies of the root workspace project are used to resolve peer dependencies of any projects in the workspace.\n\nSee more: https://pnpm.io/settings#resolvepeersfromworkspaceroot",
          "type": [
            "boolean",
            "null"
          ]
        },
        "color": {
          "description": "Controls colors in the output.\n\nSee more: https://pnpm.io/settings#no-color",
          "anyOf": [
            {
              "$ref": "#/$defs/Color"
            },
            {
              "type": "null"
            }
          ]
        },
        "loglevel": {
          "description": "Any logs at or higher than the given level will be shown.\n\nSee more: https://pnpm.io/settings#loglevel",
          "anyOf": [
            {
              "$ref": "#/$defs/LogLevel"
            },
            {
              "type": "null"
            }
          ]
        },
        "useBetaCli": {
          "description": "Experimental option that enables beta features of the CLI.\n\nSee more: https://pnpm.io/settings#usebetacli",
          "type": [
            "boolean",
            "null"
          ]
        },
        "recursiveInstall": {
          "description": "If this is enabled, the primary behaviour of pnpm install becomes that of pnpm install -r, meaning the install is performed on all workspace or subdirectory packages.\n\nSee more: https://pnpm.io/settings#recursiveinstall",
          "type": [
            "boolean",
            "null"
          ]
        },
        "engineStrict": {
          "description": "If this is enabled, pnpm will not install any package that claims to not be compatible with the current Node version.\n\nSee more: https://pnpm.io/settings#enginestrict",
          "type": [
            "boolean",
            "null"
          ]
        },
        "npmPath": {
          "description": "The location of the npm binary that pnpm uses for some actions, like publishing.\n\nSee more: https://pnpm.io/settings#npmpath",
          "type": [
            "string",
            "null"
          ]
        },
        "packageManagerStrict": {
          "description": "If this setting is disabled, pnpm will not fail if a different package manager is specified in the packageManager field of package.json. When enabled, only the package name is checked (since pnpm v9.2.0), so you can still run any version of pnpm regardless of the version specified in the packageManager field.\n\nSee more: https://pnpm.io/settings#packagemanagerstrict",
          "type": [
            "boolean",
            "null"
          ]
        },
        "packageManagerStrictVersion": {
          "description": "When enabled, pnpm will fail if its version doesn't exactly match the version specified in the packageManager field of package.json.\n\nSee more: https://pnpm.io/settings#packagemanagerstrictversion",
          "type": [
            "boolean",
            "null"
          ]
        },
        "managePackageManagerVersions": {
          "description": "When enabled, pnpm will automatically download and run the version of pnpm specified in the packageManager field of package.json.\n\nSee more: https://pnpm.io/settings#managepackagemanagerversions",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignoreScripts": {
          "description": "Do not execute any scripts defined in the project package.json and its dependencies.\n\nSee more: https://pnpm.io/settings#ignorescripts",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignoreDepScripts": {
          "description": "Do not execute any scripts of the installed packages. Scripts of the projects are executed.\n\nSee more: https://pnpm.io/settings#ignoredepscripts",
          "type": [
            "boolean",
            "null"
          ]
        },
        "childConcurrency": {
          "description": "The maximum number of child processes to allocate simultaneously to build node_modules.\n\nSee more: https://pnpm.io/settings#childconcurrency",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "sizeEffectsCache": {
          "description": "Use and cache the results of (pre/post)install hooks.\n\nSee more: https://pnpm.io/settings#sideeffectscache",
          "type": [
            "boolean",
            "null"
          ]
        },
        "sizeEffectsCacheReadOnly": {
          "description": "Only use the side effects cache if present, do not create it for new packages.\n\nSee more: https://pnpm.io/settings#sideeffectscachereadonly",
          "type": [
            "boolean",
            "null"
          ]
        },
        "unsafePerm": {
          "description": "Set to true to enable UID/GID switching when running package scripts. If set explicitly to false, then installing as a non-root user will fail.\n\nSee more: https://pnpm.io/settings#unsafeperm",
          "type": [
            "boolean",
            "null"
          ]
        },
        "nodeOptions": {
          "description": "Options to pass through to Node.js via the NODE_OPTIONS environment variable.\n\nSee more: https://pnpm.io/settings#nodeoptions",
          "type": [
            "string",
            "null"
          ]
        },
        "verifyDepsBeforeRun": {
          "description": "This setting allows the checking of the state of dependencies before running scripts.\n\nSee more: https://pnpm.io/settings#verifydepsbeforerun",
          "anyOf": [
            {
              "$ref": "#/$defs/VerifyDepsBeforeRun"
            },
            {
              "type": "null"
            }
          ]
        },
        "strictDepBuilds": {
          "description": "When strictDepBuilds is enabled, the installation will exit with a non-zero exit code if any dependencies have unreviewed build scripts (aka postinstall scripts).\n\nSee more: https://pnpm.io/settings#strictdepbuilds",
          "type": [
            "boolean",
            "null"
          ]
        },
        "useNodeVersion": {
          "description": "Specifies which exact Node.js version should be used for the project's runtime.\n\nSee more: https://pnpm.io/settings#usenodeversion",
          "type": [
            "string",
            "null"
          ]
        },
        "nodeVersion": {
          "description": "The Node.js version to use when checking a package's engines setting.\n\nSee more: https://pnpm.io/settings#nodeversion",
          "type": [
            "string",
            "null"
          ]
        },
        "linkWorkspacePackages": {
          "description": "If this is enabled, locally available packages are linked to node_modules instead of being downloaded from the registry.\n\nSee more: https://pnpm.io/settings#linkworkspacepackages",
          "anyOf": [
            {
              "$ref": "#/$defs/LinkWorkspacePackages"
            },
            {
              "type": "null"
            }
          ]
        },
        "injectWorkspacePackages": {
          "description": "Enables hard-linking of all local workspace dependencies instead of symlinking them.\n\nSee more: https://pnpm.io/settings#injectworkspacepackages",
          "type": [
            "boolean",
            "null"
          ]
        },
        "syncInjectedDepsAfterScripts": {
          "description": "Injected workspace dependencies are collections of hardlinks, which don't add or remove the files when their sources change.\n\nSee more: https://pnpm.io/settings#syncinjecteddepsafterscripts",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "preferWorkspacePackages": {
          "description": "If this is enabled, local packages from the workspace are preferred over packages from the registry, even if there is a newer version of the package in the registry.\n\nSee more: https://pnpm.io/settings#preferworkspacepackages",
          "type": [
            "boolean",
            "null"
          ]
        },
        "sharedWorkspaceLockfile": {
          "description": "If this is enabled, pnpm creates a single pnpm-lock.yaml file in the root of the workspace.\n\nSee more: https://pnpm.io/settings#sharedworkspacelockfile",
          "type": [
            "boolean",
            "null"
          ]
        },
        "saveWorkspaceProtocol": {
          "description": "This setting controls how dependencies that are linked from the workspace are added to package.json.\n\nSee more: https://pnpm.io/settings#saveworkspaceprotocol",
          "anyOf": [
            {
              "$ref": "#/$defs/SaveWorkspaceProtocol"
            },
            {
              "type": "null"
            }
          ]
        },
        "includeWorkspaceRoot": {
          "description": "When executing commands recursively in a workspace, execute them on the root workspace project as well.\n\nSee more: https://pnpm.io/settings#includeworkspaceroot",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignoreWorkspaceCycles": {
          "description": "When set to true, no workspace cycle warnings will be printed.\n\nSee more: https://pnpm.io/settings#ignoreworkspacecycles",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignoreWorkspaceRootCheck": {
          "description": "Adding a new dependency to the root workspace package fails, unless the --ignore-workspace-root-check or -w flag is used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "disallowWorkspaceCycles": {
          "description": "When set to true, installation will fail if the workspace has cycles.\n\nSee more: https://pnpm.io/settings#disallowworkspacecycles",
          "type": [
            "boolean",
            "null"
          ]
        },
        "forceLegacyDeploy": {
          "description": "By default, pnpm deploy will try creating a dedicated lockfile from a shared lockfile for deployment. If this setting is set to true, the legacy deploy behavior will be used.\n\nSee more: https://pnpm.io/settings#forcelegacydeploy",
          "type": [
            "boolean",
            "null"
          ]
        },
        "savePrefix": {
          "description": "Configure how versions of packages installed to a package.json file get prefixed.\n\nSee more: https://pnpm.io/settings#saveprefix",
          "anyOf": [
            {
              "$ref": "#/$defs/SavePrefix"
            },
            {
              "type": "null"
            }
          ]
        },
        "tag": {
          "description": "If you pnpm add a package and you don't provide a specific version, then it will install the package at the version registered under the tag from this setting.\n\nSee more: https://pnpm.io/settings#tag",
          "type": [
            "string",
            "null"
          ]
        },
        "globalDir": {
          "description": "Specify a custom directory to store global packages.\n\nSee more: https://pnpm.io/settings#globaldir",
          "type": [
            "string",
            "null"
          ]
        },
        "globalBinDir": {
          "description": "Allows to set the target directory for the bin files of globally installed packages.\n\nSee more: https://pnpm.io/settings#globalbindir",
          "type": [
            "string",
            "null"
          ]
        },
        "stateDir": {
          "description": "The location where all the packages are saved on the disk.\n\nSee more: https://pnpm.io/settings#statedir",
          "type": [
            "string",
            "null"
          ]
        },
        "cacheDir": {
          "description": "The location of the cache (package metadata and dlx).\n\nSee more: https://pnpm.io/settings#cachedir",
          "type": [
            "string",
            "null"
          ]
        },
        "useStderr": {
          "description": "When true, all the output is written to stderr.\n\nSee more: https://pnpm.io/settings#usestderr",
          "type": [
            "boolean",
            "null"
          ]
        },
        "updateNotifier": {
          "description": "When true, pnpm will check for updates to the installed packages and notify the user.\n\nSee more: https://pnpm.io/settings#updatenotifier",
          "type": [
            "boolean",
            "null"
          ]
        },
        "preferSymlinkedExecutabled": {
          "description": "Create symlinks to executables in node_modules/.bin instead of command shims. This setting is ignored on Windows, where only command shims work.\n\nSee more: https://pnpm.io/settings#prefersymlinkedexecutables",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignoreCompatibilityDb": {
          "description": "During installation the dependencies of some packages are automatically patched. If you want to disable this, set this config to false.\n\nSee more: https://pnpm.io/settings#ignorecompatibilitydb",
          "type": [
            "boolean",
            "null"
          ]
        },
        "resolutionMode": {
          "description": "Determines how pnpm resolves dependencies.\n\nSee more: https://pnpm.io/settings#resolutionmode",
          "anyOf": [
            {
              "$ref": "#/$defs/ResolutionMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "registrySupportsTimeField": {
          "description": "Set this to true if the registry that you are using returns the `time` field in the abbreviated metadata.\n\nSee more: https://pnpm.io/settings#registrysupportstimefield",
          "type": [
            "boolean",
            "null"
          ]
        },
        "extendNodePath": {
          "description": "When false, the NODE_PATH environment variable is not set in the command shims.\n\nSee more: https://pnpm.io/settings#extendnodepath",
          "type": [
            "boolean",
            "null"
          ]
        },
        "deployAllFiles": {
          "description": "When deploying a package or installing a local package, all files of the package are copied.\n\nSee more: https://pnpm.io/settings#deployallfiles",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dedupeDirectDeps": {
          "description": "When set to true, dependencies that are already symlinked to the root node_modules directory of the workspace will not be symlinked to subproject node_modules directories.\n\nSee more: https://pnpm.io/settings#dedupedirectdeps",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dedupeInjectedDeps": {
          "description": "When this setting is enabled, dependencies that are injected will be symlinked from the workspace whenever possible.\n\nSee more: https://pnpm.io/settings#dedupeinjecteddeps",
          "type": [
            "boolean",
            "null"
          ]
        },
        "optimisticRepeatInstall": {
          "description": "When enabled, a fast check will be performed before proceeding to installation. This way a repeat install or an install on a project with everything up-to-date becomes a lot faster.\n\nSee more: https://pnpm.io/settings#optimisticrepeatinstall",
          "type": [
            "boolean",
            "null"
          ]
        },
        "gitChecks": {
          "description": "Check if current branch is your publish branch, clean, and up-to-date with remote.\n\nSee more: https://pnpm.io/cli/publish#configuration",
          "type": [
            "boolean",
            "null"
          ]
        },
        "publishBranch": {
          "description": "The primary branch of the repository which is used for publishing the latest changes.\n\nSee more: https://pnpm.io/cli/publish#configuration",
          "type": [
            "string",
            "null"
          ]
        },
        "pnpmfile": {
          "description": "The location of the local pnpmfile.\n\nSee more: https://pnpm.io/settings#pnpmfile",
          "type": [
            "string",
            "null"
          ]
        },
        "globalPnpmfile": {
          "description": "The location of a global pnpmfile. A global pnpmfile is used by all projects during installation.\n\nSee more: https://pnpm.io/settings#globalpnpmfile",
          "type": [
            "string",
            "null"
          ]
        },
        "ignorePnpmfile": {
          "description": ".pnpmfile.cjs will be ignored. Useful together with --ignore-scripts when you want to make sure that no script gets executed during install.\n\nSee more: https://pnpm.io/settings#ignorepnpmfile",
          "type": [
            "boolean",
            "null"
          ]
        },
        "patchesDir": {
          "description": "The generated patch file will be saved to this directory.\n\nSee more: https://pnpm.io/cli/patch-commit",
          "type": [
            "string",
            "null"
          ]
        },
        "enablePrePostScripts": {
          "description": "When true, pnpm will run any pre/post scripts automatically.\n\nSee more: https://pnpm.io/settings#enableprepostscripts",
          "type": [
            "boolean",
            "null"
          ]
        },
        "scriptShell": {
          "description": "The shell to use for scripts run with the pnpm run command.\n\nSee more: https://pnpm.io/settings#scriptshell",
          "type": [
            "string",
            "null"
          ]
        },
        "shellEmulator": {
          "description": "When true, pnpm will use a JavaScript implementation of a bash-like shell to execute scripts.\n\nSee more: https://pnpm.io/settings#shellemulator",
          "type": [
            "boolean",
            "null"
          ]
        },
        "saveExact": {
          "description": "Saved dependencies will be configured with an exact version rather than using pnpm's default semver range operator.\n\nSee more: https://pnpm.io/cli/add#--save-exact--e",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": true
    },
    "UpdateConfig": {
      "description": "Configuration for package updates. See more: https://pnpm.io/settings#updateconfig",
      "type": "object",
      "properties": {
        "ignoreDependencies": {
          "description": "A list of packages that should be ignored when running `pnpm outdated` or `pnpm update --latest`.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PackageExtension": {
      "description": "Package extensions offer a way to extend the existing package definitions with additional information. For example, if react-redux should have react-dom in its peerDependencies but it has not, it is possible to patch react-redux using packageExtensions. See more: https://pnpm.io/settings#packageextensions",
      "type": "object",
      "properties": {
        "dependencies": {
          "description": "Dependencies are specified with a simple hash of package name to version range. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or git URL.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "devDependencies": {
          "description": "Specifies dependencies that are required for the development and testing of the project. These dependencies are not needed in the production environment.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "optionalDependencies": {
          "description": "Specifies dependencies that are optional for your project. These dependencies are attempted to be installed during the npm install process, but if they fail to install, the installation process will not fail.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "peerDependencies": {
          "description": "Specifies dependencies that are required by the package but are expected to be provided by the consumer of the package.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "peerDependenciesMeta": {
          "description": "When a user installs your package, warnings are emitted if packages specified in \"peerDependencies\" are not already installed. The \"peerDependenciesMeta\" field serves to provide more information on how your peer dependencies are utilized. Most commonly, it allows peer dependencies to be marked as optional. Metadata for this field is specified with a simple hash of the package name to a metadata object.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/PeerDependencyMeta"
          }
        }
      }
    },
    "PeerDependencyMeta": {
      "description": "When a user installs your package, warnings are emitted if packages specified in \"peerDependencies\" are not already installed. The \"peerDependenciesMeta\" field serves to provide more information on how your peer dependencies are utilized. Most commonly, it allows peer dependencies to be marked as optional. Metadata for this field is specified with a simple hash of the package name to a metadata object.",
      "type": "object",
      "properties": {
        "optional": {
          "description": "Specifies that this peer dependency is optional and should not be installed automatically.",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": true
    },
    "PeerDependencyRules": {
      "description": "Rules for peer dependencies. See more: https://pnpm.io/settings#peerdependencyrules",
      "type": "object",
      "properties": {
        "allowedVersions": {
          "description": "Unmet peer dependency warnings will not be printed for peer dependencies of the specified range.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "allowAny": {
          "description": "A list of package name patterns, any peer dependency matching the pattern will be resolved from any version, regardless of the range specified in peerDependencies.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "ignoreMissing": {
          "description": "pnpm will not print warnings about missing peer dependencies from this list.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AuditConfig": {
      "description": "Settings for the `pnpm audit` command. See more: https://pnpm.io/settings#auditconfig",
      "type": "object",
      "properties": {
        "ignoreCves": {
          "description": "A list of CVE IDs that will be ignored by `pnpm audit`.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "ignoreGhas": {
          "description": "A list of GHSA Codes that will be ignored by `pnpm audit`.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SupportedArchitectures": {
      "description": "Specifies architectures for which you'd like to install optional dependencies, even if they don't match the architecture of the system running the install. See more: https://pnpm.io/settings#supportedarchitectures",
      "type": "object",
      "properties": {
        "cpu": {
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "libc": {
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "os": {
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ExecutionEnv": {
      "description": "Instructions for the runtime, such as the node version to use. See more: https://pnpm.io/settings#executionenvnodeversion",
      "type": "object",
      "properties": {
        "nodeVersion": {
          "description": "Specifies which exact Node.js version should be used for the project's runtime.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "NodeLinker": {
      "description": "Defines what linker should be used for installing Node packages. See more: https://pnpm.io/settings#nodelinker",
      "oneOf": [
        {
          "description": "Dependencies are symlinked from a virtual store at node_modules/.pnpm",
          "type": "string",
          "const": "isolated"
        },
        {
          "description": "A flat node_modules without symlinks is created.",
          "type": "string",
          "const": "hoisted"
        },
        {
          "description": "No node_modules. Plug'n'Play is an innovative strategy for Node that is used by Yarn Berry. It is recommended to also set symlink setting to false when using pnp as your linker.",
          "type": "string",
          "const": "pnp"
        }
      ]
    },
    "PackageImportMethod": {
      "description": "Controls the way packages are imported from the store (if you want to disable symlinks inside node_modules, then you need to change the nodeLinker setting, not this one). See more: https://pnpm.io/settings#packageimportmethod",
      "oneOf": [
        {
          "description": "Try to clone packages from the store. If cloning is not supported then hardlink packages from the store. If neither cloning nor linking is possible, fall back to copying.",
          "type": "string",
          "const": "auto"
        },
        {
          "description": "Hard link packages from the store.",
          "type": "string",
          "const": "hardlink"
        },
        {
          "description": "Clone (AKA copy-on-write or reference link) packages from the store.",
          "type": "string",
          "const": "clone"
        },
        {
          "description": "Try to clone packages from the store. If cloning is not supported then fall back to copying.",
          "type": "string",
          "const": "clone-or-copy"
        },
        {
          "description": "Copy packages from the store.",
          "type": "string",
          "const": "copy"
        }
      ]
    },
    "Color": {
      "description": "Controls colors in the output. See more: https://pnpm.io/settings#no-color",
      "oneOf": [
        {
          "description": "Ignore the difference between terminals and pipes.",
          "type": "string",
          "const": "always"
        },
        {
          "description": "Output uses colors when the standard output is a terminal or TTY",
          "type": "string",
          "const": "auto"
        },
        {
          "description": "Turns off colors. This is the setting used by --no-color.",
          "type": "string",
          "const": "never"
        }
      ]
    },
    "LogLevel": {
      "description": "Any logs at or higher than the given level will be shown. See more: https://pnpm.io/settings#loglevel",
      "type": "string",
      "enum": [
        "debug",
        "info",
        "warn",
        "error"
      ]
    },
    "VerifyDepsBeforeRun": {
      "description": "This setting allows the checking of the state of dependencies before running scripts. See more: https://pnpm.io/settings#verifydepsbeforerun",
      "anyOf": [
        {
          "description": "Automatically runs install if node_modules is not up to date.",
          "type": "string",
          "const": "Install"
        },
        {
          "description": "Prints a warning if node_modules is not up to date.",
          "type": "string",
          "const": "Warn"
        },
        {
          "description": "Throws an error if node_modules is not up to date.",
          "type": "string",
          "const": "Error"
        },
        {
          "description": "Prompts the user for permission to run install if node_modules is not up to date.",
          "type": "string",
          "const": "Prompt"
        },
        {
          "type": "boolean"
        }
      ]
    },
    "LinkWorkspacePackages": {
      "description": "If this is enabled, locally available packages are linked to node_modules instead of being downloaded from the registry. See more: https://pnpm.io/settings#linkworkspacepackages",
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "Deep"
          ]
        },
        {
          "type": "boolean"
        }
      ]
    },
    "SaveWorkspaceProtocol": {
      "description": "This setting controls how dependencies that are linked from the workspace are added to package.json. See more: https://pnpm.io/settings#saveworkspaceprotocol",
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "Rolling"
          ]
        },
        {
          "type": "boolean"
        }
      ]
    },
    "SavePrefix": {
      "description": "Configure how versions of packages installed to a package.json file get prefixed. See more: https://pnpm.io/settings#saveprefix",
      "oneOf": [
        {
          "description": "Do not allow upgrades.",
          "type": "string",
          "const": ""
        },
        {
          "description": "Allows patch upgrades.",
          "type": "string",
          "const": "~"
        },
        {
          "description": "Allows minor upgrades.",
          "type": "string",
          "const": "^"
        }
      ]
    },
    "ResolutionMode": {
      "description": "Determines how pnpm resolves dependencies. See more: https://pnpm.io/settings#resolutionmode",
      "oneOf": [
        {
          "description": "Dependencies will be resolved to their highest versions.",
          "type": "string",
          "const": "highest"
        },
        {
          "description": "Direct dependencies will be resolved to their lowest versions.",
          "type": "string",
          "const": "lowest-direct"
        },
        {
          "description": "When resolutionMode is set to time-based, dependencies will be resolved the following way:\nDirect dependencies will be resolved to their lowest versions. So if there is foo@^1.1.0 in the dependencies, then 1.1.0 will be installed.\nSubdependencies will be resolved from versions that were published before the last direct dependency was published.",
          "type": "string",
          "const": "time-based"
        }
      ]
    },
    "Directories": {
      "description": "A struct that represents the value of the `directories` field in a `package.json` file.",
      "type": "object",
      "properties": {
        "bin": {
          "description": "If you specify a `bin` directory, then all the files in that folder will be used as the `bin` hash.",
          "type": [
            "string",
            "null"
          ]
        },
        "lib": {
          "description": "Tell people where the bulk of your library is. Nothing special is done with the lib folder in any way, but it's useful meta info.",
          "type": [
            "string",
            "null"
          ]
        },
        "doc": {
          "description": "Put markdown files in here. Eventually, these will be displayed nicely, maybe, someday.",
          "type": [
            "string",
            "null"
          ]
        },
        "example": {
          "description": "Put example scripts in here. Someday, it might be exposed in some clever way.",
          "type": [
            "string",
            "null"
          ]
        },
        "man": {
          "description": "A folder that is full of man pages. Sugar to generate a 'man' array by walking the folder.",
          "type": [
            "string",
            "null"
          ]
        },
        "test": {
          "description": "The tests directory.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": {
        "type": "string"
      }
    },
    "Bugs": {
      "description": "A struct representing the `bugs` field in a `package.json` file.",
      "type": "object",
      "properties": {
        "url": {
          "description": "The url to your project's issue tracker.",
          "type": [
            "string",
            "null"
          ]
        },
        "email": {
          "description": "The email address to which issues should be reported.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Man": {
      "description": "A struct that represents the kinds of values for the `man` field of a `package.json` file.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "PublishConfig": {
      "description": "A set of config values that will be used at publish-time. It's especially handy if you want to set the tag, registry or access, so that you can ensure that a given package is not tagged with \"latest\", published to the global public registry or that a scoped module is private by default.",
      "type": "object",
      "properties": {
        "access": {
          "anyOf": [
            {
              "$ref": "#/$defs/PublishConfigAccess"
            },
            {
              "type": "null"
            }
          ]
        },
        "tag": {
          "type": [
            "string",
            "null"
          ]
        },
        "registry": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": {
        "type": "string"
      }
    },
    "PublishConfigAccess": {
      "description": "The values that can be used to define `access` in a [`PublishConfig`]",
      "type": "string",
      "enum": [
        "public",
        "restricted"
      ]
    },
    "TsConfigPreset": {
      "description": "A preset for a `tsconfig` file.",
      "type": "object",
      "properties": {
        "extends_presets": {
          "description": "The list of extended presets.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "default": []
        },
        "extends": {
          "description": "Path to base configuration file to inherit from (requires TypeScript version 2.1 or later), or array of base files, with the rightmost files having the greater priority (requires TypeScript version 5.0 or later).",
          "type": [
            "string",
            "null"
          ]
        },
        "files": {
          "description": "If no 'files' or 'include' property is present in a tsconfig.json, the compiler defaults to including all files in the containing directory and subdirectories except those specified by 'exclude'. When a 'files' property is specified, only those files and those specified by 'include' are included.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "exclude": {
          "description": "Specifies a list of files to be excluded from compilation. The 'exclude' property only affects the files included via the 'include' property and not the 'files' property. Glob patterns require TypeScript version 2.0 or later.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "include": {
          "description": "Specifies a list of glob patterns that match files to be included in compilation. If no 'files' or 'include' property is present in a tsconfig.json, the compiler defaults to including all files in the containing directory and subdirectories except those specified by 'exclude'. Requires TypeScript version 2.0 or later.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "references": {
          "description": "Referenced projects. Requires TypeScript version 3.0 or later.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/TsConfigReference"
          }
        },
        "typeAcquisition": {
          "description": "Auto type (.d.ts) acquisition options for this project. Requires TypeScript version 2.1 or later.",
          "anyOf": [
            {
              "$ref": "#/$defs/TypeAcquisition"
            },
            {
              "type": "null"
            }
          ]
        },
        "watchOptions": {
          "description": "Settings for the watch mode in TypeScript.",
          "anyOf": [
            {
              "$ref": "#/$defs/WatchOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "compilerOptions": {
          "description": "Instructs the TypeScript compiler how to compile .ts files.",
          "anyOf": [
            {
              "$ref": "#/$defs/CompilerOptions"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "TsConfigReference": {
      "description": "A reference to a Typescript project. Requires TypeScript version 3.0 or later.",
      "type": "object",
      "properties": {
        "path": {
          "description": "Path to referenced tsconfig or to folder containing tsconfig.",
          "type": "string"
        }
      },
      "required": [
        "path"
      ]
    },
    "TypeAcquisition": {
      "description": "Auto type (.d.ts) acquisition options for this project. Requires TypeScript version 2.1 or later.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "properties": {
            "enable": {
              "description": "Enable auto type acquisition",
              "type": "boolean"
            },
            "include": {
              "description": "Specifies a list of type declarations to be included in auto type acquisition. Ex. [\"jquery\", \"lodash\"]",
              "type": [
                "array",
                "null"
              ],
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "exclude": {
              "description": "Specifies a list of type declarations to be excluded from auto type acquisition. Ex. [\"jquery\", \"lodash\"]",
              "type": [
                "array",
                "null"
              ],
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "disableFilenameBasedTypeAcquisition": {
              "description": "TypeScript’s type acquisition can infer what types should be added based on filenames in a project. This means that having a file like jquery.js in your project would automatically download the types for JQuery from DefinitelyTyped.\nYou can disable this via disableFilenameBasedTypeAcquisition.\n\nSee more: https://www.typescriptlang.org/it/tsconfig/#type-disableFilenameBasedTypeAcquisition",
              "type": [
                "boolean",
                "null"
              ]
            }
          },
          "required": [
            "enable"
          ]
        }
      ]
    },
    "WatchOptions": {
      "description": "Settings for the watch mode in TypeScript.",
      "type": "object",
      "properties": {
        "watchFile": {
          "description": "Specify how the TypeScript watch mode works.\n\nSee more: https://www.typescriptlang.org/tsconfig#watchFile",
          "anyOf": [
            {
              "$ref": "#/$defs/WatchFile"
            },
            {
              "type": "null"
            }
          ]
        },
        "watchDirectory": {
          "description": "Specify how directories are watched on systems that lack recursive file-watching functionality.\n\nSee more: https://www.typescriptlang.org/tsconfig#watchDirectory",
          "anyOf": [
            {
              "$ref": "#/$defs/WatchDirectory"
            },
            {
              "type": "null"
            }
          ]
        },
        "excludeFiles": {
          "description": "Remove a list of files from the watch mode's processing.\n\nSee more: https://www.typescriptlang.org/tsconfig#excludeFiles",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "excludeDirectories": {
          "description": "Remove a list of directories from the watch process.\n\nSee more: https://www.typescriptlang.org/tsconfig#excludeDirectories",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "fallbackPolling": {
          "description": "Specify what approach the watcher should use if the system runs out of native file watchers.\n\nSee more: https://www.typescriptlang.org/tsconfig#fallbackPolling",
          "anyOf": [
            {
              "$ref": "#/$defs/FallbackPolling"
            },
            {
              "type": "null"
            }
          ]
        },
        "synchronousWatchDirectory": {
          "description": "Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.\n\nSee more: https://www.typescriptlang.org/tsconfig#synchronousWatchDirectory",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "WatchFile": {
      "description": "Specify how the TypeScript watch mode works. See more: https://www.typescriptlang.org/tsconfig#watchFile",
      "type": "string",
      "enum": [
        "fixedPollingInterval",
        "priorityPollingInterval",
        "dynamicPriorityPolling",
        "useFsEvents",
        "useFsEventsOnParentDirectory",
        "fixedChunkSizePolling"
      ]
    },
    "WatchDirectory": {
      "description": "Specify how directories are watched on systems that lack recursive file-watching functionality. See more: https://www.typescriptlang.org/tsconfig#watchDirectory",
      "type": "string",
      "enum": [
        "useFsEvents",
        "fixedPollingInterval",
        "dynamicPriorityPolling",
        "fixedChunkSizePolling"
      ]
    },
    "FallbackPolling": {
      "description": "Specify what approach the watcher should use if the system runs out of native file watchers. See more: https://www.typescriptlang.org/tsconfig#fallbackPolling",
      "type": "string",
      "enum": [
        "fixedPollingInterval",
        "priorityPollingInterval",
        "dynamicPriorityPolling",
        "fixedInterval",
        "priorityInterval",
        "dynamicPriority",
        "fixedChunkSize"
      ]
    },
    "CompilerOptions": {
      "description": "Instructs the TypeScript compiler how to compile .ts files.",
      "type": "object",
      "properties": {
        "allowArbitraryExtensions": {
          "description": "Enable importing files with any extension, provided a declaration file is present.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowArbitraryExtensions",
          "type": [
            "boolean",
            "null"
          ]
        },
        "allowImportingTsExtensions": {
          "description": "Allow imports to include TypeScript file extensions. Requires either '--noEmit' or '--emitDeclarationOnly' to be set.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowImportingTsExtensions",
          "type": [
            "boolean",
            "null"
          ]
        },
        "allowJs": {
          "description": "Allow JavaScript files to be imported inside your project, instead of just .ts and .tsx files.\n\nSee more: https://www.typescriptlang.org/tsconfig/#allowJs",
          "type": [
            "boolean",
            "null"
          ]
        },
        "allowSyntheticDefaultImports": {
          "description": "Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility.\n\nSee more: https://www.typescriptlang.org/tsconfig#esModuleInterop",
          "type": [
            "boolean",
            "null"
          ]
        },
        "allowUmdGlobalAccess": {
          "description": "Allow accessing UMD globals from modules.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowUmdGlobalAccess",
          "type": [
            "boolean",
            "null"
          ]
        },
        "allowUnreachableCode": {
          "description": "Disable error reporting for unreachable code.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowUnreachableCode",
          "type": [
            "boolean",
            "null"
          ]
        },
        "allowUnusedLabels": {
          "description": "Disable error reporting for unused labels.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowUnusedLabels",
          "type": [
            "boolean",
            "null"
          ]
        },
        "alwaysStrict": {
          "description": "Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.\n\nSee more: https://www.typescriptlang.org/tsconfig/#alwaysStrict",
          "type": [
            "boolean",
            "null"
          ]
        },
        "assumeChangesOnlyAffectDirectDependencies": {
          "description": "Have recompiles in '--incremental' and '--watch' assume that changes within a file will only affect files directly depending on it. Requires TypeScript version 3.8 or later.\n\nSee more: https://www.typescriptlang.org/tsconfig/#assumeChangesOnlyAffectDirectDependencies",
          "type": [
            "boolean",
            "null"
          ]
        },
        "baseUrl": {
          "description": "Specify the base directory to resolve non-relative module names.\n\nSee more: https://www.typescriptlang.org/tsconfig#baseUrl",
          "type": [
            "string",
            "null"
          ]
        },
        "checkJs": {
          "description": "Enable error reporting in type-checked JavaScript files.\n\nSee more: https://www.typescriptlang.org/tsconfig#checkJs",
          "type": [
            "boolean",
            "null"
          ]
        },
        "composite": {
          "description": "Enable constraints that allow a TypeScript project to be used with project references.\n\nSee more: https://www.typescriptlang.org/tsconfig#composite",
          "type": [
            "boolean",
            "null"
          ]
        },
        "customConditions": {
          "description": "Conditions to set in addition to the resolver-specific defaults when resolving imports.\n\nSee more: https://www.typescriptlang.org/tsconfig#customConditions",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "declaration": {
          "description": "Generate .d.ts files from TypeScript and JavaScript files in your project.\n\nSee more: https://www.typescriptlang.org/tsconfig#declaration",
          "type": [
            "boolean",
            "null"
          ]
        },
        "declarationDir": {
          "description": "Specify the output directory for generated declaration files.\n\nSee more: https://www.typescriptlang.org/tsconfig#declarationDir",
          "type": [
            "string",
            "null"
          ]
        },
        "declarationMap": {
          "description": "Create sourcemaps for d.ts files.\n\nSee more: https://www.typescriptlang.org/tsconfig#declarationMap",
          "type": [
            "boolean",
            "null"
          ]
        },
        "disableReferencedProjectLoad": {
          "description": "Reduce the number of projects loaded automatically by TypeScript.\n\nSee more: https://www.typescriptlang.org/tsconfig#disableReferencedProjectLoad",
          "type": [
            "boolean",
            "null"
          ]
        },
        "disableSizeLimit": {
          "description": "Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server.\n\nSee more: https://www.typescriptlang.org/tsconfig#disableSizeLimit",
          "type": [
            "boolean",
            "null"
          ]
        },
        "disableSolutionSearching": {
          "description": "Opt a project out of multi-project reference checking when editing.\n\nSee more: https://www.typescriptlang.org/tsconfig#disableSolutionSearching",
          "type": [
            "boolean",
            "null"
          ]
        },
        "disableSourceOfProjectReferenceRedirect": {
          "description": "Disable preferring source files instead of declaration files when referencing composite projects.\n\nSee more: https://www.typescriptlang.org/tsconfig#disableSourceOfProjectReferenceRedirect",
          "type": [
            "boolean",
            "null"
          ]
        },
        "downlevelIteration": {
          "description": "Emit more compliant, but verbose and less performant JavaScript for iteration.\n\nSee more: https://www.typescriptlang.org/tsconfig#downlevelIteration",
          "type": [
            "boolean",
            "null"
          ]
        },
        "emitBOM": {
          "description": "Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.\n\nSee more: https://www.typescriptlang.org/tsconfig#emitBOM",
          "type": [
            "boolean",
            "null"
          ]
        },
        "emitDeclarationOnly": {
          "description": "Only output d.ts files and not JavaScript files.\n\nSee more: https://www.typescriptlang.org/tsconfig#emitDeclarationOnly",
          "type": [
            "boolean",
            "null"
          ]
        },
        "emitDecoratorMetadata": {
          "description": "Emit design-type metadata for decorated declarations in source files.\n\nSee more: https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata",
          "type": [
            "boolean",
            "null"
          ]
        },
        "erasableSyntaxOnly": {
          "description": "Do not allow runtime constructs that are not part of ECMAScript.\n\nSee more: https://www.typescriptlang.org/tsconfig#erasableSyntaxOnly",
          "type": [
            "boolean",
            "null"
          ]
        },
        "esModuleInterop": {
          "description": "Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility.\n\nSee more: https://www.typescriptlang.org/tsconfig#esModuleInterop",
          "type": [
            "boolean",
            "null"
          ]
        },
        "exactOptionalPropertyTypes": {
          "description": "Differentiate between undefined and not present when type checking.\n\nSee more: https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes",
          "type": [
            "boolean",
            "null"
          ]
        },
        "extendedDiagnostics": {
          "description": "Output more detailed compiler performance information after building.\n\nSee more: https://www.typescriptlang.org/tsconfig#extendedDiagnostics",
          "type": [
            "boolean",
            "null"
          ]
        },
        "experimentalDecorators": {
          "description": "Enable experimental support for TC39 stage 2 draft decorators.\n\nSee more: https://www.typescriptlang.org/tsconfig#experimentalDecorators",
          "type": [
            "boolean",
            "null"
          ]
        },
        "explainFiles": {
          "description": "Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.\n\nSee more: https://www.typescriptlang.org/tsconfig/#explainFiles",
          "type": [
            "boolean",
            "null"
          ]
        },
        "forceConsistentCasingInFileNames": {
          "description": "Ensure that casing is correct in imports.\n\nSee more: https://www.typescriptlang.org/tsconfig#forceConsistentCasingInFileNames",
          "type": [
            "boolean",
            "null"
          ]
        },
        "generateTrace": {
          "description": "Generates an event trace and a list of types.\n\nSee more: https://www.typescriptlang.org/tsconfig/#generateTrace",
          "type": [
            "boolean",
            "null"
          ]
        },
        "jsx": {
          "description": "Specify what JSX code is generated.\n\nSee more: https://www.typescriptlang.org/tsconfig/#jsx",
          "anyOf": [
            {
              "$ref": "#/$defs/Jsx"
            },
            {
              "type": "null"
            }
          ]
        },
        "jsxFactory": {
          "description": "Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'.\n\nSee more: https://www.typescriptlang.org/tsconfig#jsxFactory",
          "type": [
            "string",
            "null"
          ]
        },
        "jsxFragmentFactory": {
          "description": "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.\n\nSee more: https://www.typescriptlang.org/tsconfig#jsxFragmentFactory",
          "type": [
            "string",
            "null"
          ]
        },
        "jsxImportSource": {
          "description": "Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx`.\n\nSee more: https://www.typescriptlang.org/tsconfig#jsxImportSource",
          "type": [
            "string",
            "null"
          ]
        },
        "lib": {
          "description": "Specify a set of bundled library declaration files that describe the target runtime environment.\n\nSee more: https://www.typescriptlang.org/tsconfig#lib",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Lib"
          }
        },
        "libReplacement": {
          "description": "Enable lib replacement.\n\nSee more: https://www.typescriptlang.org/tsconfig#libReplacement",
          "type": [
            "boolean",
            "null"
          ]
        },
        "listEmittedFiles": {
          "description": "Print names of generated files part of the compilation to the terminal.\n\nSee more: https://www.typescriptlang.org/tsconfig/#listEmittedFiles",
          "type": [
            "boolean",
            "null"
          ]
        },
        "listFiles": {
          "description": "Print all of the files read during the compilation.\n\nSee more: https://www.typescriptlang.org/tsconfig#listFiles",
          "type": [
            "boolean",
            "null"
          ]
        },
        "mapRoot": {
          "description": "Specify the location where debugger should locate map files instead of generated locations.\n\nSee more: https://www.typescriptlang.org/tsconfig#mapRoot",
          "type": [
            "string",
            "null"
          ]
        },
        "maxNodeModuleJsDepth": {
          "description": "Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`.\n\nSee more: https://www.typescriptlang.org/tsconfig#maxNodeModuleJsDepth",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0
        },
        "module": {
          "description": "Specify what module code is generated.\n\nSee more: https://www.typescriptlang.org/tsconfig#module",
          "anyOf": [
            {
              "$ref": "#/$defs/Module"
            },
            {
              "type": "null"
            }
          ]
        },
        "moduleDetection": {
          "description": "Specify how TypeScript determine a file as module.\n\nSee more: https://www.typescriptlang.org/tsconfig/#moduleDetection",
          "anyOf": [
            {
              "$ref": "#/$defs/ModuleDetection"
            },
            {
              "type": "null"
            }
          ]
        },
        "moduleSuffixes": {
          "description": "Provides a way to override the default list of file name suffixes to search when resolving a module.\n\nSee more: https://www.typescriptlang.org/tsconfig/#moduleSuffixes",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "moduleResolution": {
          "description": "Log paths used during the `moduleResolution` process.\n\nSee more: https://www.typescriptlang.org/tsconfig#traceResolution",
          "anyOf": [
            {
              "$ref": "#/$defs/ModuleResolution"
            },
            {
              "type": "null"
            }
          ]
        },
        "newLine": {
          "description": "Set the newline character for emitting files.\n\nSee more: https://www.typescriptlang.org/tsconfig#newLine",
          "anyOf": [
            {
              "$ref": "#/$defs/NewLine"
            },
            {
              "type": "null"
            }
          ]
        },
        "noCheck": {
          "description": "Disable full type checking (only critical parse and emit errors will be reported).\n\nSee more: https://www.typescriptlang.org/tsconfig#noCheck",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noEmit": {
          "description": "Disable emitting file from a compilation.\n\nSee more: https://www.typescriptlang.org/tsconfig#noEmit",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noFallthroughCasesInSwitch": {
          "description": "Enable error reporting for fallthrough cases in switch statements.\n\nSee more: https://www.typescriptlang.org/tsconfig#noFallthroughCasesInSwitch",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noEmitHelpers": {
          "description": "Disable generating custom helper functions like `__extends` in compiled output.\n\nSee more: https://www.typescriptlang.org/tsconfig#noEmitHelpers",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noEmitOnError": {
          "description": "Disable emitting files if any type checking errors are reported.\n\nSee more: https://www.typescriptlang.org/tsconfig#noEmitOnError",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noErrorTruncation": {
          "description": "Disable truncating types in error messages.\n\nSee more: https://www.typescriptlang.org/tsconfig#noErrorTruncation",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noLib": {
          "description": "Disable including any library files, including the default lib.d.ts.\n\nSee more: https://www.typescriptlang.org/tsconfig#noLib",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noImplicitAny": {
          "description": "Enable error reporting for expressions and declarations with an implied `any` type.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitAny",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noImplicitOverride": {
          "description": "Ensure overriding members in derived classes are marked with an override modifier.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitOverride",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noImplicitReturns": {
          "description": "Enable error reporting for codepaths that do not explicitly return in a function.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitReturns",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noImplicitThis": {
          "description": "Enable error reporting when `this` is given the type `any`.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitThis",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noImplicitUseStrict": {
          "description": "Disable adding 'use strict' directives in emitted JavaScript files.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitUseStrict",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noPropertyAccessFromIndexSignature": {
          "description": "Enforces using indexed accessors for keys declared using an indexed type.\n\nSee more: https://www.typescriptlang.org/tsconfig#noPropertyAccessFromIndexSignature",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noResolve": {
          "description": "Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project.\n\nSee more: https://www.typescriptlang.org/tsconfig#noResolve",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noStrictGenericChecks": {
          "description": "Disable strict checking of generic signatures in function types.\n\nSee more: https://www.typescriptlang.org/tsconfig#noStrictGenericChecks",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noUncheckedIndexedAccess": {
          "description": "Add `undefined` to a type when accessed using an index.\n\nSee more: https://www.typescriptlang.org/tsconfig#noUncheckedIndexedAccess",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noUncheckedSideEffectImports": {
          "description": "Check side effect imports.\n\nSee more: https://www.typescriptlang.org/tsconfig#noUncheckedSideEffectImports",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noUnusedLocals": {
          "description": "Enable error reporting when a local variable isn't read.\n\nSee more: https://www.typescriptlang.org/tsconfig#noUnusedLocals",
          "type": [
            "boolean",
            "null"
          ]
        },
        "noUnusedParameters": {
          "description": "Raise an error when a function parameter isn't read.\n\nSee more: https://www.typescriptlang.org/tsconfig#noUnusedParameters",
          "type": [
            "boolean",
            "null"
          ]
        },
        "incremental": {
          "description": "Save .tsbuildinfo files to allow for incremental compilation of projects.\n\nSee more: https://www.typescriptlang.org/tsconfig#incremental",
          "type": [
            "boolean",
            "null"
          ]
        },
        "inlineSources": {
          "description": "Include source code in the sourcemaps inside the emitted JavaScript.\n\nSee more: https://www.typescriptlang.org/tsconfig#inlineSources",
          "type": [
            "boolean",
            "null"
          ]
        },
        "inlineSourceMap": {
          "description": "Include sourcemap files inside the emitted JavaScript.\n\nSee more: https://www.typescriptlang.org/tsconfig#inlineSourceMap",
          "type": [
            "boolean",
            "null"
          ]
        },
        "importHelpers": {
          "description": "Allow importing helper functions from tslib once per project, instead of including them per-file.\n\nSee more: https://www.typescriptlang.org/tsconfig#importHelpers",
          "type": [
            "boolean",
            "null"
          ]
        },
        "isolatedDeclarations": {
          "description": "Require sufficient annotation on exports so other tools can trivially generate declaration files.\n\nSee more: https://www.typescriptlang.org/tsconfig#isolatedDeclarations",
          "type": [
            "boolean",
            "null"
          ]
        },
        "isolatedModules": {
          "description": "Ensure that each file can be safely transpiled without relying on other imports.\n\nSee more: https://www.typescriptlang.org/tsconfig#isolatedModules",
          "type": [
            "boolean",
            "null"
          ]
        },
        "outDir": {
          "description": "Specify an output folder for all emitted files.\n\nSee more: https://www.typescriptlang.org/tsconfig#outDir",
          "type": [
            "string",
            "null"
          ]
        },
        "outFile": {
          "description": "Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output.\n\nSee more: https://www.typescriptlang.org/tsconfig#outFile",
          "type": [
            "string",
            "null"
          ]
        },
        "paths": {
          "description": "Specify a set of entries that re-map imports to additional lookup locations.\n\nSee more: https://www.typescriptlang.org/tsconfig/#paths",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        },
        "plugins": {
          "description": "Specify a list of language service plugins to include.\n\nSee more: https://www.typescriptlang.org/tsconfig#plugins",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/TsPlugin"
          }
        },
        "preserveConstEnums": {
          "description": "Disable erasing `const enum` declarations in generated code.\n\nSee more: https://www.typescriptlang.org/tsconfig#preserveConstEnums",
          "type": [
            "boolean",
            "null"
          ]
        },
        "preserveSymlinks": {
          "description": "Disable resolving symlinks to their realpath. This correlates to the same flag in node.\n\nSee more: https://www.typescriptlang.org/tsconfig#preserveSymlinks",
          "type": [
            "boolean",
            "null"
          ]
        },
        "preserveWatchOutput": {
          "description": "Disable wiping the console in watch mode.\n\nSee more: https://www.typescriptlang.org/tsconfig#preserveWatchOutput",
          "type": [
            "boolean",
            "null"
          ]
        },
        "pretty": {
          "description": "Enable color and formatting in output to make compiler errors easier to read.\n\nSee more: https://www.typescriptlang.org/tsconfig#pretty",
          "type": [
            "boolean",
            "null"
          ]
        },
        "reactNamespace": {
          "description": "Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit.\n\nSee more: https://www.typescriptlang.org/tsconfig#reactNamespace",
          "type": [
            "string",
            "null"
          ]
        },
        "removeComments": {
          "description": "Disable emitting comments.\n\nSee more: https://www.typescriptlang.org/tsconfig#removeComments",
          "type": [
            "boolean",
            "null"
          ]
        },
        "resolveJsonModule": {
          "description": "Enable importing .json files.\n\nSee more: https://www.typescriptlang.org/tsconfig#resolveJsonModule",
          "type": [
            "boolean",
            "null"
          ]
        },
        "rootDir": {
          "description": "Specify the root folder within your source files.\n\nSee more: https://www.typescriptlang.org/tsconfig#rootDir",
          "type": [
            "string",
            "null"
          ]
        },
        "rootDirs": {
          "description": "Specify the root folder within your source files.\n\nSee more: https://www.typescriptlang.org/tsconfig#rootDir",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "skipDefaultLibCheck": {
          "description": "Skip type checking .d.ts files that are included with TypeScript.\n\nSee more: https://www.typescriptlang.org/tsconfig#skipDefaultLibCheck",
          "type": [
            "boolean",
            "null"
          ]
        },
        "skipLibCheck": {
          "description": "Skip type checking all .d.ts files.\n\nSee more: https://www.typescriptlang.org/tsconfig#skipLibCheck",
          "type": [
            "boolean",
            "null"
          ]
        },
        "sourceMap": {
          "description": "Create source map files for emitted JavaScript files.\n\nSee more: https://www.typescriptlang.org/tsconfig#sourceMap",
          "type": [
            "boolean",
            "null"
          ]
        },
        "sourceRoot": {
          "description": "Specify the root path for debuggers to find the reference source code.\n\nSee more: https://www.typescriptlang.org/tsconfig#sourceRoot",
          "type": [
            "string",
            "null"
          ]
        },
        "strict": {
          "description": "Enable all strict type checking options.\n\nSee more: https://www.typescriptlang.org/tsconfig#strict",
          "type": [
            "boolean",
            "null"
          ]
        },
        "strictBindCallApply": {
          "description": "Check that the arguments for `bind`, `call`, and `apply` methods match the original function.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictBindCallApply",
          "type": [
            "boolean",
            "null"
          ]
        },
        "strictBuiltinIteratorReturn": {
          "description": "Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictBuiltinIteratorReturn",
          "type": [
            "boolean",
            "null"
          ]
        },
        "strictFunctionTypes": {
          "description": "When assigning functions, check to ensure parameters and the return values are subtype-compatible.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictFunctionTypes",
          "type": [
            "boolean",
            "null"
          ]
        },
        "strictNullChecks": {
          "description": "When type checking, take into account `null` and `undefined`.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictNullChecks",
          "type": [
            "boolean",
            "null"
          ]
        },
        "strictPropertyInitialization": {
          "description": "Check for class properties that are declared but not set in the constructor.\\n\\n\n\nSee more: https://www.typescriptlang.org/tsconfig#strictPropertyInitialization",
          "type": [
            "boolean",
            "null"
          ]
        },
        "stripInternal": {
          "description": "Disable emitting declarations that have `@internal` in their JSDoc comments.\n\nSee more: https://www.typescriptlang.org/tsconfig#stripInternal",
          "type": [
            "boolean",
            "null"
          ]
        },
        "suppressExcessPropertyErrors": {
          "description": "Disable reporting of excess property errors during the creation of object literals.\n\nSee more: https://www.typescriptlang.org/tsconfig#suppressExcessPropertyErrors",
          "type": [
            "boolean",
            "null"
          ]
        },
        "suppressImplicitAnyIndexErrors": {
          "description": "Suppress `noImplicitAny` errors when indexing objects that lack index signatures.\n\nSee more: https://www.typescriptlang.org/tsconfig#suppressImplicitAnyIndexErrors",
          "type": [
            "boolean",
            "null"
          ]
        },
        "target": {
          "description": "Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\n\nSee more: https://www.typescriptlang.org/tsconfig#target",
          "anyOf": [
            {
              "$ref": "#/$defs/Target"
            },
            {
              "type": "null"
            }
          ]
        },
        "traceResolution": {
          "description": "Log paths used during the `moduleResolution` process.\n\nSee more: https://www.typescriptlang.org/tsconfig#traceResolution",
          "type": [
            "boolean",
            "null"
          ]
        },
        "tsBuildInfoFile": {
          "description": "Specify the folder for .tsbuildinfo incremental compilation files.\n\nSee more: https://www.typescriptlang.org/tsconfig#tsBuildInfoFile",
          "type": [
            "string",
            "null"
          ]
        },
        "types": {
          "description": "Specify type package names to be included without being referenced in a source file.\n\nSee more: https://www.typescriptlang.org/tsconfig#types",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "typeRoots": {
          "description": "Specify multiple folders that act like `./node_modules/@types`.\n\nSee more: https://www.typescriptlang.org/tsconfig#typeRoots",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "resolvePackageJsonExports": {
          "description": "Use the package.json 'exports' field when resolving package imports.\n\nSee more: https://www.typescriptlang.org/tsconfig#resolvePackageJsonExports",
          "type": [
            "boolean",
            "null"
          ]
        },
        "resolvePackageJsonImports": {
          "description": "Use the package.json 'imports' field when resolving imports.\n\nSee more: https://www.typescriptlang.org/tsconfig#resolvePackageJsonImports",
          "type": [
            "boolean",
            "null"
          ]
        },
        "rewriteRelativeImportsExtensions": {
          "description": "Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files.\n\nSee more: https://www.typescriptlang.org/tsconfig#rewriteRelativeImportExtensions",
          "type": [
            "boolean",
            "null"
          ]
        },
        "useDefineForClassFields": {
          "description": "Emit ECMAScript-standard-compliant class fields.\n\nSee more: https://www.typescriptlang.org/tsconfig#useDefineForClassFields",
          "type": [
            "boolean",
            "null"
          ]
        },
        "useUnknownInCatchVariables": {
          "description": "Default catch clause variables as `unknown` instead of `any`.\n\nSee more: https://www.typescriptlang.org/tsconfig#useUnknownInCatchVariables",
          "type": [
            "boolean",
            "null"
          ]
        },
        "verbatimModuleSyntax": {
          "description": "Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting.\n\nSee more: https://www.typescriptlang.org/tsconfig#verbatimModuleSyntax",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "Jsx": {
      "description": "Specify what JSX code is generated. See more: https://www.typescriptlang.org/tsconfig/#jsx",
      "oneOf": [
        {
          "description": "Emit .js files with JSX changed to the equivalent React.createElement calls",
          "type": "string",
          "const": "react"
        },
        {
          "description": "Emit .js files with the JSX changed to _jsx calls optimized for production",
          "type": "string",
          "const": "react-jsx"
        },
        {
          "description": "Emit .js files with the JSX changed to _jsx calls for development only",
          "type": "string",
          "const": "react-jsxdev"
        },
        {
          "description": "Emit .js files with the JSX unchanged",
          "type": "string",
          "const": "react-native"
        },
        {
          "description": "Emit .jsx files with the JSX unchanged",
          "type": "string",
          "const": "preserve"
        }
      ]
    },
    "Lib": {
      "description": "Specify a set of bundled library declaration files that describe the target runtime environment. See more: https://www.typescriptlang.org/tsconfig#lib",
      "oneOf": [
        {
          "description": "Core definitions for all ES5 functionality",
          "type": "string",
          "const": "Es5"
        },
        {
          "description": "Additional APIs available in ES2015 (also known as ES6) - array.find, Promise, Proxy, Symbol, Map, Set, Reflect, etc.",
          "type": "string",
          "const": "Es2015"
        },
        {
          "description": "Additional APIs available in ES2016 - array.include, etc.",
          "type": "string",
          "const": "Es2016"
        },
        {
          "description": "Additional APIs available in ES2017 - Object.entries, Object.values, Atomics, SharedArrayBuffer, date.formatToParts, typed arrays, etc.",
          "type": "string",
          "const": "Es2017"
        },
        {
          "description": "Additional APIs available in ES2018 - async iterables, promise.finally, Intl.PluralRules, regexp.groups, etc.",
          "type": "string",
          "const": "Es2018"
        },
        {
          "description": "Additional APIs available in ES2019 - array.flat, array.flatMap, Object.fromEntries, string.trimStart, string.trimEnd, etc.",
          "type": "string",
          "const": "Es2019"
        },
        {
          "description": "Additional APIs available in ES2020 - string.matchAll, etc.",
          "type": "string",
          "const": "Es2020"
        },
        {
          "description": "Additional APIs available in ES2021 - promise.any, string.replaceAll etc.",
          "type": "string",
          "const": "Es2021"
        },
        {
          "description": "Additional APIs available in ES2022 - array.at, RegExp.hasIndices, etc.",
          "type": "string",
          "const": "Es2022"
        },
        {
          "description": "Additional APIs available in ES2023 - array.with, array.findLast, array.findLastIndex, array.toSorted, array.toReversed, etc.",
          "type": "string",
          "const": "Es2023"
        },
        {
          "description": "Additional APIs available in ESNext - This changes as the JavaScript specification evolves",
          "type": "string",
          "const": "EsNext"
        },
        {
          "description": "DOM definitions - window, document, etc.",
          "type": "string",
          "const": "Dom"
        },
        {
          "description": "APIs available in WebWorker contexts",
          "type": "string",
          "const": "WebWorker"
        },
        {
          "description": "APIs for the Windows Script Hosting System",
          "type": "string",
          "const": "ScriptHost"
        }
      ]
    },
    "Module": {
      "description": "Specify what module code is generated. See more: https://www.typescriptlang.org/tsconfig#module",
      "type": "string",
      "enum": [
        "None",
        "CommonJs",
        "Umd",
        "Amd",
        "System",
        "Es6",
        "Es2015",
        "Es2020",
        "Es2022",
        "EsNext",
        "Node16",
        "Node18",
        "Node20",
        "NodeNext",
        "Preserve"
      ]
    },
    "ModuleDetection": {
      "description": "Specify how TypeScript determine a file as module. See more: https://www.typescriptlang.org/tsconfig/#moduleDetection",
      "oneOf": [
        {
          "description": "TypeScript will not only look for import and export statements, but it will also check whether the \"type\" field in a package.json is set to \"module\" when running with module: nodenext or node16, and check whether the current file is a JSX file when running under jsx: react-jsx",
          "type": "string",
          "const": "auto"
        },
        {
          "description": "The same behavior as 4.6 and prior, usings import and export statements to determine whether a file is a module.",
          "type": "string",
          "const": "legacy"
        },
        {
          "description": "Ensures that every non-declaration file is treated as a module.",
          "type": "string",
          "const": "force"
        }
      ]
    },
    "ModuleResolution": {
      "oneOf": [
        {
          "description": "When combined with the corresponding module values, picks the right algorithm for each resolution based on whether Node.js will see an import or require in the output JavaScript code",
          "type": "string",
          "const": "node16"
        },
        {
          "description": "When combined with the corresponding module values, picks the right algorithm for each resolution based on whether Node.js will see an import or require in the output JavaScript code",
          "type": "string",
          "const": "node20"
        },
        {
          "description": "When combined with the corresponding module values, picks the right algorithm for each resolution based on whether Node.js will see an import or require in the output JavaScript code",
          "type": "string",
          "const": "nodenext"
        },
        {
          "description": "For use with bundlers. Like node16 and nodenext, this mode supports package.json \"imports\" and \"exports\", but unlike the Node.js resolution modes, bundler never requires file extensions on relative paths in imports.",
          "type": "string",
          "const": "bundler"
        }
      ]
    },
    "NewLine": {
      "description": "Set the newline character for emitting files. See more: https://www.typescriptlang.org/tsconfig#newLine",
      "type": "string",
      "enum": [
        "lf",
        "crlf"
      ]
    },
    "TsPlugin": {
      "description": "A Typescript plugin definition.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": true
    },
    "Target": {
      "description": "Set the JavaScript language version for emitted JavaScript and include compatible library declarations. See more: https://www.typescriptlang.org/tsconfig#target",
      "type": "string",
      "enum": [
        "Es3",
        "Es5",
        "Es6",
        "Es7",
        "Es2015",
        "Es2016",
        "Es2017",
        "Es2018",
        "Es2019",
        "Es2020",
        "EsNext"
      ]
    },
    "OxlintPreset": {
      "description": "A preset for `.oxlintrc.json`",
      "type": "object",
      "properties": {
        "extends_presets": {
          "description": "The list of extended presets.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "default": []
        },
        "extends": {
          "description": "Paths of configuration files that this configuration file extends (inherits from). The files are resolved relative to the location of the configuration file that contains the `extends` property. The configuration files are merged from the first to the last, with the last file overriding the previous ones.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "plugins": {
          "description": "A list of plugins to enable for this config.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Plugin"
          },
          "default": [
            "oxc",
            "typescript",
            "unicorn"
          ]
        },
        "settings": {
          "description": "Contains the settings for various plugins.",
          "anyOf": [
            {
              "$ref": "#/$defs/PluginsSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "globals": {
          "description": "Enables or disables specific global variables.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/GlobalValue"
          }
        },
        "env": {
          "description": "Environments enable and disable collections of global variables.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "categories": {
          "description": "Configure an entire category of rules all at once.\n\nRules enabled or disabled this way will be overwritten by individual rules in the rules field.\n\nSee more: https://oxc.rs/docs/guide/usage/linter/config-file-reference#categories",
          "anyOf": [
            {
              "$ref": "#/$defs/Categories"
            },
            {
              "type": "null"
            }
          ]
        },
        "ignorePatterns": {
          "description": "Globs to ignore during linting. These are resolved from the configuration file path.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "rules": {
          "description": "Settings for individual rules. See [Oxlint Rules](https://oxc.rs/docs/guide/usage/linter/rules.html) for the list of rules.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/RuleSetting"
          }
        },
        "overrides": {
          "description": "Add, remove, or otherwise reconfigure rules for specific files or groups of files.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/Override"
          }
        },
        "extras": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": true
        }
      }
    },
    "Plugin": {
      "description": "Ways of referring to a plugin.",
      "anyOf": [
        {
          "$ref": "#/$defs/Plugins"
        },
        {
          "type": "string"
        }
      ]
    },
    "Plugins": {
      "description": "The plugins for oxlint. See more: https://oxc.rs/docs/guide/usage/linter/plugins.html",
      "type": "string",
      "enum": [
        "eslint",
        "import",
        "jest",
        "jsdoc",
        "jsx-a11y",
        "nextjs",
        "node",
        "oxc",
        "promise",
        "react",
        "react-perf",
        "regex",
        "typescript",
        "unicorn",
        "vitest",
        "vue"
      ]
    },
    "PluginsSettings": {
      "description": "Configure the behavior of linter plugins.",
      "type": "object",
      "properties": {
        "jsdoc": {
          "description": "Settings for the Jsdoc plugin.",
          "anyOf": [
            {
              "$ref": "#/$defs/JsDocPluginSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "jsx-a11y": {
          "description": "Settings for the jsx-a11y plugin.",
          "anyOf": [
            {
              "$ref": "#/$defs/JsxA11yPluginSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "next": {
          "description": "Settings for the nextjs plugin.",
          "anyOf": [
            {
              "$ref": "#/$defs/NextPluginSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "react": {
          "description": "Settings for the react plugin.",
          "anyOf": [
            {
              "$ref": "#/$defs/ReactPluginSettings"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "JsDocPluginSettings": {
      "description": "Settings for the Jsdoc plugin. See more: https://oxc.rs/docs/guide/usage/linter/config-file-reference.html#settings-jsdoc",
      "type": "object",
      "properties": {
        "augmentsExtendsReplacesDocs": {
          "description": "Only for `require-(yields|returns|description|example|param|throws)` rules.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "exemptDestructuredRootsFromChekcs": {
          "description": "Only for `require-param-type` and `require-param-description` rule.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignoreInternal": {
          "description": "For all rules but NOT apply to `empty-tags` rule.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignorePrivate": {
          "description": "For all rules but NOT apply to `check-access` and `empty-tags` rule.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignoreReplacesDocs": {
          "description": "Only for `require-(yields|returns|description|example|param|throws)` rules.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "implementsReplacesDocs": {
          "description": "Only for `require-(yields|returns|description|example|param|throws)` rules.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "overrideReplacesDocs": {
          "description": "Only for `require-(yields|returns|description|example|param|throws)` rules.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "tagNamePreference": {
          "description": "Specifies allows custom tags for Jsdoc annotations.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/TagNamePreference"
          }
        }
      }
    },
    "TagNamePreference": {
      "description": "Specifies allows custom tags for Jsdoc annotations.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "replacement": {
              "type": "string"
            }
          },
          "required": [
            "message",
            "replacement"
          ]
        },
        {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        {
          "type": "boolean"
        }
      ]
    },
    "JsxA11yPluginSettings": {
      "description": "Settings for the jsx-a11y plugin. See more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y#configurations",
      "type": "object",
      "properties": {
        "attributes": {
          "description": "Map of attribute names to their DOM equivalents.This is useful for non-React frameworks that use different attribute names.\n\nExample:\n```json\n{\n  \"settings\\\":\n  {\n    \"jsx-a11y\":\n    {\n      \"attributes\": {\n        \"for\": [\n          \"htmlFor\",\n          \"for\"\n        ]\n      }\n    }\n  }\n}\n```",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        },
        "components": {
          "description": "To have your custom components be checked as DOM elements, you can\\nprovide a mapping of your component names to the DOM element name.\n\nExample:\n```json\n{\n  \"settings\": {\n    \"jsx-a11y\": {\n      \"components\": {\n        \"Link\": \"a\",\n        \"IconButton\": \"button\"\n      }\n    }\n  }\n}\n```",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "polymorphicPropName": {
          "description": "An optional setting that define the prop your code uses to create polymorphic components.\nThis setting will be used to determine the element type in rules that\nrequire semantic context.\n\nFor example, if you set the `polymorphicPropName` to `as`, then this element:\n\n```jsx\n<Box as=\"h3\">Hello</Box>\n```\n\nWill be treated as an `h3`. If not set, this component will be treated\nas a `Box`.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "NextPluginSettings": {
      "description": "Settings for the nextjs plugin. See more: https://oxc.rs/docs/guide/usage/linter/config-file-reference.html#settings-next",
      "type": "object",
      "properties": {
        "rootDir": {
          "description": "The root directory of the Next.js project.\n\nThis is particularly useful when you have a monorepo and your Next.js\nproject is in a subfolder.\n\nExample:\n\n```json\n{\n  \"settings\": {\n    \"next\": {\n      \"rootDir\": \"apps/dashboard/\"\n    }\n  }\n}\n```",
          "anyOf": [
            {
              "$ref": "#/$defs/OneOrManyStrings"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "OneOrManyStrings": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "ReactPluginSettings": {
      "description": "Settings for the react plugin. See more: https://oxc.rs/docs/guide/usage/linter/config-file-reference.html#settings-react",
      "type": "object",
      "properties": {
        "formComponents": {
          "description": "Components used as alternatives to `<form>` for forms, such as `<Formik>`.\n\nExample:\n\n```jsonc\n{\n  \"settings\": {\n    \"react\": {\n      \"formComponents\": [\n        \"CustomForm\",\n        // OtherForm is considered a form component and has an endpoint attribute\n        { \"name\": \"OtherForm\", \"formAttribute\": \"endpoint\" },\n        // allows specifying multiple properties if necessary\n        { \"name\": \"Form\", \"formAttribute\": [\"registerEndpoint\", \"loginEndpoint\"] }\n      ]\n    }\n  }\n}\n```",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/CustomComponent"
          }
        },
        "linkComponents": {
          "description": "Components used as alternatives to `<a>` for linking, such as `<Link>`.\n\nExample:\n\n```jsonc\n{\n  \"settings\": {\n    \"react\": {\n      \"linkComponents\": [\n        \"HyperLink\",\n        // Use `linkAttribute` for components that use a different prop name\n        // than `href`.\n        { \"name\": \"MyLink\", \"linkAttribute\": \"to\" },\n        // allows specifying multiple properties if necessary\n        { \"name\": \"Link\", \"linkAttribute\": [\"to\", \"href\"] }\n      ]\n    }\n  }\n}\n```",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/CustomComponent"
          }
        }
      }
    },
    "CustomComponent": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "attribute": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "attribute"
          ]
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "attributes": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "name",
            "attributes"
          ]
        }
      ]
    },
    "GlobalValue": {
      "description": "Settings for global variables.",
      "oneOf": [
        {
          "description": "Disallows overwriting a global variable.",
          "type": "string",
          "const": "readonly"
        },
        {
          "description": "Allows the global variable to be overwritten.",
          "type": "string",
          "const": "writeable"
        },
        {
          "description": "Disables a global variable entirely.",
          "type": "string",
          "const": "off"
        }
      ]
    },
    "Categories": {
      "description": "Configure an entire category of rules all at once.Rules enabled or disabled this way will be overwritten by individual rules in the `rules` field.",
      "type": "object",
      "properties": {
        "correctness": {
          "anyOf": [
            {
              "$ref": "#/$defs/RuleEnforcement"
            },
            {
              "type": "null"
            }
          ]
        },
        "nursery": {
          "anyOf": [
            {
              "$ref": "#/$defs/RuleEnforcement"
            },
            {
              "type": "null"
            }
          ]
        },
        "pedantic": {
          "anyOf": [
            {
              "$ref": "#/$defs/RuleEnforcement"
            },
            {
              "type": "null"
            }
          ]
        },
        "perf": {
          "anyOf": [
            {
              "$ref": "#/$defs/RuleEnforcement"
            },
            {
              "type": "null"
            }
          ]
        },
        "restriction": {
          "anyOf": [
            {
              "$ref": "#/$defs/RuleEnforcement"
            },
            {
              "type": "null"
            }
          ]
        },
        "style": {
          "anyOf": [
            {
              "$ref": "#/$defs/RuleEnforcement"
            },
            {
              "type": "null"
            }
          ]
        },
        "suspicious": {
          "anyOf": [
            {
              "$ref": "#/$defs/RuleEnforcement"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "RuleEnforcement": {
      "description": "The enforcement setting for a linting rule.",
      "oneOf": [
        {
          "description": "Disables the rule.",
          "type": "string",
          "const": "off"
        },
        {
          "description": "Violating the rule triggers a warning.",
          "type": "string",
          "const": "warn"
        },
        {
          "description": "Violating the rule causes an error.",
          "type": "string",
          "const": "error"
        }
      ]
    },
    "RuleSetting": {
      "description": "The settings for an individual rule. Can be a single value such as `warn` or `error`, or an array with the rule enforcement value as the first value, and the rule-specific settings in an object right after that. (example: [\"allow\", { \"setting1\": true }])",
      "anyOf": [
        {
          "$ref": "#/$defs/RuleEnforcement"
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "prefixItems": [
              {
                "$ref": "#/$defs/RuleEnforcement"
              },
              {
                "type": "object",
                "additionalProperties": true
              }
            ],
            "minItems": 2,
            "maxItems": 2
          },
          "minItems": 1,
          "maxItems": 1
        }
      ]
    },
    "Override": {
      "description": "Settings to override for a group of files.",
      "type": "object",
      "properties": {
        "files": {
          "description": "A list of glob patterns to override.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "default": []
        },
        "plugins": {
          "description": "Optionally change what plugins are enabled for this override. When omitted, the base config's plugins are used.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Plugin"
          }
        },
        "globals": {
          "description": "Enables or disables specific global variables.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/GlobalValue"
          }
        },
        "env": {
          "description": "Environments enable and disable collections of global variables.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "rules": {
          "description": "Override settings for specific rules.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/RuleSetting"
          }
        }
      }
    },
    "PackageConfig": {
      "description": "The configuration struct that is used to generate new packages.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the new package. It defaults to the name of its directory.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "ts_config": {
          "description": "A list of [`TsConfigDirective`]s for this package. They can be preset ids or literal configurations.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/TsConfigDirective"
          },
          "default": null
        },
        "package_json": {
          "description": "The [`PackageJsonData`] to use for this package. It can be a preset id or a literal definition (or nothing, to use defaults).",
          "anyOf": [
            {
              "$ref": "#/$defs/PackageJsonData"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "with_templates": {
          "description": "One or many templates to generate along with this package. Relative output paths will resolve from the root of the package.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/TemplatingPresetReference"
          },
          "default": null
        },
        "vitest": {
          "description": "The configuration for this package's vitest setup. It can be set to `true` (to use defaults), to a preset id, or to a literal configuration.",
          "anyOf": [
            {
              "$ref": "#/$defs/VitestConfigKind"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "oxlint": {
          "description": "The configuration for this package's oxlint setup. It can be set to `true` (to use defaults), to a preset id, or to a literal configuration.",
          "anyOf": [
            {
              "$ref": "#/$defs/OxlintConfigSetting"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      }
    },
    "TsConfigDirective": {
      "description": "A struct representing instructions for generating a tsconfig file.\nIf the output path is relative, it will be joined to the root path of its package.",
      "type": "object",
      "properties": {
        "output": {
          "description": "The output path of the config file [default: `tsconfig.json`]",
          "type": [
            "string",
            "null"
          ]
        },
        "config": {
          "description": "The configuration for the output file. It can be a preset id or a new definition.",
          "anyOf": [
            {
              "$ref": "#/$defs/TsConfigKind"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "TsConfigKind": {
      "description": "The kind of data for a [`TsConfig`]. It can be a string indicating a preset it, or a full configuration.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/TsConfigPreset"
        }
      ]
    },
    "PackageJsonData": {
      "description": "Ways of indicating [`PackageJson`] data. It can be an id, pointing to a preset, or a literal configuration.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/PackageJsonPreset"
        }
      ]
    },
    "TemplatingPresetReference": {
      "description": "A reference to a templating preset, or a new preset definition.",
      "anyOf": [
        {
          "description": "A reference to a templating preset, with some optional context",
          "type": "object",
          "properties": {
            "id": {
              "description": "The id of the preset to select.",
              "type": "string"
            },
            "context": {
              "description": "Additional context for the templates in this preset. It overrides previously set values, but not values set via the cli.",
              "type": "object",
              "additionalProperties": true,
              "default": {}
            }
          },
          "required": [
            "id"
          ]
        },
        {
          "description": "The definition for a new templating preset.",
          "$ref": "#/$defs/TemplatingPreset"
        }
      ]
    },
    "TemplatingPreset": {
      "description": "A templating preset. It stores information about one or many templates, such as their source, output paths and contextual variables.",
      "type": "object",
      "properties": {
        "extends_presets": {
          "description": "The list of extended preset IDs.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "default": []
        },
        "templates": {
          "description": "The list of templates for this preset. Each element can be an individual template or a path to a directory inside `templates_dir` to render all the templates inside of it.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/PresetElement"
          },
          "default": []
        },
        "context": {
          "description": "Additional context for the templates in this preset. It overrides previously set values, but not values set via the cli.",
          "type": "object",
          "additionalProperties": true,
          "default": {}
        }
      }
    },
    "PresetElement": {
      "anyOf": [
        {
          "description": "The data for a single template.",
          "$ref": "#/$defs/TemplateOutput"
        },
        {
          "description": "A path to a directory inside `templates_dir`, where all templates will be recursively extracted and rendered in the output directory, following the same file tree structure.",
          "$ref": "#/$defs/StructuredPreset"
        }
      ]
    },
    "TemplateOutput": {
      "description": "The data for outputting a new template.\nThe context specified here will override the global context (but not the variables set via cli).",
      "type": "object",
      "properties": {
        "template": {
          "description": "The definition or id for the template to use.",
          "$ref": "#/$defs/TemplateData"
        },
        "output": {
          "description": "The output path for the generated file.",
          "$ref": "#/$defs/TemplateOutputKind"
        },
        "context": {
          "description": "Additional context for the templates in this preset. It overrides previously set values, but not values set via the cli.",
          "type": "object",
          "additionalProperties": true,
          "default": {}
        }
      },
      "required": [
        "template",
        "output"
      ]
    },
    "TemplateData": {
      "description": "The types of configuration values for a template's data.\nIt can either be an id (which points to the key used to store a literal template in the config, or to a file path starting from the root of the templates directory specified in the config.)",
      "anyOf": [
        {
          "description": "A literal definition for a template.",
          "type": "object",
          "properties": {
            "name": {
              "description": "The id of the newly created template.",
              "type": "string"
            },
            "content": {
              "description": "The content of the new template.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "content"
          ]
        },
        {
          "description": "An id pointing to a template defined in a configuration file or inside `templates_dir`.",
          "type": "string"
        }
      ]
    },
    "TemplateOutputKind": {
      "anyOf": [
        {
          "description": "Render the output to a file",
          "type": "string"
        }
      ]
    },
    "StructuredPreset": {
      "description": "A structured preset. It points to a directory within `templates_dir`, and optionally adds additional context. All of the templates inside the specified directory will be recursively rendered in the destination directory, with the same exact directory structure and names. If a template file ends with a `jinja` extension such as `.j2`, that gets stripped automatically.",
      "type": "object",
      "properties": {
        "dir": {
          "description": "A relative path to a directory starting from `templates_dir`",
          "type": "string"
        },
        "exclude": {
          "description": "A list of glob patterns for the templates to exclude",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "dir"
      ]
    },
    "VitestConfigKind": {
      "description": "The types of configuration for generating a vitest setup.\nCan be set to:\n- True or false to use the default or disable generation altogether.\n- A string, indicating a preset stored in the global config\n- A object, with a literal definition",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/VitestConfig"
        }
      ]
    },
    "VitestConfig": {
      "description": "The data used to generate a new vitest setup.",
      "type": "object",
      "properties": {
        "tests_dir": {
          "description": "The path to the tests directory, from the root of the package. [default: 'tests']",
          "type": "string",
          "default": "tests"
        },
        "out_dir": {
          "description": "The directory where the config file should be placed, starting from the root of the package.\nIf unset, the `tests_dir` will be used.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "setup_dir": {
          "description": "The path to the setup directory, starting from the `tests_dir`. [default: 'setup']",
          "type": "string",
          "default": "setup"
        },
        "setup_files": {
          "description": "A list of setup files. The paths will be joined to the `setup_dir`.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "environment": {
          "description": "The environment that will be used for testing. See more: https://vitest.dev/config/#environment",
          "$ref": "#/$defs/Environment",
          "default": "node"
        },
        "globals": {
          "description": "By default, vitest does not provide global APIs for explicitness. If you prefer to use the APIs globally like Jest, you can pass the --globals option to CLI or add globals: true in the config. See more: https://vitest.dev/config/#globals",
          "type": "boolean",
          "default": true
        },
        "silent": {
          "description": "Silent console output from tests.\nUse 'passed-only' to see logs from failing tests only. Logs from failing tests are printed after a test has finished.",
          "$ref": "#/$defs/Silent",
          "default": "passed-only"
        }
      }
    },
    "Environment": {
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "node",
            "jsdom",
            "happy-dom",
            "edge-runtime"
          ]
        },
        {
          "type": "string"
        }
      ]
    },
    "Silent": {
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "passed-only"
          ]
        },
        {
          "type": "boolean"
        }
      ]
    },
    "OxlintConfigSetting": {
      "description": "Settings for generating an `oxlint` configuration file.\nIt can be set to true/false (to use defaults or to disable it entirely) or to a literal configuration.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/OxlintPreset"
        }
      ]
    },
    "PnpmPreset": {
      "description": "A preset for a `pnpm-workspace.yaml` file configuration.",
      "type": "object",
      "properties": {
        "extends_presets": {
          "description": "The list of extended presets.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "default": []
        },
        "packages": {
          "description": "Glob patterns for the directories containing the packages for this workspace.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "cleanupUnusedCatalogs": {
          "description": "When set to true, pnpm will remove unused catalog entries during installation.\n\nSee more: https://pnpm.io/settings#cleanupunusedcatalogs",
          "type": [
            "boolean",
            "null"
          ]
        },
        "catalog": {
          "description": "The dependencies to store in the unnamed (default) catalog.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "catalogs": {
          "description": "A map of named catalogs and the dependencies listed in them.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "onlyBuiltDependencies": {
          "description": "A list of package names that are allowed to be executed during installation. Only packages listed in this array will be able to run install scripts. If onlyBuiltDependenciesFile and neverBuiltDependencies are not set, this configuration option will default to blocking all install scripts.\n\nSee more: https://pnpm.io/settings#onlybuiltdependencies",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "onlyBuiltDependenciesFile": {
          "description": "Specifies a JSON file that lists the only packages permitted to run installation scripts during the pnpm install process.\n\nSee more: https://pnpm.io/settings#onlybuiltdependenciesfile",
          "type": [
            "string",
            "null"
          ]
        },
        "neverBuiltDependencies": {
          "description": "A list of dependencies to run builds for. See more: https://pnpm.io/settings#neverbuiltdependencies",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "ignoredBuiltDependencies": {
          "description": "A list of package names that should not be built during installation.\n\nSee more: https://pnpm.io/settings#ignoredbuiltdependencies",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "dangerouslyAllowAllBuilds": {
          "description": "If set to true, all build scripts (e.g. preinstall, install, postinstall) from dependencies will run automatically, without requiring approval.\n\nSee more: https://pnpm.io/settings#dangerouslyallowallbuilds",
          "type": [
            "boolean",
            "null"
          ]
        },
        "overrides": {
          "description": "This field allows you to instruct pnpm to override any dependency in the dependency graph. This is useful for enforcing all your packages to use a single version of a dependency, backporting a fix, replacing a dependency with a fork, or removing an unused dependency.\n\nSee more: https://pnpm.io/settings#overrides",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "updateConfig": {
          "description": "Configuration for package updates.\n\nSee more: https://pnpm.io/settings#updateconfig",
          "anyOf": [
            {
              "$ref": "#/$defs/UpdateConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "minimumReleaseAge": {
          "description": "It specifies the number of minutes that must pass after a version is published before pnpm will install it. For example, setting `minimumReleaseAge: 1440` ensures that only packages released at least one day ago can be installed.\n\nSee more: https://pnpm.io/settings#minimumreleaseage",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "minimumReleaseAgeExclude": {
          "description": "If you set `minimumReleaseAge` but need to disable this restriction for certain dependencies, you can list them under the `minimumReleaseAgeExclude` setting.\n\nSee more: https://pnpm.io/settings#minimumreleaseageexclude",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "packageExtensions": {
          "description": "The packageExtensions fields offer a way to extend the existing package definitions with additional information. For example, if react-redux should have react-dom in its peerDependencies but it has not, it is possible to patch react-redux using packageExtensions.\n\nSee more: https://pnpm.io/settings#packageextensions",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/PackageExtension"
          }
        },
        "peerDependencyRules": {
          "description": "Rules for peer dependencies.\n\nSee more: https://pnpm.io/settings#peerdependencyrules",
          "anyOf": [
            {
              "$ref": "#/$defs/PeerDependencyRules"
            },
            {
              "type": "null"
            }
          ]
        },
        "allowedDeprecatedVersions": {
          "description": "A list of deprecated versions that the warnings are suppressed.\n\nSee more: https://pnpm.io/settings#alloweddeprecatedversions",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "patchedDependencies": {
          "description": "A list of dependencies that are patched.\n\nSee more: https://pnpm.io/settings#patcheddependencies",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "allowUnusedPatches": {
          "description": "When true, installation won't fail if some of the patches from the `patchedDependencies` field were not applied. Previously named `allowNonAppliedPatches`.\n\nSee more: https://pnpm.io/settings#allowunusedpatches",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignorePatchFailures": {
          "description": "Default is undefined. Errors out when a patch with an exact version or version range fails. Ignores failures from name-only patches. When true, prints a warning instead of failing when any patch cannot be applied. When false, errors out for any patch failure.\n\nSee more: https://pnpm.io/settings#ignorepatchfailures",
          "type": [
            "boolean",
            "null"
          ]
        },
        "configDependencies": {
          "description": "Config dependencies allow you to share and centralize configuration files, settings, and hooks across multiple projects. They are installed before all regular dependencies ('dependencies', 'devDependencies', 'optionalDependencies'), making them ideal for setting up custom hooks, patches, and catalog entries.\n\nSee more: https://pnpm.io/config-dependencies",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "auditConfig": {
          "description": "Settings for the `pnpm audit` command.\n\nSee more: https://pnpm.io/settings#auditconfig",
          "anyOf": [
            {
              "$ref": "#/$defs/AuditConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "requiredScripts": {
          "description": "Scripts listed in this array will be required in each project of the workspace. Otherwise, pnpm -r run <script name> will fail.\n\nSee more: https://pnpm.io/settings#requiredscripts",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "supportedArchitectures": {
          "description": "Specifies architectures for which you'd like to install optional dependencies, even if they don't match the architecture of the system running the install.\n\nSee more: https://pnpm.io/settings#supportedarchitectures",
          "anyOf": [
            {
              "$ref": "#/$defs/SupportedArchitectures"
            },
            {
              "type": "null"
            }
          ]
        },
        "ignoredOptionalDependencies": {
          "description": "A list of optional dependencies that the install should be skipped.\n\nSee more: https://pnpm.io/settings#ignoredoptionaldependencies",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "executionEnv": {
          "description": "Instructions for the runtime, such as the node version to use.\n\nSee more: https://pnpm.io/settings#executionenvnodeversion",
          "anyOf": [
            {
              "$ref": "#/$defs/ExecutionEnv"
            },
            {
              "type": "null"
            }
          ]
        },
        "hoist": {
          "description": "When true, all dependencies are hoisted to node_modules/.pnpm/node_modules.\n\nSee more: https://pnpm.io/settings#hoist",
          "type": [
            "boolean",
            "null"
          ]
        },
        "hoistWorkspacePackages": {
          "description": "When true, packages from the workspaces are symlinked to either <workspace_root>/node_modules/.pnpm/node_modules or to <workspace_root>/node_modules depending on other hoisting settings (hoistPattern and publicHoistPattern).\n\nSee more: https://pnpm.io/settings#hoistworkspacepackages",
          "type": [
            "boolean",
            "null"
          ]
        },
        "hoistPattern": {
          "description": "Tells pnpm which packages should be hoisted to node_modules/.pnpm/node_modules.\n\nSee more: https://pnpm.io/settings#hoistpattern",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "publicHoistPattern": {
          "description": "Unlike hoistPattern, which hoists dependencies to a hidden modules directory inside the virtual store, publicHoistPattern hoists dependencies matching the pattern to the root modules directory.\n\nSee more: https://pnpm.io/settings#publichoistpattern",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "shamefullyHoist": {
          "description": "By default, pnpm creates a semistrict node_modules, meaning dependencies have access to undeclared dependencies but modules outside of node_modules do not.\n\nSee more: https://pnpm.io/settings#shamefullyhoist",
          "type": [
            "boolean",
            "null"
          ]
        },
        "modulesDir": {
          "description": "The directory in which dependencies will be installed (instead of node_modules).\n\nSee more: https://pnpm.io/settings#modulesdir",
          "type": [
            "string",
            "null"
          ]
        },
        "nodeLinker": {
          "description": "Defines what linker should be used for installing Node packages.\n\nSee more: https://pnpm.io/settings#nodelinker",
          "anyOf": [
            {
              "$ref": "#/$defs/NodeLinker"
            },
            {
              "type": "null"
            }
          ]
        },
        "symlink": {
          "description": "When symlink is set to false, pnpm creates a virtual store directory without any symlinks. It is a useful setting together with nodeLinker=pnp.\n\nSee more: https://pnpm.io/settings#symlink",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enableModulesDir": {
          "description": "When false, pnpm will not write any files to the modules directory (node_modules).\n\nSee more: https://pnpm.io/settings#enablemodulesdir",
          "type": [
            "boolean",
            "null"
          ]
        },
        "virtualStoreDir": {
          "description": "The directory with links to the store.\n\nSee more: https://pnpm.io/settings#virtualstoredir",
          "type": [
            "string",
            "null"
          ]
        },
        "virtualStoreDirMaxLength": {
          "description": "Sets the maximum allowed length of directory names inside the virtual store directory (node_modules/.pnpm).\n\nSee more: https://pnpm.io/settings#virtualstoredirmaxlength",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "packageImportMethod": {
          "description": "Controls the way packages are imported from the store (if you want to disable symlinks inside node_modules, then you need to change the nodeLinker setting, not this one).\n\nSee more: https://pnpm.io/settings#packageimportmethod",
          "anyOf": [
            {
              "$ref": "#/$defs/PackageImportMethod"
            },
            {
              "type": "null"
            }
          ]
        },
        "modulesCacheMaxAge": {
          "description": "The time in minutes after which orphan packages from the modules directory should be removed.\n\nSee more: https://pnpm.io/settings#modulescachemaxage",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "dlxCacheMaxAge": {
          "description": "The time in minutes after which dlx cache expires.\n\nSee more: https://pnpm.io/settings#dlxcachemaxage",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "storeDir": {
          "description": "The location where all the packages are saved on the disk.\n\nSee more: https://pnpm.io/settings#storedir",
          "type": [
            "string",
            "null"
          ]
        },
        "verifyStoreIntegrity": {
          "description": "By default, if a file in the store has been modified, the content of this file is checked before linking it to a project's node_modules.\n\nSee more: https://pnpm.io/settings#verifystoreintegrity",
          "type": [
            "boolean",
            "null"
          ]
        },
        "strictStorePkgContentCheck": {
          "description": "Some registries allow the exact same content to be published under different package names and/or versions.\n\nSee more: https://pnpm.io/settings#strictstorepkgcontentcheck",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enableGlobalVirtualStore": {
          "description": "When enabled, node_modules contains only symlinks to a central virtual store, rather than to node_modules/.pnpm.\n\nSee more: https://pnpm.io/settings#enableglobalvirtualstore",
          "type": [
            "boolean",
            "null"
          ]
        },
        "lockfile": {
          "description": "When set to false, pnpm won't read or generate a pnpm-lock.yaml file.\n\nSee more: https://pnpm.io/settings#lockfile",
          "type": [
            "boolean",
            "null"
          ]
        },
        "preferFrozenLockfile": {
          "description": "When set to true and the available pnpm-lock.yaml satisfies the package.json dependencies directive, a headless installation is performed.\n\nSee more: https://pnpm.io/settings#preferfrozenlockfile",
          "type": [
            "boolean",
            "null"
          ]
        },
        "lockfileIncludeTarballUrl": {
          "description": "Add the full URL to the package's tarball to every entry in pnpm-lock.yaml.\n\nSee more: https://pnpm.io/settings#lockfileincludetarballurl",
          "type": [
            "boolean",
            "null"
          ]
        },
        "gitBranchLockfile": {
          "description": "When set to true, the generated lockfile name after installation will be named based on the current branch name to completely avoid merge conflicts.\n\nSee more: https://pnpm.io/settings#gitbranchlockfile",
          "type": [
            "boolean",
            "null"
          ]
        },
        "mergeGitBranchLockfilesBranchPattern": {
          "description": "This configuration matches the current branch name to determine whether to merge all git branch lockfile files.\n\nSee more: https://pnpm.io/settings#mergegitbranchlockfilesbranchpattern",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "peersSuffixMaxLength": {
          "description": "Max length of the peer IDs suffix added to dependency keys in the lockfile. If the suffix is longer, it is replaced with a hash.\n\nSee more: https://pnpm.io/settings#peerssuffixmaxlength",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "registry": {
          "description": "The base URL of the npm package registry (trailing slash included).\n\nSee more: https://pnpm.io/settings#registry",
          "type": [
            "string",
            "null"
          ]
        },
        "ca": {
          "description": "The Certificate Authority signing certificate that is trusted for SSL connections to the registry.\n\nSee more: https://pnpm.io/settings#ca",
          "type": [
            "string",
            "null"
          ]
        },
        "cafile": {
          "description": "A path to a file containing one or multiple Certificate Authority signing certificates.\n\nSee more: https://pnpm.io/settings#cafile",
          "type": [
            "string",
            "null"
          ]
        },
        "cert": {
          "description": "A client certificate to pass when accessing the registry.\n\nSee more: https://pnpm.io/settings#cert",
          "type": [
            "string",
            "null"
          ]
        },
        "key": {
          "description": "A client key to pass when accessing the registry.\n\nSee more: https://pnpm.io/settings#key",
          "type": [
            "string",
            "null"
          ]
        },
        "gitShallowHosts": {
          "description": "When fetching dependencies that are Git repositories, if the host is listed in this setting, pnpm will use shallow cloning to fetch only the needed commit, not all the history.\n\nSee more: https://pnpm.io/settings#gitshallowhosts",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "httpsProxy": {
          "description": "A proxy to use for outgoing HTTPS requests. If the HTTPS_PROXY, https_proxy, HTTP_PROXY or http_proxy environment variables are set, their values will be used instead.\n\nSee more: https://pnpm.io/settings#https-proxy",
          "type": [
            "string",
            "null"
          ]
        },
        "proxy": {
          "description": "A proxy to use for outgoing http requests. If the HTTP_PROXY or http_proxy environment variables are set, proxy settings will be honored by the underlying request library.\n\nSee more: https://pnpm.io/settings#proxy",
          "type": [
            "string",
            "null"
          ]
        },
        "localAddress": {
          "description": "The IP address of the local interface to use when making connections to the npm registry.\n\nSee more: https://pnpm.io/settings#local-address",
          "type": [
            "string",
            "null"
          ]
        },
        "maxsockets": {
          "description": "The maximum number of connections to use per origin (protocol/host/port combination).\n\nSee more: https://pnpm.io/settings#maxsockets",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "noproxy": {
          "description": "A comma-separated string of domain extensions that a proxy should not be used for.\n\nSee more: https://pnpm.io/settings#noproxy",
          "type": [
            "string",
            "null"
          ]
        },
        "strictSsl": {
          "description": "Whether or not to do SSL key validation when making requests to the registry via HTTPS.\n\nSee more: https://pnpm.io/settings#strict-ssl",
          "type": [
            "boolean",
            "null"
          ]
        },
        "networkConcurrency": {
          "description": "Controls the maximum number of HTTP(S) requests to process simultaneously.\n\nSee more: https://pnpm.io/settings#networkconcurrency",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "fetchRetries": {
          "description": "How many times to retry if pnpm fails to fetch from the registry.\n\nSee more: https://pnpm.io/settings#fetchretries",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "fetchRetryFactor": {
          "description": "The exponential factor for retry backoff.\n\nSee more: https://pnpm.io/settings#fetchretryfactor",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "fetchRetryMinTimeout": {
          "description": "The minimum (base) timeout for retrying requests.\n\nSee more: https://pnpm.io/settings#fetchretrymintimeout",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "fetchRetryMaxTimeout": {
          "description": "The maximum fallback timeout to ensure the retry factor does not make requests too long.\n\nSee more: https://pnpm.io/settings#fetchretrymaxtimeout",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "fetchTimeout": {
          "description": "The maximum amount of time to wait for HTTP requests to complete.\n\nSee more: https://pnpm.io/settings#fetchtimeout",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "autoInstallPeers": {
          "description": "When true, any missing non-optional peer dependencies are automatically installed.\n\nSee more: https://pnpm.io/settings#autoinstallpeers",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dedupePeerDependents": {
          "description": "When this setting is set to true, packages with peer dependencies will be deduplicated after peers resolution.\n\nSee more: https://pnpm.io/settings#dedupepeerdependents",
          "type": [
            "boolean",
            "null"
          ]
        },
        "strictPeerDependencies": {
          "description": "If this is enabled, commands will fail if there is a missing or invalid peer dependency in the tree.\n\nSee more: https://pnpm.io/settings#strictpeerdependencies",
          "type": [
            "boolean",
            "null"
          ]
        },
        "resolvePeersFromWorkspaceRoot": {
          "description": "When enabled, dependencies of the root workspace project are used to resolve peer dependencies of any projects in the workspace.\n\nSee more: https://pnpm.io/settings#resolvepeersfromworkspaceroot",
          "type": [
            "boolean",
            "null"
          ]
        },
        "color": {
          "description": "Controls colors in the output.\n\nSee more: https://pnpm.io/settings#no-color",
          "anyOf": [
            {
              "$ref": "#/$defs/Color"
            },
            {
              "type": "null"
            }
          ]
        },
        "loglevel": {
          "description": "Any logs at or higher than the given level will be shown.\n\nSee more: https://pnpm.io/settings#loglevel",
          "anyOf": [
            {
              "$ref": "#/$defs/LogLevel"
            },
            {
              "type": "null"
            }
          ]
        },
        "useBetaCli": {
          "description": "Experimental option that enables beta features of the CLI.\n\nSee more: https://pnpm.io/settings#usebetacli",
          "type": [
            "boolean",
            "null"
          ]
        },
        "recursiveInstall": {
          "description": "If this is enabled, the primary behaviour of pnpm install becomes that of pnpm install -r, meaning the install is performed on all workspace or subdirectory packages.\n\nSee more: https://pnpm.io/settings#recursiveinstall",
          "type": [
            "boolean",
            "null"
          ]
        },
        "engineStrict": {
          "description": "If this is enabled, pnpm will not install any package that claims to not be compatible with the current Node version.\n\nSee more: https://pnpm.io/settings#enginestrict",
          "type": [
            "boolean",
            "null"
          ]
        },
        "npmPath": {
          "description": "The location of the npm binary that pnpm uses for some actions, like publishing.\n\nSee more: https://pnpm.io/settings#npmpath",
          "type": [
            "string",
            "null"
          ]
        },
        "packageManagerStrict": {
          "description": "If this setting is disabled, pnpm will not fail if a different package manager is specified in the packageManager field of package.json. When enabled, only the package name is checked (since pnpm v9.2.0), so you can still run any version of pnpm regardless of the version specified in the packageManager field.\n\nSee more: https://pnpm.io/settings#packagemanagerstrict",
          "type": [
            "boolean",
            "null"
          ]
        },
        "packageManagerStrictVersion": {
          "description": "When enabled, pnpm will fail if its version doesn't exactly match the version specified in the packageManager field of package.json.\n\nSee more: https://pnpm.io/settings#packagemanagerstrictversion",
          "type": [
            "boolean",
            "null"
          ]
        },
        "managePackageManagerVersions": {
          "description": "When enabled, pnpm will automatically download and run the version of pnpm specified in the packageManager field of package.json.\n\nSee more: https://pnpm.io/settings#managepackagemanagerversions",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignoreScripts": {
          "description": "Do not execute any scripts defined in the project package.json and its dependencies.\n\nSee more: https://pnpm.io/settings#ignorescripts",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignoreDepScripts": {
          "description": "Do not execute any scripts of the installed packages. Scripts of the projects are executed.\n\nSee more: https://pnpm.io/settings#ignoredepscripts",
          "type": [
            "boolean",
            "null"
          ]
        },
        "childConcurrency": {
          "description": "The maximum number of child processes to allocate simultaneously to build node_modules.\n\nSee more: https://pnpm.io/settings#childconcurrency",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "sizeEffectsCache": {
          "description": "Use and cache the results of (pre/post)install hooks.\n\nSee more: https://pnpm.io/settings#sideeffectscache",
          "type": [
            "boolean",
            "null"
          ]
        },
        "sizeEffectsCacheReadOnly": {
          "description": "Only use the side effects cache if present, do not create it for new packages.\n\nSee more: https://pnpm.io/settings#sideeffectscachereadonly",
          "type": [
            "boolean",
            "null"
          ]
        },
        "unsafePerm": {
          "description": "Set to true to enable UID/GID switching when running package scripts. If set explicitly to false, then installing as a non-root user will fail.\n\nSee more: https://pnpm.io/settings#unsafeperm",
          "type": [
            "boolean",
            "null"
          ]
        },
        "nodeOptions": {
          "description": "Options to pass through to Node.js via the NODE_OPTIONS environment variable.\n\nSee more: https://pnpm.io/settings#nodeoptions",
          "type": [
            "string",
            "null"
          ]
        },
        "verifyDepsBeforeRun": {
          "description": "This setting allows the checking of the state of dependencies before running scripts.\n\nSee more: https://pnpm.io/settings#verifydepsbeforerun",
          "anyOf": [
            {
              "$ref": "#/$defs/VerifyDepsBeforeRun"
            },
            {
              "type": "null"
            }
          ]
        },
        "strictDepBuilds": {
          "description": "When strictDepBuilds is enabled, the installation will exit with a non-zero exit code if any dependencies have unreviewed build scripts (aka postinstall scripts).\n\nSee more: https://pnpm.io/settings#strictdepbuilds",
          "type": [
            "boolean",
            "null"
          ]
        },
        "useNodeVersion": {
          "description": "Specifies which exact Node.js version should be used for the project's runtime.\n\nSee more: https://pnpm.io/settings#usenodeversion",
          "type": [
            "string",
            "null"
          ]
        },
        "nodeVersion": {
          "description": "The Node.js version to use when checking a package's engines setting.\n\nSee more: https://pnpm.io/settings#nodeversion",
          "type": [
            "string",
            "null"
          ]
        },
        "linkWorkspacePackages": {
          "description": "If this is enabled, locally available packages are linked to node_modules instead of being downloaded from the registry.\n\nSee more: https://pnpm.io/settings#linkworkspacepackages",
          "anyOf": [
            {
              "$ref": "#/$defs/LinkWorkspacePackages"
            },
            {
              "type": "null"
            }
          ]
        },
        "injectWorkspacePackages": {
          "description": "Enables hard-linking of all local workspace dependencies instead of symlinking them.\n\nSee more: https://pnpm.io/settings#injectworkspacepackages",
          "type": [
            "boolean",
            "null"
          ]
        },
        "syncInjectedDepsAfterScripts": {
          "description": "Injected workspace dependencies are collections of hardlinks, which don't add or remove the files when their sources change.\n\nSee more: https://pnpm.io/settings#syncinjecteddepsafterscripts",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "preferWorkspacePackages": {
          "description": "If this is enabled, local packages from the workspace are preferred over packages from the registry, even if there is a newer version of the package in the registry.\n\nSee more: https://pnpm.io/settings#preferworkspacepackages",
          "type": [
            "boolean",
            "null"
          ]
        },
        "sharedWorkspaceLockfile": {
          "description": "If this is enabled, pnpm creates a single pnpm-lock.yaml file in the root of the workspace.\n\nSee more: https://pnpm.io/settings#sharedworkspacelockfile",
          "type": [
            "boolean",
            "null"
          ]
        },
        "saveWorkspaceProtocol": {
          "description": "This setting controls how dependencies that are linked from the workspace are added to package.json.\n\nSee more: https://pnpm.io/settings#saveworkspaceprotocol",
          "anyOf": [
            {
              "$ref": "#/$defs/SaveWorkspaceProtocol"
            },
            {
              "type": "null"
            }
          ]
        },
        "includeWorkspaceRoot": {
          "description": "When executing commands recursively in a workspace, execute them on the root workspace project as well.\n\nSee more: https://pnpm.io/settings#includeworkspaceroot",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignoreWorkspaceCycles": {
          "description": "When set to true, no workspace cycle warnings will be printed.\n\nSee more: https://pnpm.io/settings#ignoreworkspacecycles",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignoreWorkspaceRootCheck": {
          "description": "Adding a new dependency to the root workspace package fails, unless the --ignore-workspace-root-check or -w flag is used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "disallowWorkspaceCycles": {
          "description": "When set to true, installation will fail if the workspace has cycles.\n\nSee more: https://pnpm.io/settings#disallowworkspacecycles",
          "type": [
            "boolean",
            "null"
          ]
        },
        "forceLegacyDeploy": {
          "description": "By default, pnpm deploy will try creating a dedicated lockfile from a shared lockfile for deployment. If this setting is set to true, the legacy deploy behavior will be used.\n\nSee more: https://pnpm.io/settings#forcelegacydeploy",
          "type": [
            "boolean",
            "null"
          ]
        },
        "savePrefix": {
          "description": "Configure how versions of packages installed to a package.json file get prefixed.\n\nSee more: https://pnpm.io/settings#saveprefix",
          "anyOf": [
            {
              "$ref": "#/$defs/SavePrefix"
            },
            {
              "type": "null"
            }
          ]
        },
        "tag": {
          "description": "If you pnpm add a package and you don't provide a specific version, then it will install the package at the version registered under the tag from this setting.\n\nSee more: https://pnpm.io/settings#tag",
          "type": [
            "string",
            "null"
          ]
        },
        "globalDir": {
          "description": "Specify a custom directory to store global packages.\n\nSee more: https://pnpm.io/settings#globaldir",
          "type": [
            "string",
            "null"
          ]
        },
        "globalBinDir": {
          "description": "Allows to set the target directory for the bin files of globally installed packages.\n\nSee more: https://pnpm.io/settings#globalbindir",
          "type": [
            "string",
            "null"
          ]
        },
        "stateDir": {
          "description": "The location where all the packages are saved on the disk.\n\nSee more: https://pnpm.io/settings#statedir",
          "type": [
            "string",
            "null"
          ]
        },
        "cacheDir": {
          "description": "The location of the cache (package metadata and dlx).\n\nSee more: https://pnpm.io/settings#cachedir",
          "type": [
            "string",
            "null"
          ]
        },
        "useStderr": {
          "description": "When true, all the output is written to stderr.\n\nSee more: https://pnpm.io/settings#usestderr",
          "type": [
            "boolean",
            "null"
          ]
        },
        "updateNotifier": {
          "description": "When true, pnpm will check for updates to the installed packages and notify the user.\n\nSee more: https://pnpm.io/settings#updatenotifier",
          "type": [
            "boolean",
            "null"
          ]
        },
        "preferSymlinkedExecutabled": {
          "description": "Create symlinks to executables in node_modules/.bin instead of command shims. This setting is ignored on Windows, where only command shims work.\n\nSee more: https://pnpm.io/settings#prefersymlinkedexecutables",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignoreCompatibilityDb": {
          "description": "During installation the dependencies of some packages are automatically patched. If you want to disable this, set this config to false.\n\nSee more: https://pnpm.io/settings#ignorecompatibilitydb",
          "type": [
            "boolean",
            "null"
          ]
        },
        "resolutionMode": {
          "description": "Determines how pnpm resolves dependencies.\n\nSee more: https://pnpm.io/settings#resolutionmode",
          "anyOf": [
            {
              "$ref": "#/$defs/ResolutionMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "registrySupportsTimeField": {
          "description": "Set this to true if the registry that you are using returns the `time` field in the abbreviated metadata.\n\nSee more: https://pnpm.io/settings#registrysupportstimefield",
          "type": [
            "boolean",
            "null"
          ]
        },
        "extendNodePath": {
          "description": "When false, the NODE_PATH environment variable is not set in the command shims.\n\nSee more: https://pnpm.io/settings#extendnodepath",
          "type": [
            "boolean",
            "null"
          ]
        },
        "deployAllFiles": {
          "description": "When deploying a package or installing a local package, all files of the package are copied.\n\nSee more: https://pnpm.io/settings#deployallfiles",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dedupeDirectDeps": {
          "description": "When set to true, dependencies that are already symlinked to the root node_modules directory of the workspace will not be symlinked to subproject node_modules directories.\n\nSee more: https://pnpm.io/settings#dedupedirectdeps",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dedupeInjectedDeps": {
          "description": "When this setting is enabled, dependencies that are injected will be symlinked from the workspace whenever possible.\n\nSee more: https://pnpm.io/settings#dedupeinjecteddeps",
          "type": [
            "boolean",
            "null"
          ]
        },
        "optimisticRepeatInstall": {
          "description": "When enabled, a fast check will be performed before proceeding to installation. This way a repeat install or an install on a project with everything up-to-date becomes a lot faster.\n\nSee more: https://pnpm.io/settings#optimisticrepeatinstall",
          "type": [
            "boolean",
            "null"
          ]
        },
        "gitChecks": {
          "description": "Check if current branch is your publish branch, clean, and up-to-date with remote.\n\nSee more: https://pnpm.io/cli/publish#configuration",
          "type": [
            "boolean",
            "null"
          ]
        },
        "publishBranch": {
          "description": "The primary branch of the repository which is used for publishing the latest changes.\n\nSee more: https://pnpm.io/cli/publish#configuration",
          "type": [
            "string",
            "null"
          ]
        },
        "pnpmfile": {
          "description": "The location of the local pnpmfile.\n\nSee more: https://pnpm.io/settings#pnpmfile",
          "type": [
            "string",
            "null"
          ]
        },
        "globalPnpmfile": {
          "description": "The location of a global pnpmfile. A global pnpmfile is used by all projects during installation.\n\nSee more: https://pnpm.io/settings#globalpnpmfile",
          "type": [
            "string",
            "null"
          ]
        },
        "ignorePnpmfile": {
          "description": ".pnpmfile.cjs will be ignored. Useful together with --ignore-scripts when you want to make sure that no script gets executed during install.\n\nSee more: https://pnpm.io/settings#ignorepnpmfile",
          "type": [
            "boolean",
            "null"
          ]
        },
        "patchesDir": {
          "description": "The generated patch file will be saved to this directory.\n\nSee more: https://pnpm.io/cli/patch-commit",
          "type": [
            "string",
            "null"
          ]
        },
        "enablePrePostScripts": {
          "description": "When true, pnpm will run any pre/post scripts automatically.\n\nSee more: https://pnpm.io/settings#enableprepostscripts",
          "type": [
            "boolean",
            "null"
          ]
        },
        "scriptShell": {
          "description": "The shell to use for scripts run with the pnpm run command.\n\nSee more: https://pnpm.io/settings#scriptshell",
          "type": [
            "string",
            "null"
          ]
        },
        "shellEmulator": {
          "description": "When true, pnpm will use a JavaScript implementation of a bash-like shell to execute scripts.\n\nSee more: https://pnpm.io/settings#shellemulator",
          "type": [
            "boolean",
            "null"
          ]
        },
        "saveExact": {
          "description": "Saved dependencies will be configured with an exact version rather than using pnpm's default semver range operator.\n\nSee more: https://pnpm.io/cli/add#--save-exact--e",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": true
    },
    "DockerConfig": {
      "description": "All settings and presets related to Docker.",
      "type": "object",
      "properties": {
        "compose_presets": {
          "description": "A map that contains presets for Docker Compose files.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/ComposePreset"
          },
          "default": {}
        },
        "service_presets": {
          "description": "A map that contains presets for Docker services.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/DockerServicePreset"
          },
          "default": {}
        }
      }
    },
    "ComposePreset": {
      "description": "A preset for Docker Compose files.",
      "type": "object",
      "properties": {
        "extends_presets": {
          "description": "The list of extended presets.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "default": []
        },
        "name": {
          "description": "The top-level name property is defined by the Compose Specification as the project name to be used if you don't set one explicitly.\n\nSee more: https://docs.docker.com/reference/compose-file/version-and-name/#name-top-level-element",
          "type": [
            "string",
            "null"
          ]
        },
        "include": {
          "description": "Requires: Docker Compose 2.20.0 and later\n\nThe include top-level section is used to define the dependency on another Compose application, or sub-domain. Each path listed in the include section is loaded as an individual Compose application model, with its own project directory, in order to resolve relative paths.\n\nSee more: https://docs.docker.com/reference/compose-file/include/",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Include"
          }
        },
        "services": {
          "description": "Defines the services for the Compose application.\n\nSee more: https://docs.docker.com/reference/compose-file/services/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/ServiceData"
          }
        },
        "configs": {
          "description": "Defines or references configuration data that is granted to services in your Compose application.\n\nSee more: https://docs.docker.com/reference/compose-file/configs/",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/TopLevelConfig"
          }
        },
        "models": {
          "description": "The top-level models section declares AI models that are used by your Compose application. These models are typically pulled as OCI artifacts, run by a model runner, and exposed as an API that your service containers can consume.\n\nSee more: https://docs.docker.com/reference/compose-file/models/",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/TopLevelModel"
          }
        },
        "networks": {
          "description": "The named networks for the Compose application.\n\nSee more: https://docs.docker.com/reference/compose-file/networks/",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/TopLevelNetwork"
          },
          "default": null
        },
        "secrets": {
          "description": "The named secrets for the Compose application.\n\nSee more: https://docs.docker.com/reference/compose-file/secrets/",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/TopLevelSecret"
          }
        },
        "volumes": {
          "description": "The named volumes for the Compose application.\n\nSee more: https://docs.docker.com/reference/compose-file/volumes/",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/TopLevelVolume"
          }
        }
      },
      "additionalProperties": true
    },
    "Include": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/IncludeSettings"
        }
      ]
    },
    "IncludeSettings": {
      "description": "Compose application or sub-projects to be included.\n\nSee more: https://docs.docker.com/reference/compose-file/include/#long-syntax",
      "type": "object",
      "properties": {
        "path": {
          "description": "Defines the location of the Compose file(s) to be parsed and included into the local Compose model.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrSortedList"
            },
            {
              "type": "null"
            }
          ]
        },
        "project_directory": {
          "description": "Defines a base path to resolve relative paths set in the Compose file. It defaults to the directory of the included Compose file.",
          "type": [
            "string",
            "null"
          ]
        },
        "env_file": {
          "description": "Defines an environment file(s) to use to define default values when interpolating variables in the Compose file being parsed. It defaults to .env file in the project_directory for the Compose file being parsed.\n\nSee more: https://docs.docker.com/reference/compose-file/include/#env_file",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrList"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "StringOrSortedList": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "StringOrList": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "ServiceData": {
      "description": "Ways of representing a service in a Docker preset.",
      "anyOf": [
        {
          "description": "The id of a service preset.",
          "type": "string"
        },
        {
          "description": "The defitinion for a Docker service.",
          "$ref": "#/$defs/DockerServicePreset"
        }
      ]
    },
    "DockerServicePreset": {
      "description": "A preset for a Docker service",
      "type": "object",
      "properties": {
        "extends_presets": {
          "description": "The list of extended presets.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "writeOnly": true
        },
        "extends": {
          "description": "`extends` lets you share common configurations among different files, or even different projects entirely.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#extends",
          "anyOf": [
            {
              "$ref": "#/$defs/Extends"
            },
            {
              "type": "null"
            }
          ]
        },
        "container_name": {
          "description": "A string that specifies a custom container name, rather than a name generated by default. Compose does not scale a service beyond one container if the Compose file specifies a container_name. Attempting to do so results in an error.\n\ncontainer_name follows the regex format of [a-zA-Z0-9][a-zA-Z0-9_.-]+\n\nSee more: https://docs.docker.com/reference/compose-file/services/#container_name",
          "type": [
            "string",
            "null"
          ]
        },
        "hostname": {
          "description": "A custom host name to use for the service container. It must be a valid RFC 1123 hostname.",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "Specifies the image to start the container from. See more: https://docs.docker.com/reference/compose-file/services/#image",
          "type": [
            "string",
            "null"
          ]
        },
        "build": {
          "description": "Specifies the build configuration for creating a container image from source, as defined in the [Compose Build Specification](https://docs.docker.com/reference/compose-file/build/).",
          "anyOf": [
            {
              "$ref": "#/$defs/BuildStep"
            },
            {
              "type": "null"
            }
          ]
        },
        "depends_on": {
          "description": "With the depends_on attribute, you can control the order of service startup and shutdown. It is useful if services are closely coupled, and the startup sequence impacts the application's functionality.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#depends_on",
          "anyOf": [
            {
              "$ref": "#/$defs/DependsOn"
            },
            {
              "type": "null"
            }
          ]
        },
        "command": {
          "description": "Overrides the default command declared by the container image, for example by Dockerfile's CMD.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#command",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrList"
            },
            {
              "type": "null"
            }
          ]
        },
        "entrypoint": {
          "description": "Declares the default entrypoint for the service container. This overrides the ENTRYPOINT instruction from the service's Dockerfile.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#entrypoint",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrList"
            },
            {
              "type": "null"
            }
          ]
        },
        "healthcheck": {
          "description": "Declares a check that's run to determine whether or not the service containers are \"healthy\".\n\nSee more: https://docs.docker.com/reference/compose-file/services/#healthcheck",
          "anyOf": [
            {
              "$ref": "#/$defs/Healthcheck"
            },
            {
              "type": "null"
            }
          ]
        },
        "expose": {
          "description": "Defines the (incoming) port or a range of ports that Compose exposes from the container. These ports must be accessible to linked services and should not be published to the host machine. Only the internal container ports can be specified.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#expose",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/StringOrNum"
          }
        },
        "env_file": {
          "description": "One or more files that contain environment variables to be passed to the containers.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#env_file",
          "anyOf": [
            {
              "$ref": "#/$defs/Envfile"
            },
            {
              "type": "null"
            }
          ]
        },
        "environment": {
          "description": "Defines environment variables set in the container. environment can use either an array or a map. Any boolean values; true, false, yes, no, should be enclosed in quotes to ensure they are not converted to True or False by the YAML parser.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#environment",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        },
        "annotations": {
          "description": "Defines annotations for the container. annotations can use either an array or a map.",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        },
        "attach": {
          "description": "Requires: Docker Compose 2.20.0 and later\n\nWhen attach is defined and set to false Compose does not collect service logs, until you explicitly request it to.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "blkio_config": {
          "description": "Defines a set of configuration options to set block I/O limits for a service.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#blkio_config",
          "anyOf": [
            {
              "$ref": "#/$defs/BlkioSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "cap_add": {
          "description": "Specifies additional container [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) as strings.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "cap_drop": {
          "description": "Specifies container [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) to drop as strings.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "cgroup": {
          "description": "Requires: Docker Compose 2.15.0 and later\n\nSpecifies the cgroup namespace to join. When unset, it is the container runtime's decision to select which cgroup namespace to use, if supported.\n\nhost: Runs the container in the Container runtime cgroup namespace.\nprivate: Runs the container in its own private cgroup namespace.",
          "anyOf": [
            {
              "$ref": "#/$defs/Cgroup"
            },
            {
              "type": "null"
            }
          ]
        },
        "cgroup_parent": {
          "description": "Specifies an optional parent cgroup for the container.",
          "type": [
            "string",
            "null"
          ]
        },
        "configs": {
          "description": "Lets services adapt their behaviour without the need to rebuild a Docker image.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#configs",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/ServiceConfigOrSecret"
          }
        },
        "cpu_count": {
          "description": "The number of usable CPUs for service container.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "cpu_percent": {
          "description": "The usable percentage of the available CPUs.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "cpu_period": {
          "description": "Configures CPU CFS (Completely Fair Scheduler) period when a platform is based on Linux kernel.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "cpu_quota": {
          "description": "Configures CPU CFS (Completely Fair Scheduler) quota when a platform is based on Linux kernel.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "cpu_shares": {
          "description": "A service container's relative CPU weight versus other containers.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "cpu_rt_period": {
          "description": "Configures CPU allocation parameters for platforms with support for real-time scheduler. It can be either an integer value using microseconds as unit or a duration.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "cpu_rt_runtime": {
          "description": "Configures CPU allocation parameters for platforms with support for real-time scheduler. It can be either an integer value using microseconds as unit or a duration.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "cpus": {
          "description": "The number of (potentially virtual) CPUs to allocate to service containers. This is a fractional number. 0.000 means no limit.\n\nWhen set, cpus must be consistent with the cpus attribute in the Deploy Specification.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "cpuset": {
          "description": "The explicit CPUs in which to permit execution. Can be a range 0-3 or a list 0,1",
          "type": [
            "string",
            "null"
          ]
        },
        "credential_spec": {
          "description": "Configures the credential spec for a managed service account.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#credential_spec",
          "anyOf": [
            {
              "$ref": "#/$defs/CredentialSpec"
            },
            {
              "type": "null"
            }
          ]
        },
        "deploy": {
          "description": "Specifies the configuration for the deployment and lifecycle of services, as defined in the [Compose Deploy Specification](https://docs.docker.com/reference/compose-file/deploy)",
          "anyOf": [
            {
              "$ref": "#/$defs/Deploy"
            },
            {
              "type": "null"
            }
          ]
        },
        "develop": {
          "description": "Specifies the development configuration for maintaining a container in sync with source.\n\nSee more: https://docs.docker.com/reference/compose-file/develop",
          "anyOf": [
            {
              "$ref": "#/$defs/DevelopmentSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "device_cgroup_rules": {
          "description": "A list of device cgroup rules for this container. The format is the same format the Linux kernel specifies in the Control [Groups Device Whitelist Controller]().",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "devices": {
          "description": "Defines a list of device mappings for created containers.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#devices",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/DeviceMapping"
          }
        },
        "dns": {
          "description": "Custom DNS servers to set on the container network interface configuration. It can be a single value or a list.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrSortedList"
            },
            {
              "type": "null"
            }
          ]
        },
        "dns_opt": {
          "description": "Custom DNS options to be passed to the container’s DNS resolver (/etc/resolv.conf file on Linux).",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "dns_search": {
          "description": "Custom DNS search domains to set on container network interface configuration. It can be a single value or a list.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrSortedList"
            },
            {
              "type": "null"
            }
          ]
        },
        "domainname": {
          "description": "A custom domain name to use for the service container. It must be a valid RFC 1123 hostname.",
          "type": [
            "string",
            "null"
          ]
        },
        "driver_opts": {
          "description": "Requires: Docker Compose 2.27.1 and later\n\nSpecifies a list of options as key-value pairs to pass to the driver. These options are driver-dependent.\nConsult the [network drivers documentation](https://docs.docker.com/engine/network/) for more information.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/StringOrNum"
          }
        },
        "external_links": {
          "description": "`external_links` link service containers to services managed outside of your Compose application. `external_links` define the name of an existing service to retrieve using the platform lookup mechanism.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "extra_hosts": {
          "description": "Adds hostname mappings to the container network interface configuration (/etc/hosts for Linux).\n\nSee more: https://docs.docker.com/reference/compose-file/services/#extra_hosts",
          "anyOf": [
            {
              "$ref": "#/$defs/ExtraHosts"
            },
            {
              "type": "null"
            }
          ]
        },
        "gpus": {
          "description": "Requires: Docker Compose 2.30.0 and later\n\nSpecifies GPU devices to be allocated for container usage.",
          "anyOf": [
            {
              "$ref": "#/$defs/Gpus"
            },
            {
              "type": "null"
            }
          ]
        },
        "group_add": {
          "description": "Additional groups, by name or number, which the user inside the container must be a member of.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#group_add",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/StringOrNum"
          }
        },
        "init": {
          "description": "Runs an init process (PID 1) inside the container that forwards signals and reaps processes. Set this option to true to enable this feature for the service.\n\nThe init binary that is used is platform specific.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ipc": {
          "description": "ipc configures the IPC isolation mode set by the service container.\n\nshareable: Gives the container its own private IPC namespace, with a possibility to share it with other containers.\n\nservice:{name}: Makes the container join another container's (shareable) IPC namespace.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#ipc",
          "type": [
            "string",
            "null"
          ]
        },
        "isolation": {
          "description": "Container isolation technology to use. Supported values are platform-specific.",
          "type": [
            "string",
            "null"
          ]
        },
        "labels": {
          "description": "Add metadata to containers. You can use either an array or a map.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#labels",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        },
        "label_file": {
          "description": "Requires: Docker Compose 2.32.2 and later\n\nThe label_file attribute lets you load labels for a service from an external file or a list of files. This provides a convenient way to manage multiple labels without cluttering the Compose file.\nSee more: https://docs.docker.com/reference/compose-file/services/#label_file",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrSortedList"
            },
            {
              "type": "null"
            }
          ]
        },
        "links": {
          "description": "Defines a network link to containers in another service. Either specify both the service name and a link alias (SERVICE:ALIAS), or just the service name.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#links",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "logging": {
          "description": "Defines the logging configuration for the service.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#logging",
          "anyOf": [
            {
              "$ref": "#/$defs/LoggingSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "mac_address": {
          "description": "Sets a Mac address for the service container.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#mac_address",
          "type": [
            "string",
            "null"
          ]
        },
        "mem_limit": {
          "description": "Memory limit for the container. A string value can use suffix like '2g' for 2 gigabytes.\n\nWhen set, mem_limit must be consistent with the limits.memory attribute in the [Deploy Specification](https://docs.docker.com/reference/compose-file/deploy/#memory).",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "mem_reservation": {
          "description": "Configures a reservation on the amount of memory a container can allocate, set as a string expressing a [byte value](https://docs.docker.com/reference/compose-file/extension/#specifying-byte-values).\n\nWhen set, mem_reservation must be consistent with the reservations.memory attribute in the [Deploy Specification](https://docs.docker.com/reference/compose-file/deploy/#memory).",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "mem_swappiness": {
          "description": "Defines as a percentage, a value between 0 and 100, for the host kernel to swap out anonymous memory pages used by a container.\n\n 0: Turns off anonymous page swapping.\n100: Sets all anonymous pages as swappable.\n\nThe default value is platform specific.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0,
          "maximum": 255
        },
        "memswap_limit": {
          "description": "Defines the amount of memory the container is allowed to swap to disk.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#memswap_limit",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "models": {
          "description": "Requires: Docker Compose 2.38.0 and later\n\nDefines which AI models the service should use at runtime. Each referenced model must be defined under the [`models` top-level element](https://docs.docker.com/reference/compose-file/models/).\n\nSee more: https://docs.docker.com/reference/compose-file/services/#models",
          "anyOf": [
            {
              "$ref": "#/$defs/ServiceModels"
            },
            {
              "type": "null"
            }
          ]
        },
        "network_mode": {
          "description": "Sets a service container's network mode.\n\nnone: Turns off all container networking.\nhost: Gives the container raw access to the host's network interface.\nservice:{name}: Gives the container access to the specified container by referring to its service name.\ncontainer:{name}: Gives the container access to the specified container by referring to its container ID.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#network_mode",
          "anyOf": [
            {
              "$ref": "#/$defs/NetworkMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "networks": {
          "description": "The networks attribute defines the networks that service containers are attached to, referencing entries under the networks top-level element.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#networks",
          "anyOf": [
            {
              "$ref": "#/$defs/ServiceNetworks"
            },
            {
              "type": "null"
            }
          ]
        },
        "oom_kill_disable": {
          "description": "If `oom_kill_disable` is set, Compose configures the platform so it won't kill the container in case of memory starvation.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "oom_score_adj": {
          "description": "Tunes the preference for containers to be killed by platform in case of memory starvation. Value must be within -1000,1000 range.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "pid": {
          "description": "Sets the PID mode for container created by Compose. Supported values are platform specific.",
          "type": [
            "string",
            "null"
          ]
        },
        "pids_limit": {
          "description": "Tune a container's PIDs limit. Set to -1 for unlimited PIDs.\n\nWhen set, pids_limit must be consistent with the pids attribute in the [Deploy Specification](https://docs.docker.com/reference/compose-file/deploy/#pids).",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "platform": {
          "description": "The target platform the containers for the service run on. It uses the os[/arch[/variant]] syntax.\n\nThe values of os, arch, and variant must conform to the convention used by the OCI Image Spec.\n\nCompose uses this attribute to determine which version of the image is pulled and/or on which platform the service’s build is performed.",
          "type": [
            "string",
            "null"
          ]
        },
        "ports": {
          "description": "Used to define the port mappings between the host machine and the containers.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#ports",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Port"
          }
        },
        "post_start": {
          "description": "Requires: Docker Compose 2.30.0 and later\n\nDefines a sequence of lifecycle hooks to run after a container has started. The exact timing of when the command is run is not guaranteed.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#post_start",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/ServiceHook"
          }
        },
        "pre_stop": {
          "description": "Defines a sequence of lifecycle hooks to run before the container is stopped. These hooks won't run if the container stops by itself or is terminated suddenly.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/ServiceHook"
          }
        },
        "privileged": {
          "description": "Configures the service container to run with elevated privileges. Support and actual impacts are platform specific.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "profiles": {
          "description": "Defines a list of named profiles for the service to be enabled under. If unassigned, the service is always started but if assigned, it is only started if the profile is activated.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#profiles",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "provider": {
          "description": "Defines a service that Compose won't manage directly. Compose delegated the service lifecycle to a dedicated or third-party component.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#provider",
          "anyOf": [
            {
              "$ref": "#/$defs/Provider"
            },
            {
              "type": "null"
            }
          ]
        },
        "pull_policy": {
          "description": "Defines the decisions Compose makes when it starts to pull images.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#pull_policy",
          "anyOf": [
            {
              "$ref": "#/$defs/PullPolicy"
            },
            {
              "type": "null"
            }
          ]
        },
        "pull_refresh_after": {
          "description": "Time after which to refresh the image. Used with pull_policy=refresh.",
          "type": [
            "string",
            "null"
          ]
        },
        "read_only": {
          "description": "Configures the service container to be created with a read-only filesystem.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "restart": {
          "description": "Defines the policy that the platform applies on container termination.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#restart",
          "anyOf": [
            {
              "$ref": "#/$defs/Restart"
            },
            {
              "type": "null"
            }
          ]
        },
        "runtime": {
          "description": "Specifies which runtime to use for the service’s containers.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#runtime",
          "type": [
            "string",
            "null"
          ]
        },
        "scale": {
          "description": "Specifies the default number of containers to deploy for this service. When both are set, scale must be consistent with the replicas attribute in the [Deploy Specification](https://docs.docker.com/reference/compose-file/deploy/#replicas).",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0
        },
        "secrets": {
          "description": "The secrets attribute grants access to sensitive data defined by the secrets top-level element on a per-service basis. Services can be granted access to multiple secrets.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#secrets",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/ServiceConfigOrSecret"
          }
        },
        "security_opt": {
          "description": "Overrides the default labeling scheme for each container.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#security_opt",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "shm_size": {
          "description": "Size of /dev/shm. A string value can use suffix like '2g' for 2 gigabytes.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "stdin_open": {
          "description": "Configures a service's container to run with an allocated stdin. This is the same as running a container with the -i flag. For more information, see [Keep stdin open](https://docs.docker.com/reference/cli/docker/container/run/#interactive).",
          "type": [
            "boolean",
            "null"
          ]
        },
        "stop_grace_period": {
          "description": "Specifies how long Compose must wait when attempting to stop a container if it doesn't handle SIGTERM (or whichever stop signal has been specified with stop_signal), before sending SIGKILL. It's specified as a duration.\n\nDefault value is 10 seconds for the container to exit before sending SIGKILL.",
          "type": [
            "string",
            "null"
          ]
        },
        "stop_signal": {
          "description": "The signal that Compose uses to stop the service containers. If unset containers are stopped by Compose by sending SIGTERM.",
          "type": [
            "string",
            "null"
          ]
        },
        "storage_opt": {
          "description": "Defines storage driver options for a service.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": true
        },
        "sysctls": {
          "description": "Defines kernel parameters to set in the container. sysctls can use either an array or a map.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#sysctls",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        },
        "tmpfs": {
          "description": "Mounts a temporary file system inside the container. It can be a single value or a list.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#tmpfs",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrList"
            },
            {
              "type": "null"
            }
          ]
        },
        "tty": {
          "description": "Configures a service's container to run with a TTY. This is the same as running a container with the -t or --tty flag. For more information, see [Allocate a pseudo-TTY](https://docs.docker.com/reference/cli/docker/container/run/#tty).",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ulimits": {
          "description": "Overrides the default ulimits for a container. It's specified either as an integer for a single limit or as mapping for soft/hard limits.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#ulimits",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/Ulimit"
          }
        },
        "use_api_socket": {
          "description": "When `use_api_socket` is set, the container is able to interact with the underlying container engine through the API socket. Your credentials are mounted inside the container so the container acts as a pure delegate for your commands relating to the container engine. Typically, commands ran by container can pull and push to your registry.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "user": {
          "description": "Overrides the user used to run the container process. The default is set by the image, for example Dockerfile USER. If it's not set, then root.",
          "type": [
            "string",
            "null"
          ]
        },
        "userns_mode": {
          "description": "Sets the user namespace for the service. Supported values are platform specific and may depend on platform configuration.",
          "type": [
            "string",
            "null"
          ]
        },
        "uts": {
          "description": "/// Configures the UTS namespace mode set for the service container. When unspecified it is the runtime's decision to assign a UTS namespace, if supported.",
          "anyOf": [
            {
              "$ref": "#/$defs/kebab-case"
            },
            {
              "type": "null"
            }
          ]
        },
        "volumes": {
          "description": "The volumes attribute define mount host paths or named volumes that are accessible by service containers.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#volumes",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/ServiceVolume"
          }
        },
        "volumes_from": {
          "description": "Mounts all of the volumes from another service or container. You can optionally specify read-only access ro or read-write rw. If no access level is specified, then read-write access is used.\n\nYou can also mount volumes from a container that is not managed by Compose by using the container: prefix.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "working_dir": {
          "description": "Overrides the container's working directory which is specified by the image, for example Dockerfile's WORKDIR.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Extends": {
      "description": "`extends` lets you share common configurations among different files, or even different projects entirely.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#extends",
      "anyOf": [
        {
          "description": "The name of the service to extend.",
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "service": {
              "description": "The name of the service to extend.",
              "type": "string"
            },
            "file": {
              "description": "The file path where the service to extend is defined.",
              "type": [
                "string",
                "null"
              ],
              "default": null
            }
          },
          "required": [
            "service"
          ]
        }
      ]
    },
    "BuildStep": {
      "anyOf": [
        {
          "description": "Path to the build context. Can be a relative path or a URL.",
          "type": "string"
        },
        {
          "description": "Configuration options for building the service's image.",
          "$ref": "#/$defs/AdvancedBuildStep"
        }
      ]
    },
    "AdvancedBuildStep": {
      "description": "Specifies the build configuration for creating a container image from source, as defined in the [Compose Build Specification](https://docs.docker.com/reference/compose-file/build/).",
      "type": "object",
      "properties": {
        "context": {
          "description": "Defines either a path to a directory containing a Dockerfile, or a URL to a Git repository.\n\nWhen the value supplied is a relative path, it is interpreted as relative to the project directory. Compose warns you about the absolute path used to define the build context as those prevent the Compose file from being portable.\n\nSee more: https://docs.docker.com/reference/compose-file/build/#context",
          "type": [
            "string",
            "null"
          ]
        },
        "additional_contexts": {
          "description": "Requires: Docker Compose 2.17.0 and later\n\nDefines a list of named contexts the image builder should use during image build. Can be a mapping or a list.\nSee more: https://docs.docker.com/reference/compose-file/build/#additional_contexts",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        },
        "dockerfile": {
          "description": "Sets an alternate Dockerfile. A relative path is resolved from the build context. Compose warns you about the absolute path used to define the Dockerfile as it prevents Compose files from being portable.\n\nWhen set, dockerfile_inline attribute is not allowed and Compose rejects any Compose file having both set.",
          "type": [
            "string",
            "null"
          ]
        },
        "dockerfile_inline": {
          "description": "Requires: Docker Compose 2.17.0 and later\n\ndockerfile_inline defines the Dockerfile content as an inlined string in a Compose file. When set, the dockerfile attribute is not allowed and Compose rejects any Compose file having both set.",
          "type": [
            "string",
            "null"
          ]
        },
        "args": {
          "description": "Define build arguments, that is Dockerfile ARG values.\n\nCache location syntax follows the global format [NAME|type=TYPE[,KEY=VALUE]]. Simple NAME is actually a shortcut notation for type=registry,ref=NAME.\n\nSee more: https://docs.docker.com/reference/compose-file/build/#args",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        },
        "cache_from": {
          "description": "Defines a list of sources the image builder should use for cache resolution.\n\nSee more: https://docs.docker.com/reference/compose-file/build/#cache_from",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "cache_to": {
          "description": "Defines a list of export locations to be used to share build cache with future builds.\n\nCache location syntax follows the global format [NAME|type=TYPE[,KEY=VALUE]]. Simple NAME is actually a shortcut notation for type=registry,ref=NAME.\n\nSee more: https://docs.docker.com/reference/compose-file/build/#cache_to",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "entitlements": {
          "description": "Requires: Docker Compose 2.27.1 and later\n\nDefines extra privileged entitlements to be allowed during the build.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "extra_hosts": {
          "description": "Adds hostname mappings at build-time. Use the same syntax as [extra_hosts](https://docs.docker.com/reference/compose-file/services/#extra_hosts).",
          "anyOf": [
            {
              "$ref": "#/$defs/ExtraHosts"
            },
            {
              "type": "null"
            }
          ]
        },
        "isolation": {
          "description": "Specifies a build’s container isolation technology. Supported values are platform specific.",
          "type": [
            "string",
            "null"
          ]
        },
        "labels": {
          "description": "Add metadata to the resulting image. Can be set either as an array or a map.\n\nIt's recommended that you use reverse-DNS notation to prevent your labels from conflicting with other software.",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        },
        "network": {
          "description": "Network mode to use for the build. Options include 'default', 'none', 'host', or a network name.\n\nSee more: https://docs.docker.com/reference/compose-file/build/#network",
          "type": [
            "string",
            "null"
          ]
        },
        "no_cache": {
          "description": "Disables image builder cache and enforces a full rebuild from source for all image layers. This only applies to layers declared in the Dockerfile, referenced images can be retrieved from local image store whenever tag has been updated on registry (see [pull](https://docs.docker.com/reference/compose-file/build/#pull)).",
          "type": [
            "boolean",
            "null"
          ]
        },
        "platforms": {
          "description": "Defines a list of target [platforms](https://docs.docker.com/reference/compose-file/services/#platform).\n\nSee more: https://docs.docker.com/reference/compose-file/build/#platforms",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "privileged": {
          "description": "Requires: Docker Compose 2.15.0 and later\n\nConfigures the service image to build with elevated privileges. Support and actual impacts are platform specific.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "provenance": {
          "description": "Requires: Docker Compose 2.39.0 and later\n\nConfigures the builder to add a provenance attestation to the published image.\n\nThe value can be either a boolean to enable/disable provenance attestation, or a key=value string to set provenance configuration. You can use this to select the level of detail to be included in the provenance attestation by setting the mode parameter.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "pull": {
          "description": "Requires the image builder to pull referenced images (FROM Dockerfile directive), even if those are already available in the local image store.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "sbom": {
          "description": "Requires: Docker Compose 2.39.0 and later\n\nConfigures the builder to add a provenance attestation to the published image.\n\nSee more: https://docs.docker.com/reference/compose-file/build/#sbom",
          "type": [
            "boolean",
            "null"
          ]
        },
        "secrets": {
          "description": "Grants access to sensitive data defined by secrets on a per-service build basis.\n\nSee more: https://docs.docker.com/reference/compose-file/build/#secrets",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/ServiceConfigOrSecret"
          }
        },
        "ssh": {
          "description": "SSH agent socket or keys to expose to the build. Format is either a string or a list of 'default|<id>[=<socket>|<key>[,<key>]]'.\n\nSee more: https://docs.docker.com/reference/compose-file/build/#ssh",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        },
        "shm_size": {
          "description": "Size of /dev/shm for the build container. A string value can use suffix like '2g' for 2 gigabytes.\n\nSee more: https://docs.docker.com/reference/compose-file/build/#shm_size",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "tags": {
          "description": "Defines a list of tag mappings that must be associated to the build image. This list comes in addition to the image property defined in the service section.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "target": {
          "description": "Defines the stage to build as defined inside a multi-stage Dockerfile.",
          "type": [
            "string",
            "null"
          ]
        },
        "ulimits": {
          "description": "Requires: Docker Compose 2.23.1 and later\n\nulimits overrides the default ulimits for a container. It's specified either as an integer for a single limit or as mapping for soft/hard limits.\n\nSee more: https://docs.docker.com/reference/compose-file/build/#ulimits",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/Ulimit"
          }
        }
      },
      "additionalProperties": false
    },
    "ListOrMap": {
      "anyOf": [
        {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      ]
    },
    "ExtraHosts": {
      "description": "Adds hostname mappings to the container network interface configuration (/etc/hosts for Linux).\n\nSee more: https://docs.docker.com/reference/compose-file/services/#extra_hosts",
      "anyOf": [
        {
          "description": "List of host:IP mappings in the format 'hostname:IP'.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        {
          "description": "List mapping hostnames to IP addresses.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/StringOrSortedList"
          }
        }
      ]
    },
    "ServiceConfigOrSecret": {
      "description": "Configuration for service configs or secrets, defining how they are mounted in the container.",
      "anyOf": [
        {
          "description": "Name of the config or secret to grant access to.",
          "type": "string"
        },
        {
          "description": "Detailed configuration for a config or secret.",
          "$ref": "#/$defs/ServiceConfigOrSecretSettings"
        }
      ]
    },
    "ServiceConfigOrSecretSettings": {
      "description": "Configuration for service configs or secrets, defining how they are mounted in the container.",
      "type": "object",
      "properties": {
        "source": {
          "description": "Name of the config or secret as defined in the top-level configs or secrets section.",
          "type": "string"
        },
        "target": {
          "description": "Path in the container where the config or secret will be mounted. Defaults to /<source> for configs and /run/secrets/<source> for secrets.",
          "type": [
            "string",
            "null"
          ]
        },
        "uid": {
          "description": "UID of the file in the container. Default is 0 (root).",
          "type": [
            "string",
            "null"
          ]
        },
        "gid": {
          "description": "GID of the file in the container. Default is 0 (root).",
          "type": [
            "string",
            "null"
          ]
        },
        "mode": {
          "description": "File permission mode inside the container, in octal. Default is 0444 for configs and 0400 for secrets.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "source"
      ]
    },
    "StringOrNum": {
      "anyOf": [
        {
          "type": "integer",
          "format": "int64"
        },
        {
          "type": "string"
        }
      ]
    },
    "Ulimit": {
      "anyOf": [
        {
          "$ref": "#/$defs/StringOrNum"
        },
        {
          "type": "object",
          "properties": {
            "soft": {
              "$ref": "#/$defs/StringOrNum"
            },
            "hard": {
              "$ref": "#/$defs/StringOrNum"
            }
          },
          "required": [
            "soft",
            "hard"
          ]
        }
      ]
    },
    "DependsOn": {
      "description": "With the depends_on attribute, you can control the order of service startup and shutdown. It is useful if services are closely coupled, and the startup sequence impacts the application's functionality.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#depends_on",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/DependsOnSettings"
          }
        }
      ]
    },
    "DependsOnSettings": {
      "description": "With the depends_on attribute, you can control the order of service startup and shutdown. It is useful if services are closely coupled, and the startup sequence impacts the application's functionality.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#depends_on",
      "type": "object",
      "properties": {
        "condition": {
          "description": "Condition to wait for.",
          "$ref": "#/$defs/DependsOnCondition"
        },
        "restart": {
          "description": "Whether to restart dependent services when this service is restarted.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "required": {
          "description": "Whether the dependency is required for the dependent service to start. (default: true)",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "required": [
        "condition"
      ]
    },
    "DependsOnCondition": {
      "oneOf": [
        {
          "description": "Waits until the service has completed successfully.",
          "type": "string",
          "const": "service_completed_successfully"
        },
        {
          "description": "Waits until the service is healthy (as defined by its healthcheck).",
          "type": "string",
          "const": "service_healthy"
        },
        {
          "description": "Waits until the service has started.",
          "type": "string",
          "const": "service_started"
        }
      ]
    },
    "Healthcheck": {
      "description": "Declares a check that's run to determine whether or not the service containers are \"healthy\".\n\nSee more: https://docs.docker.com/reference/compose-file/services/#healthcheck",
      "type": "object",
      "properties": {
        "disable": {
          "description": "Disable any container-specified healthcheck. Set to true to disable.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "test": {
          "description": "The test to perform to check container health. Can be a string or a list. The first item is either NONE, CMD, or CMD-SHELL. If it's CMD, the rest of the command is exec'd. If it's CMD-SHELL, the rest is run in the shell.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrList"
            },
            {
              "type": "null"
            }
          ]
        },
        "interval": {
          "description": "Time between running the check (e.g., '1s', '1m30s'). Default: 30s.",
          "type": [
            "string",
            "null"
          ]
        },
        "start_period": {
          "description": "Start period for the container to initialize before starting health-retries countdown (e.g., '1s', '1m30s'). Default: 0s.",
          "type": [
            "string",
            "null"
          ]
        },
        "start_interval": {
          "description": "Time between running the check during the start period (e.g., '1s', '1m30s'). Default: interval value.",
          "type": [
            "string",
            "null"
          ]
        },
        "retries": {
          "description": "Number of consecutive failures needed to consider the container as unhealthy. Default: 3.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "timeout": {
          "description": "Maximum time to allow one check to run (e.g., '1s', '1m30s'). Default: 30s.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Envfile": {
      "description": "Defines an environment file(s) to use to define default values when interpolating variables in the Compose file being parsed. It defaults to .env file in the project_directory for the Compose file being parsed.\n\nSee more: https://docs.docker.com/reference/compose-file/include/#env_file",
      "anyOf": [
        {
          "description": "Path to a file containing environment variables.",
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/$defs/EnvfileFormat"
          }
        }
      ]
    },
    "EnvfileFormat": {
      "description": "Defines an environment file(s) to use to define default values when interpolating variables in the Compose file being parsed. It defaults to .env file in the project_directory for the Compose file being parsed.\n\nSee more: https://docs.docker.com/reference/compose-file/include/#env_file",
      "anyOf": [
        {
          "description": "Path to a file containing environment variables.",
          "type": "string"
        },
        {
          "description": "Detailed configuration for an environment file.",
          "$ref": "#/$defs/EnvFileDetailed"
        }
      ]
    },
    "EnvFileDetailed": {
      "description": "Detailed configuration for an environment file.",
      "type": "object",
      "properties": {
        "path": {
          "description": "Path to the environment file.",
          "type": "string"
        },
        "format": {
          "description": "Format attribute lets you to use an alternative file formats for env_file. When not set, env_file is parsed according to Compose rules.",
          "type": [
            "string",
            "null"
          ]
        },
        "required": {
          "description": "Whether the file is required. If true and the file doesn't exist, an error will be raised. (default: true)",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "required": [
        "path"
      ]
    },
    "BlkioSettings": {
      "description": "Defines a set of configuration options to set block I/O limits for a service.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#blkio_config",
      "type": "object",
      "properties": {
        "device_read_bps": {
          "description": "Limit read rate (bytes per second) from a device.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/BlkioLimit"
          }
        },
        "device_read_iops": {
          "description": "Limit read rate (IO per second) from a device.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/BlkioLimit"
          }
        },
        "device_write_bps": {
          "description": "Limit write rate (bytes per second) to a device.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/BlkioLimit"
          }
        },
        "device_write_iops": {
          "description": "Limit write rate (IO per second) to a device.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/BlkioLimit"
          }
        },
        "weight": {
          "description": "Block IO weight (relative weight) for the service, between 10 and 1000.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "weight_device": {
          "description": "Block IO weight (relative weight) for specific devices.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/BlkioWeight"
          }
        }
      }
    },
    "BlkioLimit": {
      "description": "Block IO limit for a specific device.",
      "type": "object",
      "properties": {
        "path": {
          "description": "Path to the device (e.g., '/dev/sda').",
          "type": [
            "string",
            "null"
          ]
        },
        "rate": {
          "description": "Rate limit in bytes per second or IO operations per second.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "BlkioWeight": {
      "description": "Block IO weight for a specific device.",
      "type": "object",
      "properties": {
        "path": {
          "description": "Path to the device (e.g., '/dev/sda').",
          "type": [
            "string",
            "null"
          ]
        },
        "weight": {
          "description": "Relative weight for the device, between 10 and 1000.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Cgroup": {
      "description": "Specify the cgroup namespace to join. Use 'host' to use the host's cgroup namespace, or 'private' to use a private cgroup namespace.",
      "oneOf": [
        {
          "description": "Use the host's cgroup namespace.",
          "type": "string",
          "const": "host"
        },
        {
          "description": "Use a private cgroup namespace.",
          "type": "string",
          "const": "private"
        }
      ]
    },
    "CredentialSpec": {
      "description": "Configures the credential spec for a managed service account.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#credential_spec",
      "type": "object",
      "properties": {
        "config": {
          "description": "The name of the credential spec Config to use.",
          "type": [
            "string",
            "null"
          ]
        },
        "file": {
          "description": "Path to a credential spec file.",
          "type": [
            "string",
            "null"
          ]
        },
        "registry": {
          "description": "Path to a credential spec in the Windows registry.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Deploy": {
      "description": "Compose Deploy Specification https://docs.docker.com/reference/compose-file/deploy",
      "type": "object",
      "properties": {
        "endpoint_mode": {
          "description": "Specifies a service discovery method for external clients connecting to a service. See more: https://docs.docker.com/reference/compose-file/deploy/#endpoint_mode",
          "anyOf": [
            {
              "$ref": "#/$defs/EndpointMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "mode": {
          "description": "Defines the replication model used to run a service or job. See more: https://docs.docker.com/reference/compose-file/deploy/#mode",
          "anyOf": [
            {
              "$ref": "#/$defs/DeployMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "replicas": {
          "description": "If the service is replicated (which is the default), replicas specifies the number of containers that should be running at any given time. See more: https://docs.docker.com/reference/compose-file/deploy/#replicas",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "labels": {
          "description": "Specifies metadata for the service. These labels are only set on the service and not on any containers for the service. This assumes the platform has some native concept of \"service\" that can match the Compose application model. See more: https://docs.docker.com/reference/compose-file/deploy/#labels",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        },
        "rollback_config": {
          "description": "Configures how the service should be rolled back in case of a failing update. See more: https://docs.docker.com/reference/compose-file/deploy/#rollback_config",
          "anyOf": [
            {
              "$ref": "#/$defs/RollbackConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "update_config": {
          "description": "Configures how the service should be updated. Useful for configuring rolling updates. See more: https://docs.docker.com/reference/compose-file/deploy/#update_config",
          "anyOf": [
            {
              "$ref": "#/$defs/UpdateConfig2"
            },
            {
              "type": "null"
            }
          ]
        },
        "resources": {
          "description": "Configures physical resource constraints for container to run on platform. See more: https://docs.docker.com/reference/compose-file/deploy/#resources",
          "anyOf": [
            {
              "$ref": "#/$defs/Resources"
            },
            {
              "type": "null"
            }
          ]
        },
        "restart_policy": {
          "description": "Configures if and how to restart containers when they exit. If restart_policy is not set, Compose considers the restart field set by the service configuration. See more: https://docs.docker.com/reference/compose-file/deploy/#restart_policy",
          "anyOf": [
            {
              "$ref": "#/$defs/RestartPolicy"
            },
            {
              "type": "null"
            }
          ]
        },
        "placement": {
          "description": "Specifies constraints and preferences for the platform to select a physical node to run service containers. See more: https://docs.docker.com/reference/compose-file/deploy/#placement",
          "anyOf": [
            {
              "$ref": "#/$defs/Placement"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "EndpointMode": {
      "description": "Specifies a service discovery method for external clients connecting to a service. See more: https://docs.docker.com/reference/compose-file/deploy/#endpoint_mode",
      "oneOf": [
        {
          "description": "Assigns the service a virtual IP (VIP) that acts as the front end for clients to reach the service on a network. Platform routes requests between the client and nodes running the service, without client knowledge of how many nodes are participating in the service or their IP addresses or ports.",
          "type": "string",
          "const": "vip"
        },
        {
          "description": "Platform sets up DNS entries for the service such that a DNS query for the service name returns a list of IP addresses (DNS round-robin), and the client connects directly to one of these.",
          "type": "string",
          "const": "dnsrr"
        }
      ]
    },
    "DeployMode": {
      "description": "Defines the replication model used to run a service or job. See more: https://docs.docker.com/reference/compose-file/deploy/#mode",
      "oneOf": [
        {
          "description": "Ensures exactly one task continuously runs per physical node until stopped.",
          "type": "string",
          "const": "global"
        },
        {
          "description": "Continuously runs a specified number of tasks across nodes until stopped (default).",
          "type": "string",
          "const": "replicated"
        },
        {
          "description": "Executes a defined number of tasks until a completion state (exits with code 0)'.\nTotal tasks are determined by replicas.\nConcurrency can be limited using the max-concurrent option (CLI only).",
          "type": "string",
          "const": "replicated-job"
        },
        {
          "description": "Executes one task per physical node with a completion state (exits with code 0).\nAutomatically runs on new nodes as they are added.",
          "type": "string",
          "const": "global-job"
        }
      ]
    },
    "RollbackConfig": {
      "description": "Configures how the service should be rolled back in case of a failing update.\n\nSee more: https://docs.docker.com/reference/compose-file/deploy/#rollback_config",
      "type": "object",
      "properties": {
        "parallelism": {
          "description": "The number of containers to rollback at a time.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "delay": {
          "description": "The time to wait between each container group's rollback",
          "type": [
            "string",
            "null"
          ]
        },
        "failure_action": {
          "description": "What to do if a rollback fails. One of continue or pause (default pause)",
          "anyOf": [
            {
              "$ref": "#/$defs/RollbackFailureAction"
            },
            {
              "type": "null"
            }
          ]
        },
        "monitor": {
          "description": "Duration after each task update to monitor for failure (ns|us|ms|s|m|h) (default 0s).",
          "type": [
            "string",
            "null"
          ]
        },
        "max_failure_ratio": {
          "description": "Failure rate to tolerate during a rollback.",
          "type": [
            "number",
            "null"
          ],
          "format": "double"
        },
        "order": {
          "description": "Order of operations during rollbacks. One of stop-first (old task is stopped before starting new one), or start-first (new task is started first, and the running tasks briefly overlap) (default stop-first).",
          "anyOf": [
            {
              "$ref": "#/$defs/OperationsOrder"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RollbackFailureAction": {
      "description": "What to do if an update fails.",
      "type": "string",
      "enum": [
        "continue",
        "pause"
      ]
    },
    "OperationsOrder": {
      "description": "What to do if an update fails.",
      "type": "string",
      "enum": [
        "start-first",
        "stop-first"
      ]
    },
    "UpdateConfig2": {
      "description": "Configures how the service should be updated. Useful for configuring rolling updates.\n\nSee more: https://docs.docker.com/reference/compose-file/deploy/#update_config",
      "type": "object",
      "properties": {
        "parallelism": {
          "description": "The number of containers to update at a time.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "delay": {
          "description": "The time to wait between updating a group of containers.",
          "type": [
            "string",
            "null"
          ]
        },
        "failure_action": {
          "description": "What to do if an update fails. One of continue, rollback, or pause (default: pause).",
          "anyOf": [
            {
              "$ref": "#/$defs/UpdateFailureAction"
            },
            {
              "type": "null"
            }
          ]
        },
        "monitor": {
          "description": "Duration after each task update to monitor for failure (ns|us|ms|s|m|h) (default 0s).",
          "type": [
            "string",
            "null"
          ]
        },
        "max_failure_ratio": {
          "description": "Failure rate to tolerate during an update.",
          "type": [
            "number",
            "null"
          ],
          "format": "double"
        },
        "order": {
          "description": "Order of operations during updates. One of stop-first (old task is stopped before starting new one), or start-first (new task is started first, and the running tasks briefly overlap) (default stop-first).",
          "anyOf": [
            {
              "$ref": "#/$defs/OperationsOrder"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "UpdateFailureAction": {
      "description": "What to do if an update fails.",
      "type": "string",
      "enum": [
        "continue",
        "rollback",
        "pause"
      ]
    },
    "Resources": {
      "description": "Configures physical resource constraints for container to run on platform.\n\nSee more: https://docs.docker.com/reference/compose-file/deploy/#resources",
      "type": "object",
      "properties": {
        "limits": {
          "description": "The platform must prevent the container from allocating more resources.",
          "anyOf": [
            {
              "$ref": "#/$defs/Limits"
            },
            {
              "type": "null"
            }
          ]
        },
        "reservations": {
          "description": "The platform must guarantee the container can allocate at least the configured amount.",
          "anyOf": [
            {
              "$ref": "#/$defs/Reservations"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Limits": {
      "description": "Resource constraints and reservations for the service.",
      "type": "object",
      "properties": {
        "cpus": {
          "description": "Limit for how much of the available CPU resources, as number of cores, a container can use.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "memory": {
          "description": "Limit on the amount of memory a container can allocate (e.g., '1g', '1024m').",
          "type": [
            "string",
            "null"
          ]
        },
        "pids": {
          "description": "Maximum number of PIDs available to the container.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Reservations": {
      "description": "Resource reservations for the service containers.",
      "type": "object",
      "properties": {
        "cpus": {
          "description": "Reservation for how much of the available CPU resources, as number of cores, a container can use.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "memory": {
          "description": "Reservation on the amount of memory a container can allocate (e.g., '1g', '1024m').",
          "type": [
            "string",
            "null"
          ]
        },
        "generic_resources": {
          "description": "User-defined resources to reserve.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/GenericResource"
          }
        },
        "devices": {
          "description": "Device reservations for the container.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Device"
          }
        }
      },
      "additionalProperties": false
    },
    "GenericResource": {
      "description": "User-defined resources for services, allowing services to reserve specialized hardware resources.",
      "type": "object",
      "properties": {
        "discrete_resource_spec": {
          "description": "Specification for discrete (countable) resources.",
          "anyOf": [
            {
              "$ref": "#/$defs/DiscreteResourceSpec"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "DiscreteResourceSpec": {
      "description": "Specification for discrete (countable) resources.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Type of resource (e.g., 'GPU', 'FPGA', 'SSD').",
          "type": [
            "string",
            "null"
          ]
        },
        "value": {
          "description": "Number of resources of this kind to reserve.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Device": {
      "description": "Device reservations for containers, allowing services to access specific hardware devices.",
      "type": "object",
      "properties": {
        "driver": {
          "description": "Device driver to use (e.g., 'nvidia').",
          "type": [
            "string",
            "null"
          ]
        },
        "count": {
          "description": "Number of devices of this type to reserve.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "device_ids": {
          "description": "List of specific device IDs to reserve.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "capabilities": {
          "description": "List of capabilities the device needs to have (e.g., 'gpu', 'compute', 'utility').",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "options": {
          "description": "Driver-specific options for the device.",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "capabilities"
      ]
    },
    "RestartPolicy": {
      "description": "Configures if and how to restart containers when they exit. If restart_policy is not set, Compose considers the restart field set by the service configuration.\n\nSee more: https://docs.docker.com/reference/compose-file/deploy/#restart_policy",
      "type": "object",
      "properties": {
        "condition": {
          "description": "The condition that should trigger a restart.",
          "anyOf": [
            {
              "$ref": "#/$defs/RestartPolicyCondition"
            },
            {
              "type": "null"
            }
          ]
        },
        "delay": {
          "description": "How long to wait between restart attempts, specified as a duration. The default is 0, meaning restart attempts can occur immediately.",
          "type": [
            "string",
            "null"
          ]
        },
        "max_attempts": {
          "description": "The maximum number of failed restart attempts allowed before giving up. (Default: unlimited retries.) A failed attempt only counts toward max_attempts if the container does not successfully restart within the time defined by window. For example, if max_attempts is set to 2 and the container fails to restart within the window on the first try, Compose continues retrying until two such failed attempts occur, even if that means trying more than twice.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "window": {
          "description": "The amount of time to wait after a restart to determine whether it was successful, specified as a duration (default: the result is evaluated immediately after the restart).",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "RestartPolicyCondition": {
      "description": "The condition that should trigger a restart.",
      "oneOf": [
        {
          "description": "Containers are not automatically restarted regardless of the exit status.",
          "type": "string",
          "const": "none"
        },
        {
          "description": "The container is restarted if it exits due to an error, which manifests as a non-zero exit code.",
          "type": "string",
          "const": "on-failure"
        },
        {
          "description": "(default) Containers are restarted regardless of the exit status.",
          "type": "string",
          "const": "any"
        }
      ]
    },
    "Placement": {
      "description": "Specifies constraints and preferences for the platform to select a physical node to run service containers. See more: https://docs.docker.com/reference/compose-file/deploy/#placement",
      "type": "object",
      "properties": {
        "constraints": {
          "description": "Defines a required property the platform's node must fulfill to run the service container.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "preferences": {
          "description": "Defines a strategy (currently spread is the only supported strategy) to spread tasks evenly over the values of the datacenter node label.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Preferences"
          }
        }
      },
      "additionalProperties": false
    },
    "Preferences": {
      "description": "Defines a strategy (currently spread is the only supported strategy) to spread tasks evenly over the values of the datacenter node label.",
      "type": "object",
      "properties": {
        "spread": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "required": [
        "spread"
      ]
    },
    "DevelopmentSettings": {
      "description": "Specifies the development configuration for maintaining a container in sync with source.\n\nSee more: https://docs.docker.com/reference/compose-file/develop",
      "type": "object",
      "properties": {
        "watch": {
          "description": "The watch attribute defines a list of rules that control automatic service updates based on local file changes. watch is a sequence, each individual item in the sequence defines a rule to be applied by Compose to monitor source code for changes.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/WatchItem"
          }
        }
      }
    },
    "WatchItem": {
      "description": "An element of the watch mode configuration.\n\nSee more: https://docs.docker.com/reference/compose-file/develop/#watch",
      "type": "object",
      "properties": {
        "action": {
          "description": "Action to take when a change is detected.\n\nSee more: https://docs.docker.com/reference/compose-file/develop/#action",
          "$ref": "#/$defs/WatchAction"
        },
        "exec": {
          "description": "Requires: Docker Compose 2.32.2 and later\n\nOnly relevant when action is set to sync+exec. Like service hooks, exec is used to define the command to be run inside the container once it has started.\n\nSee more: https://docs.docker.com/reference/compose-file/develop/#exec",
          "anyOf": [
            {
              "$ref": "#/$defs/ServiceHook"
            },
            {
              "type": "null"
            }
          ]
        },
        "ignore": {
          "description": "Patterns to exclude from watching.\n\nSee more: https://docs.docker.com/reference/compose-file/develop/#ignore",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "include": {
          "description": "It is sometimes easier to select files to be watched instead of declaring those that shouldn't be watched with ignore.\n\nSee more: https://docs.docker.com/reference/compose-file/develop/#include",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "path": {
          "description": "Defines the path to source code (relative to the project directory) to monitor for changes. Updates to any file inside the path, which doesn't match any ignore rule, triggers the configured action.",
          "type": "string"
        },
        "target": {
          "description": "Only applies when action is configured for sync. Files within path that have changes are synchronized with the container's filesystem, so that the latter is always running with up-to-date content.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "action",
        "path"
      ]
    },
    "WatchAction": {
      "description": "Action to take when a change is detected.\n\nSee more: https://docs.docker.com/reference/compose-file/develop/#action",
      "type": "string",
      "enum": [
        "rebuild",
        "restart",
        "sync",
        "sync+restart",
        "sync+exec"
      ]
    },
    "ServiceHook": {
      "description": "Configuration for service lifecycle hooks, which are commands executed at specific points in a container's lifecycle.\n\nSee more: https://docs.docker.com/compose/how-tos/lifecycle/",
      "type": "object",
      "properties": {
        "privileged": {
          "description": "Whether to run the command with extended privileges.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "user": {
          "description": "User to run the command as.",
          "type": [
            "string",
            "null"
          ]
        },
        "working_dir": {
          "description": "Working directory for the command.",
          "type": [
            "string",
            "null"
          ]
        },
        "environment": {
          "description": "Environment variables for the command.",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        },
        "command": {
          "description": "Command to execute as part of the hook.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrList"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "DeviceMapping": {
      "description": "A device mapping for a container.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/DeviceMappingSettings"
        }
      ]
    },
    "DeviceMappingSettings": {
      "description": "A device mapping for a container.",
      "type": "object",
      "properties": {
        "source": {
          "description": "Path on the host to the device.",
          "type": "string"
        },
        "target": {
          "description": "Path in the container where the device will be mapped.",
          "type": [
            "string",
            "null"
          ]
        },
        "permissions": {
          "description": "Cgroup permissions for the device (rwm).",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "source"
      ]
    },
    "Gpus": {
      "description": "Requires: Docker Compose 2.30.0 and later\n\nSpecifies GPU devices to be allocated for container usage.",
      "anyOf": [
        {
          "description": "Use all available GPUs.",
          "type": "string",
          "const": "all"
        },
        {
          "description": "List of specific GPU devices to use.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/GpuSettings"
          }
        }
      ]
    },
    "GpuSettings": {
      "description": "Requires: Docker Compose 2.30.0 and later\n\nSpecifies GPU devices to be allocated for container usage.",
      "type": "object",
      "properties": {
        "capabilities": {
          "description": "List of capabilities the GPU needs to have (e.g., 'compute', 'utility').",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "count": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "device_ids": {
          "description": "List of specific GPU device IDs to use.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "driver": {
          "description": "GPU driver to use (e.g., 'nvidia').",
          "type": [
            "string",
            "null"
          ]
        },
        "options": {
          "description": "Driver-specific options for the GPU.",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "LoggingSettings": {
      "description": "Defines the logging configuration.\n\nSee more: https://docs.docker.com/engine/logging/configure/",
      "type": "object",
      "properties": {
        "driver": {
          "description": "Logging driver to use, such as 'json-file', 'syslog', 'journald', etc.",
          "anyOf": [
            {
              "$ref": "#/$defs/LoggingDriver"
            },
            {
              "type": "null"
            }
          ]
        },
        "options": {
          "description": "Options for the logging driver.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StringOrNum"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      }
    },
    "LoggingDriver": {
      "description": "A logging driver for Docker.",
      "oneOf": [
        {
          "description": "Logs are stored in a custom format designed for minimal overhead.",
          "type": "string",
          "const": "local"
        },
        {
          "description": "The logs are formatted as JSON. The default logging driver for Docker.",
          "type": "string",
          "const": "json-file"
        },
        {
          "description": "Writes logging messages to the syslog facility. The syslog daemon must be running on the host machine.",
          "type": "string",
          "const": "syslog"
        },
        {
          "description": "Writes log messages to journald. The journald daemon must be running on the host machine.",
          "type": "string",
          "const": "journald"
        },
        {
          "description": "Writes log messages to a Graylog Extended Log Format (GELF) endpoint such as Graylog or Logstash.",
          "type": "string",
          "const": "gelf"
        },
        {
          "description": "Writes log messages to fluentd (forward input). The fluentd daemon must be running on the host machine.",
          "type": "string",
          "const": "fluentd"
        },
        {
          "description": "Writes log messages to Amazon CloudWatch Logs.",
          "type": "string",
          "const": "awslogs"
        },
        {
          "description": "Writes log messages to splunk using the HTTP Event Collector.",
          "type": "string",
          "const": "splunk"
        },
        {
          "description": "Writes log messages as Event Tracing for Windows (ETW) events. Only available on Windows platforms.",
          "type": "string",
          "const": "etwlogs"
        },
        {
          "description": "Writes log messages to Google Cloud Platform (GCP) Logging.",
          "type": "string",
          "const": "gcplogs"
        }
      ]
    },
    "ServiceModels": {
      "description": "Requires: Docker Compose 2.38.0 and later\n\nDefines which AI models the service should use at runtime. Each referenced model must be defined under the [`models` top-level element](https://docs.docker.com/reference/compose-file/models/).\n\nSee more: https://docs.docker.com/reference/compose-file/services/#models",
      "anyOf": [
        {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/ServiceModelSettings"
          }
        }
      ]
    },
    "ServiceModelSettings": {
      "type": "object",
      "properties": {
        "model_var": {
          "description": "Environment variable set to AI model name.",
          "type": [
            "string",
            "null"
          ]
        },
        "endpoint_var": {
          "description": "Environment variable set to AI model endpoint.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "NetworkMode": {
      "description": "Sets a service container's network mode.\n\n\nSee more: https://docs.docker.com/reference/compose-file/services/#network_mode",
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "Bridge"
          ]
        },
        {
          "description": "Gives the container raw access to the host's network interface.",
          "type": "string",
          "const": "Host"
        },
        {
          "description": "Turns off all container networking.",
          "type": "string",
          "const": "None"
        },
        {
          "type": "string"
        }
      ]
    },
    "ServiceNetworks": {
      "anyOf": [
        {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/ServiceNetworkSettings"
          }
        }
      ]
    },
    "ServiceNetworkSettings": {
      "description": "The networks attribute defines the networks that service containers are attached to, referencing entries under the networks top-level element.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#networks",
      "type": "object",
      "properties": {
        "interface_name": {
          "description": "Interface network name used to connect to network",
          "type": [
            "string",
            "null"
          ]
        },
        "aliases": {
          "description": "Alternative hostnames for this service on the network.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "ipv4_address": {
          "description": "Specify a static IPv4 address for this service on this network.",
          "type": [
            "string",
            "null"
          ]
        },
        "ipv6_address": {
          "description": "Specify a static IPv6 address for this service on this network.",
          "type": [
            "string",
            "null"
          ]
        },
        "mac_address": {
          "description": "Specify a MAC address for this service on this network.",
          "type": [
            "string",
            "null"
          ]
        },
        "priority": {
          "description": "Specify the priority for the network connection.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "gw_priority": {
          "description": "Specify the gateway priority for the network connection.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "link_local_ips": {
          "description": "List of link-local IPs.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "driver_opts": {
          "description": "Driver options for this network.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/SingleValue"
          }
        }
      }
    },
    "SingleValue": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "boolean"
        },
        {
          "type": "integer",
          "format": "int64"
        },
        {
          "type": "number",
          "format": "double"
        }
      ]
    },
    "Port": {
      "anyOf": [
        {
          "type": "integer",
          "format": "uint64",
          "minimum": 0
        },
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/PortSettings"
        }
      ]
    },
    "PortSettings": {
      "description": "Settings for a port mapping.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#long-syntax-4",
      "type": "object",
      "properties": {
        "name": {
          "description": "A human-readable name for this port mapping.",
          "type": [
            "string",
            "null"
          ]
        },
        "host_ip": {
          "description": "The host IP to bind to.",
          "type": [
            "string",
            "null"
          ]
        },
        "target": {
          "description": "The port inside the container.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "published": {
          "description": "The publicly exposed port.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "mode": {
          "description": "The port binding mode, either 'host' for publishing a host port or 'ingress' for load balancing.",
          "anyOf": [
            {
              "$ref": "#/$defs/PortMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "protocol": {
          "description": "The port protocol (tcp or udp).",
          "anyOf": [
            {
              "$ref": "#/$defs/Protocol"
            },
            {
              "type": "null"
            }
          ]
        },
        "app_protocol": {
          "description": "The application protocol (TCP/IP level 4 / OSI level 7) this port is used for. This is optional and can be used as a hint for Compose to offer richer behavior for protocols that it understands.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "PortMode": {
      "type": "string",
      "enum": [
        "host",
        "ingress"
      ]
    },
    "Protocol": {
      "type": "string",
      "enum": [
        "tcp",
        "udp"
      ]
    },
    "Provider": {
      "description": "Defines a service that Compose won't manage directly. Compose delegated the service lifecycle to a dedicated or third-party component.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#provider",
      "type": "object",
      "properties": {
        "type": {
          "description": "External component used by Compose to manage setup and teardown lifecycle of the service.",
          "type": "string"
        },
        "options": {
          "description": "Provider-specific options.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/$defs/ProviderOptions"
          }
        }
      },
      "required": [
        "type"
      ]
    },
    "ProviderOptions": {
      "anyOf": [
        {
          "$ref": "#/$defs/SingleValue"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SingleValue"
          }
        }
      ]
    },
    "PullPolicy": {
      "description": "Defines the decisions Compose makes when it starts to pull images.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#pull_policy",
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "refresh"
          ]
        },
        {
          "description": "Compose always pulls the image from the registry.",
          "type": "string",
          "const": "always"
        },
        {
          "description": "Compose builds the image. Compose rebuilds the image if it's already present.",
          "type": "string",
          "const": "build"
        },
        {
          "description": "Compose checks the registry for image updates if the last pull took place more than 24 hours ago.",
          "type": "string",
          "const": "daily"
        },
        {
          "description": "Compose pulls the image only if it's not available in the platform cache. This is the default option if you are not also using the [Compose Build Specification](https://docs.docker.com/reference/compose-file/build/). if_not_present is considered an alias for this value for backward compatibility. The latest tag is always pulled even when the missing pull policy is used.",
          "type": "string",
          "const": "missing"
        },
        {
          "description": "Compose doesn't pull the image from a registry and relies on the platform cached image. If there is no cached image, a failure is reported.",
          "type": "string",
          "const": "never"
        },
        {
          "description": "Compose checks the registry for image updates if the last pull took place more than 7 days ago.",
          "type": "string",
          "const": "weekly"
        },
        {
          "type": "string"
        }
      ]
    },
    "Restart": {
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "always",
            "no",
            "on-failure",
            "unless-stopped"
          ]
        },
        {
          "type": "string"
        }
      ]
    },
    "kebab-case": {
      "description": "Configures the UTS namespace mode set for the service container. When unspecified it is the runtime's decision to assign a UTS namespace, if supported.",
      "oneOf": [
        {
          "description": "Results in the container using the same UTS namespace as the host.",
          "type": "string",
          "const": "Host"
        }
      ]
    },
    "ServiceVolume": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/ServiceVolumeSettings"
        }
      ]
    },
    "ServiceVolumeSettings": {
      "description": "Configuration for a service volume.\n\nSee more: https://docs.docker.com/reference/compose-file/services/#long-syntax-6",
      "type": "object",
      "properties": {
        "type": {
          "description": "The mount type.",
          "$ref": "#/$defs/VolumeType"
        },
        "read_only": {
          "description": "Flag to set the volume as read-only.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "source": {
          "description": "The source of the mount, a path on the host for a bind mount, a docker image reference for an image mount, or the name of a volume defined in the top-level volumes key. Not applicable for a tmpfs mount.",
          "type": [
            "string",
            "null"
          ]
        },
        "target": {
          "description": "The path in the container where the volume is mounted.",
          "type": "string"
        },
        "consistency": {
          "description": "The consistency requirements for the mount. Available values are platform specific.",
          "type": [
            "string",
            "null"
          ]
        },
        "bind": {
          "description": "Configuration specific to bind mounts.",
          "anyOf": [
            {
              "$ref": "#/$defs/Bind"
            },
            {
              "type": "null"
            }
          ]
        },
        "image": {
          "description": "Configuration specific to image mounts.",
          "anyOf": [
            {
              "$ref": "#/$defs/ImageVolumeSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "tmpfs": {
          "description": "/// Configuration specific to tmpfs mounts.",
          "anyOf": [
            {
              "$ref": "#/$defs/TmpfsSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "volume": {
          "description": "Configuration specific to volume mounts.",
          "anyOf": [
            {
              "$ref": "#/$defs/VolumeSettings"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "type",
        "target"
      ]
    },
    "VolumeType": {
      "description": "The mount type.",
      "oneOf": [
        {
          "description": "For mounting host directories.",
          "type": "string",
          "const": "bind"
        },
        {
          "description": "For cluster volumes.",
          "type": "string",
          "const": "cluster"
        },
        {
          "description": "For named pipes.",
          "type": "string",
          "const": "npipe"
        },
        {
          "description": "For mounting from an image.",
          "type": "string",
          "const": "image"
        },
        {
          "description": "For temporary filesystems.",
          "type": "string",
          "const": "tmpfs"
        },
        {
          "description": "For names volumes.",
          "type": "string",
          "const": "volume"
        }
      ]
    },
    "Bind": {
      "description": "Configuration specific to bind mounts.",
      "type": "object",
      "properties": {
        "create_host_path": {
          "description": "Create the host path if it doesn't exist.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "propagation": {
          "description": "The propagation mode for the bind mount:",
          "anyOf": [
            {
              "$ref": "#/$defs/Propagation"
            },
            {
              "type": "null"
            }
          ]
        },
        "recursive": {
          "description": "Recursively mount the source directory.",
          "anyOf": [
            {
              "$ref": "#/$defs/Recursive"
            },
            {
              "type": "null"
            }
          ]
        },
        "selinux": {
          "description": "SELinux relabeling options: 'z' for shared content, 'Z' for private unshared content.",
          "anyOf": [
            {
              "$ref": "#/$defs/SELinux"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Propagation": {
      "description": "The propagation mode for the bind mount",
      "type": "string",
      "enum": [
        "private",
        "rprivate",
        "rshared",
        "rslave",
        "shared",
        "slave"
      ]
    },
    "Recursive": {
      "description": "Recursively mount the source directory.",
      "type": "string",
      "enum": [
        "disabled",
        "enabled",
        "readonly",
        "writable"
      ]
    },
    "SELinux": {
      "oneOf": [
        {
          "description": "For shared content.",
          "type": "string",
          "const": "z"
        },
        {
          "description": "For private, unshared content.",
          "type": "string",
          "const": "Z"
        }
      ]
    },
    "ImageVolumeSettings": {
      "type": "object",
      "properties": {
        "subpath": {
          "description": "Path within the image to mount instead of the image root.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "TmpfsSettings": {
      "description": "Configuration specific to tmpfs mounts.",
      "type": "object",
      "properties": {
        "mode": {
          "description": "File mode of the tmpfs in octal.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "size": {
          "description": "Size of the tmpfs mount in bytes.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "VolumeSettings": {
      "description": "Configuration specific to volume mounts.",
      "type": "object",
      "properties": {
        "labels": {
          "description": "Labels to apply to the volume.",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        },
        "nocopy": {
          "description": "Flag to disable copying of data from a container when a volume is created.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "subpath": {
          "description": "Path within the volume to mount instead of the volume root.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "TopLevelConfig": {
      "description": "Defines or references configuration data that is granted to services in your Compose application.\n\nSee more: https://docs.docker.com/reference/compose-file/configs/",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the config object in the container engine to look up. This field can be used to reference configs that contain special characters. The name is used as is and will not be scoped with the project name.",
          "type": [
            "string",
            "null"
          ]
        },
        "external": {
          "description": "If set to true, external specifies that this config has already been created. Compose does not attempt to create it, and if it does not exist, an error occurs.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "content": {
          "description": "The content is created with the inlined value. Introduced in Docker Compose version 2.23.1.",
          "type": [
            "string",
            "null"
          ]
        },
        "environment": {
          "description": "The config content is created with the value of an environment variable.",
          "type": [
            "string",
            "null"
          ]
        },
        "file": {
          "description": "The config is created with the contents of the file at the specified path.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "TopLevelModel": {
      "description": "Language Model for the Compose application.\n\nSee more: https://docs.docker.com/reference/compose-file/models/",
      "type": "object",
      "properties": {
        "model": {
          "description": "Language Model to run.",
          "type": "string"
        },
        "name": {
          "description": "Custom name for this model.",
          "type": [
            "string",
            "null"
          ]
        },
        "context_size": {
          "description": "The context window size for the model.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0
        },
        "runtime_flags": {
          "description": "Raw runtime flags to pass to the inference engine.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "model"
      ]
    },
    "TopLevelNetwork": {
      "description": "Network configuration for the Compose application.\n\nSee more: https://docs.docker.com/reference/compose-file/networks/",
      "type": "object",
      "properties": {
        "external": {
          "description": "If set to true, it specifies that this network’s lifecycle is maintained outside of that of the application. Compose doesn't attempt to create these networks, and returns an error if one doesn't exist.\n\nSee more: https://docs.docker.com/reference/compose-file/networks/#external",
          "type": [
            "boolean",
            "null"
          ]
        },
        "name": {
          "description": "Custom name for this network.\n\nSee more: https://docs.docker.com/reference/compose-file/networks/#name",
          "type": [
            "string",
            "null"
          ]
        },
        "internal": {
          "description": "By default, Compose provides external connectivity to networks. internal, when set to true, lets you create an externally isolated network.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "driver": {
          "description": "Specifies which driver should be used for this network. Compose returns an error if the driver is not available on the platform.\n\nFor more information on drivers and available options, see [Network drivers](https://docs.docker.com/engine/network/drivers/).",
          "type": [
            "string",
            "null"
          ]
        },
        "attachable": {
          "description": "If `attachable` is set to `true`, then standalone containers should be able to attach to this network, in addition to services. If a standalone container attaches to the network, it can communicate with services and other standalone containers that are also attached to the network.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enable_ipv4": {
          "description": "Can be used to disable IPv4 address assignment.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enable_ipv6": {
          "description": "Enables IPv6 address assignment.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ipam": {
          "description": "Specifies a custom IPAM configuration.\n\nSee more: https://docs.docker.com/reference/compose-file/networks/#ipam",
          "anyOf": [
            {
              "$ref": "#/$defs/Ipam"
            },
            {
              "type": "null"
            }
          ]
        },
        "driver_opts": {
          "description": "A list of options as key-value pairs to pass to the driver. These options are driver-dependent.\n\nConsult the [network drivers documentation](https://docs.docker.com/engine/network/) for more information.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/SingleValue"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "labels": {
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Ipam": {
      "description": "Specifies a custom IPAM configuration.\n\nSee more: https://docs.docker.com/reference/compose-file/networks/#ipam",
      "type": "object",
      "properties": {
        "driver": {
          "description": "Custom IPAM driver, instead of the default.",
          "type": [
            "string",
            "null"
          ]
        },
        "config": {
          "description": "A list with zero or more configuration elements.",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/IpamConfig"
          }
        },
        "options": {
          "description": "Driver-specific options as a key-value mapping.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "IpamConfig": {
      "description": "IPAM specific configurations.\n\nSee more: https://docs.docker.com/reference/compose-file/networks/#ipam",
      "type": "object",
      "properties": {
        "subnet": {
          "description": "Subnet in CIDR format that represents a network segment",
          "type": [
            "string",
            "null"
          ]
        },
        "ip_range": {
          "description": "Range of IPs from which to allocate container IPs.",
          "type": [
            "string",
            "null"
          ]
        },
        "gateway": {
          "description": "IPv4 or IPv6 gateway for the master subnet",
          "type": [
            "string",
            "null"
          ]
        },
        "aux_addresses": {
          "description": "Auxiliary IPv4 or IPv6 addresses used by Network driver.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "TopLevelSecret": {
      "description": "Secret configuration for the Compose application.\n\nSee more: https://docs.docker.com/reference/compose-file/secrets/",
      "anyOf": [
        {
          "description": "Path to a file containing the secret value.",
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            }
          },
          "required": [
            "file"
          ],
          "additionalProperties": false
        },
        {
          "description": "Path to a file containing the secret value.",
          "type": "object",
          "properties": {
            "environment": {
              "type": "string"
            }
          },
          "required": [
            "environment"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "external": {
              "description": "Specifies that this secret already exists and was created outside of Compose.",
              "type": "boolean"
            },
            "name": {
              "description": "Specifies the name of the external secret.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "external",
            "name"
          ]
        }
      ]
    },
    "TopLevelVolume": {
      "description": "Volume configuration for the Compose application.\n\nSee more: https://docs.docker.com/reference/compose-file/volumes/",
      "type": "object",
      "properties": {
        "external": {
          "description": "If set to true, it specifies that this volume already exists on the platform and its lifecycle is managed outside of that of the application.\n\nSee more: https://docs.docker.com/reference/compose-file/volumes/#external",
          "type": [
            "boolean",
            "null"
          ]
        },
        "name": {
          "description": "Sets a custom name for a volume.\n\nSee more: https://docs.docker.com/reference/compose-file/volumes/#name",
          "type": [
            "string",
            "null"
          ]
        },
        "driver": {
          "description": "Specifies which volume driver should be used. If the driver is not available, Compose returns an error and doesn't deploy the application.",
          "type": [
            "string",
            "null"
          ]
        },
        "driver_opts": {
          "description": "Specifies a list of options as key-value pairs to pass to the driver for this volume. The options are driver-dependent.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/SingleValue"
          }
        },
        "labels": {
          "description": "Labels are used to add metadata to volumes. You can use either an array or a dictionary.\n\nIt's recommended that you use reverse-DNS notation to prevent your labels from conflicting with those used by other software.\n\nSee more: https://docs.docker.com/reference/compose-file/volumes/#labels",
          "anyOf": [
            {
              "$ref": "#/$defs/ListOrMap"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "PreCommitPreset": {
      "description": "A preset for a `.pre-commit-config.yaml` configuration file.",
      "type": "object",
      "properties": {
        "extends_presets": {
          "description": "The ids of the extended configurations.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "default": []
        },
        "minimum_pre_commit_version": {
          "description": "A minimum version of pre-commit https://pre-commit.com/#pre-commit-configyaml---top-level",
          "type": [
            "string",
            "null"
          ]
        },
        "default_install_hook_types": {
          "description": "A list of hook types which will be used by default when running `pre-commit install` https://pre-commit.com/#pre-commit-configyaml---top-level",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "default_language_version": {
          "description": "Mappings for the default language versions of the current project https://pre-commit.com/#pre-commit-configyaml---top-level",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": "string"
          }
        },
        "default_stages": {
          "description": "The default stages of the current project https://pre-commit.com/#pre-commit-configyaml---top-level",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Stage"
          }
        },
        "files": {
          "description": "A file include pattern of the current project https://pre-commit.com/#pre-commit-configyaml---top-level",
          "type": [
            "string",
            "null"
          ]
        },
        "exclude": {
          "description": "A file exclude pattern of the current project https://pre-commit.com/#pre-commit-configyaml---top-level",
          "type": [
            "string",
            "null"
          ]
        },
        "fail_fast": {
          "description": "Whether stop running hooks after a first failure https://pre-commit.com/#pre-commit-configyaml---top-level",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ci": {
          "description": "pre-commit.ci specific settings https://pre-commit.ci/#configuration",
          "anyOf": [
            {
              "$ref": "#/$defs/CiSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "repos": {
          "description": "Repository mappings of the current project https://pre-commit.com/#pre-commit-configyaml---top-level",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Repo"
          },
          "default": [
            {
              "repo": "https://github.com/gitleaks/gitleaks",
              "rev": "v8.28.0",
              "hooks": [
                {
                  "id": "gitleaks"
                }
              ]
            }
          ]
        }
      }
    },
    "Stage": {
      "type": "string",
      "enum": [
        "commit",
        "merge-commit",
        "push",
        "prepare-commit-msg",
        "commit-msg",
        "post-checkout",
        "post-commit",
        "post-merge",
        "post-rewrite",
        "pre-commit",
        "pre-merge-commit",
        "pre-push",
        "pre-rebase",
        "manual"
      ]
    },
    "CiSettings": {
      "description": "pre-commit.ci specific settings https://pre-commit.ci/#configuration",
      "type": "object",
      "properties": {
        "autofix_commit_msg": {
          "description": "A commit message for pull request autofixes https://pre-commit.ci/#configuration",
          "type": [
            "string",
            "null"
          ]
        },
        "autofix_prs": {
          "description": "Whether to autofix pull requests https://pre-commit.ci/#configuration",
          "type": [
            "boolean",
            "null"
          ]
        },
        "autoupdate_branch": {
          "description": "A branch to send pull request's autoupdate to https://pre-commit.ci/#configuration",
          "type": [
            "string",
            "null"
          ]
        },
        "autoupdate_commit_msg": {
          "description": "A commit message for autoupdate pull requests https://pre-commit.ci/#configuration",
          "type": [
            "string",
            "null"
          ]
        },
        "autoupdate_schedule": {
          "description": "An autoupdate frequency https://pre-commit.ci/#configuration",
          "anyOf": [
            {
              "$ref": "#/$defs/AutoUpdateSchedule"
            },
            {
              "type": "null"
            }
          ]
        },
        "skip": {
          "description": "List of skipped hook's ids https://pre-commit.ci/#configuration",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "submodules": {
          "description": "Whether to recursively check out submodules https://pre-commit.ci/#configuration",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "AutoUpdateSchedule": {
      "type": "string",
      "enum": [
        "weekly",
        "monthly",
        "quarterly"
      ]
    },
    "Repo": {
      "description": "A pre-commit repo.",
      "anyOf": [
        {
          "description": "Hooks for checking the pre-commit configuration itself. https://pre-commit.com/#meta-hooks",
          "type": "object",
          "properties": {
            "repo": {
              "$ref": "#/$defs/MetaRepo"
            },
            "hooks": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/$defs/MetaRepoHook"
              }
            }
          },
          "required": [
            "repo",
            "hooks"
          ]
        },
        {
          "description": "Hooks for the local repo https://pre-commit.com/#repository-local-hooks",
          "type": "object",
          "properties": {
            "repo": {
              "$ref": "#/$defs/LocalRepo"
            },
            "hooks": {
              "description": "A list of local hooks https://pre-commit.com/#2-add-a-pre-commit-configuration",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/$defs/Hook"
              }
            }
          },
          "required": [
            "repo",
            "hooks"
          ]
        },
        {
          "description": "A remote repo",
          "type": "object",
          "properties": {
            "repo": {
              "description": "A repository url https://pre-commit.com/#2-add-a-pre-commit-configuration",
              "type": "string"
            },
            "rev": {
              "description": "A revision or tag to clone at https://pre-commit.com/#2-add-a-pre-commit-configuration",
              "type": [
                "string",
                "null"
              ]
            },
            "hooks": {
              "description": "A list of hook mappings https://pre-commit.com/#pre-commit-configyaml---hooks.",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/$defs/Hook"
              }
            }
          },
          "required": [
            "repo",
            "hooks"
          ]
        }
      ]
    },
    "MetaRepo": {
      "type": "string",
      "enum": [
        "meta"
      ]
    },
    "MetaRepoHook": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/$defs/MetaRepoId"
        }
      },
      "required": [
        "id"
      ]
    },
    "MetaRepoId": {
      "type": "string",
      "enum": [
        "check-hooks-apply",
        "check-useless-excludes",
        "identity"
      ]
    },
    "LocalRepo": {
      "type": "string",
      "enum": [
        "local"
      ]
    },
    "Hook": {
      "description": "Description for a pre-commit hook. https://pre-commit.com/#pre-commit-configyaml---hooks",
      "type": "object",
      "properties": {
        "id": {
          "description": "An identifier of the current hook https://pre-commit.com/#pre-commit-configyaml---hooks",
          "type": "string",
          "default": ""
        },
        "additional_dependencies": {
          "description": "A list of additional_dependencies of the current hook https://pre-commit.com/#pre-commit-configyaml---hooks",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "alias": {
          "description": "An additional identifier of the current hook for `pre-commit run <hookid>` https://pre-commit.com/#pre-commit-configyaml---hooks",
          "type": [
            "string",
            "null"
          ]
        },
        "always_run": {
          "description": "Run the current hook when no files matched https://pre-commit.com/#pre-commit-configyaml---hooks",
          "type": [
            "boolean",
            "null"
          ]
        },
        "args": {
          "description": "List of additional parameters to pass to the current hook https://pre-commit.com/#pre-commit-configyaml---hooks",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "entry": {
          "description": "A command of the current hook https://pre-commit.com/#pre-commit-configyaml---hooks",
          "type": [
            "string",
            "null"
          ]
        },
        "exclude": {
          "description": "Exclude files that were matched by files.",
          "type": [
            "string",
            "null"
          ]
        },
        "exclude_types": {
          "description": "A list of file types to exclude of the current hook https://pre-commit.com/#pre-commit-configyaml---hooks",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/FileType"
          }
        },
        "description": {
          "description": "Description of the hook. used for metadata purposes only.",
          "type": [
            "string",
            "null"
          ]
        },
        "files": {
          "description": "The pattern of files to run on.",
          "type": [
            "string",
            "null"
          ]
        },
        "language": {
          "description": "A language the current hook is written in https://pre-commit.com/#pre-commit-configyaml---hooks",
          "anyOf": [
            {
              "$ref": "#/$defs/Language"
            },
            {
              "type": "null"
            }
          ]
        },
        "language_version": {
          "description": "Mappings for the default language versions of the current project https://pre-commit.com/#pre-commit-configyaml---top-level",
          "type": [
            "string",
            "null"
          ]
        },
        "log_file": {
          "description": "A log file of the current hook",
          "type": [
            "string",
            "null"
          ]
        },
        "minimum_pre_commit_version": {
          "description": "Allows one to indicate a minimum compatible pre-commit version.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0
        },
        "name": {
          "description": "Name of the hook - shown during hook execution.",
          "type": [
            "string",
            "null"
          ]
        },
        "pass_filenames": {
          "description": "Whether to pass filenames to the current hook or not https://pre-commit.com/#pre-commit-configyaml---hooks",
          "type": [
            "boolean",
            "null"
          ]
        },
        "require_serial": {
          "description": "If true this hook will execute using a single process instead of in parallel.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "stages": {
          "description": "A stage of the current hook https://pre-commit.com/#pre-commit-configyaml---hooks",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Stage"
          }
        },
        "types": {
          "description": "List of file types to run on (AND).",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/FileType"
          }
        },
        "types_or": {
          "description": "List of file types to run on (OR).",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/FileType"
          }
        },
        "verbose": {
          "description": "Display an output of the current hook even it passes https://pre-commit.com/#pre-commit-configyaml---hooks",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "FileType": {
      "type": "string",
      "enum": [
        "adobe-illustrator",
        "alpm",
        "apinotes",
        "asar",
        "asciidor",
        "ash",
        "asm",
        "aspectj",
        "audio",
        "avif",
        "awk",
        "babelrc",
        "bash",
        "batch",
        "bats",
        "bazel",
        "bazelrc",
        "bib",
        "binary",
        "bitmap",
        "bowerrc",
        "browserslistrc",
        "bzip2",
        "c",
        "c#",
        "c++",
        "c2hd",
        "cbsd",
        "clojure",
        "clojurescript",
        "cmake",
        "codespellrc",
        "coffee",
        "coveragerc",
        "crystal",
        "csh",
        "cson",
        "csproj",
        "css",
        "csslintrc",
        "csv",
        "cuda",
        "cython",
        "dart",
        "dash",
        "def",
        "diff",
        "directory",
        "dockerfile",
        "dotenv",
        "dtd",
        "editor-config",
        "edn",
        "ejs",
        "eot",
        "eps",
        "erb",
        "executable",
        "expect",
        "file",
        "fish",
        "flake8",
        "gdscript",
        "geojson",
        "gherkin",
        "gif",
        "gitattributes",
        "gitconfig",
        "gitignore",
        "gitlint",
        "gitmodules",
        "go",
        "go-mod",
        "go-sum",
        "gotimpl",
        "gpx",
        "graphql",
        "gyb",
        "gyp",
        "gzip",
        "handlebars",
        "haskell",
        "hcl",
        "header",
        "hgrc",
        "html",
        "icalendar",
        "icns",
        "icon",
        "idl",
        "idris",
        "image",
        "inc",
        "ini",
        "inl",
        "ino",
        "inx",
        "jade",
        "jar",
        "java",
        "java-properties",
        "javascript",
        "jenkins",
        "jinja",
        "jpeg",
        "jshintrc",
        "json",
        "json5",
        "jsonnet",
        "jsx",
        "jupyter",
        "kml",
        "kotlin",
        "ksh",
        "lean",
        "lektor",
        "lektorproject",
        "less",
        "liquid",
        "literate-haskell",
        "lua",
        "mailmap",
        "makefile",
        "manifest",
        "map",
        "markdown",
        "mdx",
        "mention-bot",
        "meson",
        "mib",
        "modulemap",
        "musescore",
        "myst",
        "ngdoc",
        "nim",
        "nimble",
        "nix",
        "non-executable",
        "npmignore",
        "nunjucks",
        "objective-c",
        "objective-c++",
        "ocaml",
        "otf",
        "p12",
        "pdbrc",
        "pdf",
        "pem",
        "perl",
        "php",
        "pkgbuild",
        "plain-text",
        "plantuml",
        "plist",
        "png",
        "pofile",
        "powershell",
        "prettierignore",
        "prisma",
        "proto",
        "puppet",
        "purescript",
        "pyi",
        "pylintrc",
        "pypirc",
        "pyproj",
        "python",
        "python2",
        "python3",
        "pyz",
        "qml",
        "r",
        "relax-ng",
        "rst",
        "ruby",
        "rust",
        "salt",
        "sass",
        "sbt",
        "scala",
        "scheme",
        "scss",
        "sh",
        "shell",
        "sln",
        "socket",
        "solidity",
        "spec",
        "sql",
        "stylus",
        "svelte",
        "svg",
        "swf",
        "swift",
        "swiftdeps",
        "symlink",
        "system-verilog",
        "tar",
        "tcsh",
        "terraform",
        "tex",
        "text",
        "thrift",
        "tiff",
        "toml",
        "ts",
        "tsv",
        "tsx",
        "ttf",
        "twig",
        "twisted",
        "tsxprofile",
        "urdf",
        "vb",
        "vbproj",
        "vcxproj",
        "vdx",
        "verilog",
        "vhdl",
        "vim",
        "vtl",
        "vue",
        "wav",
        "webp",
        "wheel",
        "wky",
        "woff",
        "woff2",
        "wsgi",
        "xhtml",
        "xml",
        "xquery",
        "xsd",
        "xsl",
        "yaml",
        "yamllint",
        "yang",
        "yin",
        "zcml",
        "zig",
        "zip",
        "zpt",
        "zsh"
      ]
    },
    "Language": {
      "type": "string",
      "enum": [
        "conda",
        "coursier",
        "dart",
        "docker",
        "docker_image",
        "dotnet",
        "fail",
        "golang",
        "lua",
        "node",
        "perl",
        "python",
        "python_venv",
        "r",
        "ruby",
        "rust",
        "swift",
        "pygrep",
        "script",
        "system"
      ]
    },
    "GitignorePreset": {
      "description": "A preset for a `.gitignore` file.",
      "type": "object",
      "properties": {
        "extends_presets": {
          "description": "The ids of the extended presets.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "default": []
        },
        "content": {
          "$ref": "#/$defs/GitIgnore",
          "default": ""
        }
      }
    },
    "GitIgnore": {
      "description": "A definition for a gitignore template. It can be a list of strings (to define each element) or a single string (to define the entire file).",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "string"
        }
      ]
    },
    "RepoPreset": {
      "description": "A preset for a git repository.",
      "type": "object",
      "properties": {
        "gitignore": {
          "description": "Settings for the gitignore file.",
          "anyOf": [
            {
              "$ref": "#/$defs/GitIgnoreSetting"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "pre_commit": {
          "description": "Configuration settings for [`pre-commit`](https://pre-commit.com/).",
          "$ref": "#/$defs/PreCommitSetting",
          "default": true
        },
        "with_templates": {
          "description": "A set of templates to generate when this preset is used.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/TemplatingPresetReference"
          },
          "default": null
        },
        "license": {
          "anyOf": [
            {
              "$ref": "#/$defs/License"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      }
    },
    "GitIgnoreSetting": {
      "description": "Settings for a .gitignore file. It can be a preset id, a list of strings (to define each element) or a single string (to define the entire file)",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/GitIgnore"
        }
      ]
    },
    "PreCommitSetting": {
      "description": "Settings for [`pre-commit`](https://pre-commit.com)  Can be a preset id, a newly defined configuration, or a boolean to use defaults or to disable pre-commit.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/PreCommitPreset"
        }
      ]
    },
    "License": {
      "type": "string",
      "enum": [
        "Apache-2.0",
        "GPL-3.0",
        "AGPL-3.0",
        "MIT"
      ]
    },
    "CargoTomlPreset": {
      "description": "A preset for a `Cargo.toml` file.",
      "type": "object",
      "properties": {
        "extends_presets": {
          "description": "The list of extended presets.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "default": []
        },
        "package": {
          "description": "Package definition (a cargo crate)",
          "anyOf": [
            {
              "$ref": "#/$defs/Package"
            },
            {
              "type": "null"
            }
          ]
        },
        "workspace": {
          "description": "Workspace-wide settings",
          "anyOf": [
            {
              "$ref": "#/$defs/Workspace"
            },
            {
              "type": "null"
            }
          ]
        },
        "dependencies": {
          "description": "Normal dependencies",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/Dependency"
          }
        },
        "dev-dependencies": {
          "description": "Dev/test-only deps",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/Dependency"
          }
        },
        "build-dependencies": {
          "description": "Build-time deps",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/Dependency"
          }
        },
        "target": {
          "description": "`[target.cfg.dependencies]`",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/Target2"
          }
        },
        "features": {
          "description": "The `[features]` section. This set may be incomplete!\n\nOptional dependencies may create implied Cargo features.\nThis features section also supports microsyntax with `dep:`, `/`, and `?`\nfor managing dependencies and their features.io\n\nThis crate has an optional [`features`] module for dealing with this\ncomplexity and getting the real list of features.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        },
        "patch": {
          "description": "`[patch.crates-io]` section",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/Dependency"
            }
          }
        },
        "lib": {
          "description": "Note that due to autolibs feature this is not the complete list\nunless you run [`Manifest::complete_from_path`]",
          "anyOf": [
            {
              "$ref": "#/$defs/Product"
            },
            {
              "type": "null"
            }
          ]
        },
        "profile": {
          "description": "Compilation/optimization settings",
          "anyOf": [
            {
              "$ref": "#/$defs/Profiles"
            },
            {
              "type": "null"
            }
          ]
        },
        "bin": {
          "description": "Note that due to autobins feature this is not the complete list\nunless you run [`Manifest::complete_from_path`]",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Product"
          }
        },
        "bench": {
          "description": "Benchmarks",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Product"
          }
        },
        "test": {
          "description": "Integration tests",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Product"
          }
        },
        "example": {
          "description": "Examples",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/Product"
          }
        },
        "lints": {
          "description": "Lints",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable6"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Package": {
      "description": "The `[package]` section of the [`Manifest`]. This is where crate properties are.\n\nNote that most of these properties can be inherited from a workspace, and therefore not available just from reading a single `Cargo.toml`. See [`Manifest::inherit_workspace`].\n\nYou can replace `Metadata` generic type with your own\nto parse into something more useful than a generic toml `Value`",
      "type": "object",
      "properties": {
        "name": {
          "description": "Careful: some names are uppercase, case-sensitive. `-` changes to `_` when used as a Rust identifier.",
          "type": [
            "string",
            "null"
          ]
        },
        "version": {
          "description": "See [the `version()` getter for more info](`Package::version()`).\n\nMust parse as semver, e.g. \"1.9.0\"\n\nThis field may have unknown value when using workspace inheritance,\nand when the `Manifest` has been loaded without its workspace.",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable"
            },
            {
              "type": "null"
            }
          ]
        },
        "edition": {
          "description": "Package's edition opt-in. Use [`Package::edition()`] to read it.",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable2"
            },
            {
              "type": "null"
            }
          ]
        },
        "rust-version": {
          "description": "MSRV 1.x (beware: does not require semver formatting)",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable"
            },
            {
              "type": "null"
            }
          ]
        },
        "build": {
          "description": "Build script definition",
          "anyOf": [
            {
              "$ref": "#/$defs/OptionalFile"
            },
            {
              "type": "null"
            }
          ]
        },
        "workspace": {
          "description": "Workspace this package is a member of (`None` if it's implicit)",
          "type": [
            "string",
            "null"
          ]
        },
        "links": {
          "description": "It doesn't link to anything",
          "type": [
            "string",
            "null"
          ]
        },
        "description": {
          "description": "A short blurb about the package. This is not rendered in any format when\nuploaded to crates.io (aka this is not markdown).",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable"
            },
            {
              "type": "null"
            }
          ]
        },
        "homepage": {
          "description": "Project's homepage",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable"
            },
            {
              "type": "null"
            }
          ]
        },
        "documentation": {
          "description": "Path to your custom docs. Unnecssary if you rely on docs.rs.",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable"
            },
            {
              "type": "null"
            }
          ]
        },
        "readme": {
          "description": "This points to a file under the package root (relative to this `Cargo.toml`).\nimplied if README.md, README.txt or README exists.",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable3"
            },
            {
              "type": "null"
            }
          ]
        },
        "keywords": {
          "description": "Up to 5, for search",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable4"
            },
            {
              "type": "null"
            }
          ]
        },
        "categories": {
          "description": "This is a list of up to five categories where this crate would fit.\ne.g. `[\"command-line-utilities\", \"development-tools::cargo-plugins\"]`",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable4"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "description": "Don't publish these files",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable4"
            },
            {
              "type": "null"
            }
          ]
        },
        "include": {
          "description": "Publish these files",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable4"
            },
            {
              "type": "null"
            }
          ]
        },
        "license": {
          "description": "e.g. \"MIT\"",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable"
            },
            {
              "type": "null"
            }
          ]
        },
        "license-file": {
          "description": "If `license` is not standard",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable"
            },
            {
              "type": "null"
            }
          ]
        },
        "repository": {
          "description": "(HTTPS) URL to crate's repository",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable"
            },
            {
              "type": "null"
            }
          ]
        },
        "default-run": {
          "description": "The default binary to run by cargo run.",
          "type": [
            "string",
            "null"
          ]
        },
        "autobins": {
          "description": "Discover binaries from the file system\n\nThis may be incorrectly set to `true` if the crate uses 2015 edition and has explicit `[[bin]]` sections",
          "type": [
            "boolean",
            "null"
          ]
        },
        "autolib": {
          "description": "Discover libraries from the file system",
          "type": [
            "boolean",
            "null"
          ]
        },
        "autoexamples": {
          "description": "Discover examples from the file system\n\nThis may be incorrectly set to `true` if the crate uses 2015 edition and has explicit `[[example]]` sections",
          "type": [
            "boolean",
            "null"
          ]
        },
        "autotests": {
          "description": "Discover tests from the file system\n\nThis may be incorrectly set to `true` if the crate uses 2015 edition and has explicit `[[test]]` sections",
          "type": [
            "boolean",
            "null"
          ]
        },
        "autobenches": {
          "description": "Discover benchmarks from the file system\n\nThis may be incorrectly set to `true` if the crate uses 2015 edition and has explicit `[[bench]]` sections",
          "type": [
            "boolean",
            "null"
          ]
        },
        "publish": {
          "description": "Disable publishing or select custom registries.",
          "anyOf": [
            {
              "$ref": "#/$defs/Inheritable5"
            },
            {
              "type": "null"
            }
          ]
        },
        "resolver": {
          "description": "The feature resolver version.",
          "anyOf": [
            {
              "$ref": "#/$defs/Resolver"
            },
            {
              "type": "null"
            }
          ]
        },
        "metadata": {
          "description": "Arbitrary metadata of any type, an extension point for 3rd party tools.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": true
        }
      }
    },
    "Inheritable": {
      "description": "A value that can be set to `workspace`",
      "anyOf": [
        {
          "description": "Inherit this setting from the `workspace`",
          "type": "object",
          "properties": {
            "workspace": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        },
        {
          "type": "string"
        }
      ]
    },
    "Inheritable2": {
      "description": "A value that can be set to `workspace`",
      "anyOf": [
        {
          "description": "Inherit this setting from the `workspace`",
          "type": "object",
          "properties": {
            "workspace": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        },
        {
          "$ref": "#/$defs/Edition"
        }
      ]
    },
    "Edition": {
      "description": "Edition setting, which opts in to new Rust/Cargo behaviors.",
      "oneOf": [
        {
          "description": "2015",
          "type": "string",
          "const": "2015"
        },
        {
          "description": "2018",
          "type": "string",
          "const": "2018"
        },
        {
          "description": "2021",
          "type": "string",
          "const": "2021"
        },
        {
          "description": "2024",
          "type": "string",
          "const": "2024"
        }
      ]
    },
    "OptionalFile": {
      "description": "A way specify or disable README or `build.rs`.",
      "anyOf": [
        {
          "description": "Opt-in to default, or explicit opt-out",
          "type": "boolean"
        },
        {
          "description": "Explicit path",
          "type": "string"
        }
      ]
    },
    "Inheritable3": {
      "description": "A value that can be set to `workspace`",
      "anyOf": [
        {
          "description": "Inherit this setting from the `workspace`",
          "type": "object",
          "properties": {
            "workspace": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        },
        {
          "$ref": "#/$defs/OptionalFile"
        }
      ]
    },
    "Inheritable4": {
      "description": "A value that can be set to `workspace`",
      "anyOf": [
        {
          "description": "Inherit this setting from the `workspace`",
          "type": "object",
          "properties": {
            "workspace": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        },
        {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "Inheritable5": {
      "description": "A value that can be set to `workspace`",
      "anyOf": [
        {
          "description": "Inherit this setting from the `workspace`",
          "type": "object",
          "properties": {
            "workspace": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        },
        {
          "$ref": "#/$defs/Publish"
        }
      ]
    },
    "Publish": {
      "description": "Forbids or selects custom registry",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "Resolver": {
      "description": "The feature resolver version.\n\nNeeded in [`Workspace`], but implied by [`Edition`] in packages.",
      "oneOf": [
        {
          "description": "The default for editions prior to 2021.",
          "type": "string",
          "const": "1"
        },
        {
          "description": "The default for the 2021 edition.",
          "type": "string",
          "const": "2"
        },
        {
          "description": "The default for the 2024 edition.",
          "type": "string",
          "const": "3"
        }
      ]
    },
    "Workspace": {
      "description": "A manifest can contain both a package and workspace-wide properties",
      "type": "object",
      "properties": {
        "members": {
          "description": "Relative paths of crates in here",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "default": []
        },
        "default-members": {
          "description": "Members to operate on when in the workspace root.\n\nWhen specified, `default-members` must expand to a subset of `members`.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "package": {
          "description": "Template for inheritance",
          "anyOf": [
            {
              "$ref": "#/$defs/PackageTemplate"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "description": "Ignore these dirs",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Shared info",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": true
        },
        "resolver": {
          "description": "Compatibility setting",
          "anyOf": [
            {
              "$ref": "#/$defs/Resolver"
            },
            {
              "type": "null"
            }
          ]
        },
        "dependencies": {
          "description": "Template for `needs_workspace_inheritance`",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/Dependency"
          }
        },
        "lints": {
          "description": "Workspace-level lint groups",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/Lint"
            }
          }
        }
      }
    },
    "PackageTemplate": {
      "description": "Workspace can predefine properties that can be inherited via `{ workspace = true }` in its member packages.",
      "type": "object",
      "properties": {
        "categories": {
          "description": "See <https://crates.io/category_slugs>",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "Multi-line text, some people use Markdown here",
          "type": [
            "string",
            "null"
          ]
        },
        "documentation": {
          "description": "URL",
          "type": [
            "string",
            "null"
          ]
        },
        "edition": {
          "description": "Opt-in to new Rust behaviors",
          "anyOf": [
            {
              "$ref": "#/$defs/Edition"
            },
            {
              "type": "null"
            }
          ]
        },
        "exclude": {
          "description": "Don't publish these files, relative to workspace",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "homepage": {
          "description": "Homepage URL",
          "type": [
            "string",
            "null"
          ]
        },
        "include": {
          "description": "Publish these files, relative to workspace",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywords": {
          "description": "For search",
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "license": {
          "description": "SPDX",
          "type": [
            "string",
            "null"
          ]
        },
        "license-file": {
          "description": "If not SPDX",
          "type": [
            "string",
            "null"
          ]
        },
        "publish": {
          "description": "Block publishing or choose custom registries",
          "anyOf": [
            {
              "$ref": "#/$defs/Publish"
            },
            {
              "type": "null"
            }
          ]
        },
        "readme": {
          "description": "Opt-out or custom path, relative to workspace",
          "anyOf": [
            {
              "$ref": "#/$defs/OptionalFile"
            },
            {
              "type": "null"
            }
          ]
        },
        "repository": {
          "description": "(HTTPS) repository URL",
          "type": [
            "string",
            "null"
          ]
        },
        "rust-version": {
          "description": "Minimum required rustc version in format `1.99`",
          "type": [
            "string",
            "null"
          ]
        },
        "version": {
          "description": "Package version semver",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Dependency": {
      "description": "Dependency definition. Note that this struct doesn't carry it's key/name, which you need to read from its section.\n\nIt can be simple version number, or detailed settings, or inherited.",
      "anyOf": [
        {
          "description": "Version requirement (e.g. `^1.5`)",
          "$ref": "#/$defs/StringOrNum"
        },
        {
          "description": "Incomplete data",
          "$ref": "#/$defs/InheritedDependencyDetail"
        },
        {
          "description": "`{ version = \"^1.5\", features = [\"a\", \"b\"] }` etc.",
          "$ref": "#/$defs/DependencyDetail"
        }
      ]
    },
    "InheritedDependencyDetail": {
      "description": "When a dependency is defined as `{ workspace = true }`,\nand workspace data hasn't been applied yet.",
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "optional": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "workspace": {
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "DependencyDetail": {
      "description": "When definition of a dependency is more than just a version string.",
      "type": "object",
      "properties": {
        "version": {
          "description": "Semver requirement. Note that a plain version number implies this version *or newer* compatible one.",
          "anyOf": [
            {
              "$ref": "#/$defs/StringOrNum"
            },
            {
              "type": "null"
            }
          ]
        },
        "package": {
          "description": "If `Some`, use this as the crate name instead of `[dependencies]`'s table key.\n\nBy using this, a crate can have multiple versions of the same dependency.",
          "type": [
            "string",
            "null"
          ]
        },
        "registry": {
          "description": "Fetch this dependency from a custom 3rd party registry (alias defined in Cargo config), not crates-io.\n\nThis depends on local cargo configuration. It becomes `registry_index` after the crate is uploaded to a registry.",
          "type": [
            "string",
            "null"
          ]
        },
        "registry-index": {
          "description": "Directly define custom 3rd party registry URL (may be `sparse+https:`) instead of a config nickname.",
          "type": [
            "string",
            "null"
          ]
        },
        "path": {
          "description": "This path is usually relative to the crate's manifest, but when using workspace inheritance, it may be relative to the workspace!\n\nWhen calling [`Manifest::complete_from_path_and_workspace`] use absolute path for the workspace manifest, and then this will be corrected to be an absolute\npath when inherited from the workspace.",
          "type": [
            "string",
            "null"
          ]
        },
        "git": {
          "description": "Read dependency from git repo URL, not allowed on crates-io.",
          "type": [
            "string",
            "null"
          ]
        },
        "branch": {
          "description": "Read dependency from git branch, not allowed on crates-io.",
          "type": [
            "string",
            "null"
          ]
        },
        "tag": {
          "description": "Read dependency from git tag, not allowed on crates-io.",
          "type": [
            "string",
            "null"
          ]
        },
        "rev": {
          "description": "Read dependency from git commit, not allowed on crates-io.",
          "type": [
            "string",
            "null"
          ]
        },
        "features": {
          "description": "Enable these features of the dependency.\n\nNote that Cargo interprets `default` in a special way.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "optional": {
          "description": "NB: Not allowed at workspace level\n\nIf not used with `dep:` or `?/` syntax in `[features]`, this also creates an implicit feature.\nSee the [`features`] module for more info.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "default-features": {
          "description": "Enable the `default` set of features of the dependency (enabled by default).",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": true
    },
    "Lint": {
      "description": "Lint definition.",
      "type": "object",
      "properties": {
        "level": {
          "description": "allow/warn/deny",
          "$ref": "#/$defs/LintLevel"
        },
        "priority": {
          "description": "Controls which lints or lint groups override other lint groups.",
          "type": "integer",
          "format": "int8",
          "minimum": -128,
          "maximum": 127
        },
        "config": {
          "description": "Unstable",
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "level",
        "priority",
        "config"
      ]
    },
    "LintLevel": {
      "description": "Lint level.",
      "type": "string",
      "enum": [
        "allow",
        "warn",
        "force-warn",
        "deny",
        "forbid"
      ]
    },
    "Target2": {
      "description": "Dependencies that are platform-specific or enabled through custom `cfg()`.",
      "type": "object",
      "properties": {
        "dependencies": {
          "description": "platform-specific normal deps",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/Dependency"
          },
          "default": {}
        },
        "dev-dependencies": {
          "description": "platform-specific dev-only/test-only deps",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/Dependency"
          },
          "default": {}
        },
        "build-dependencies": {
          "description": "platform-specific build-time deps",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/Dependency"
          },
          "default": {}
        }
      }
    },
    "Product": {
      "description": "Cargo uses the term \"target\" for both \"target platform\" and \"build target\" (the thing to build),\nwhich makes it ambigous.\nHere Cargo's bin/lib **target** is renamed to **product**.",
      "type": "object",
      "properties": {
        "path": {
          "description": "This field points at where the crate is located, relative to the `Cargo.toml`.",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "The name of a product is the name of the library or binary that will be generated.\nThis is defaulted to the name of the package, with any dashes replaced\nwith underscores. (Rust `extern crate` declarations reference this name;\ntherefore the value must be a valid Rust identifier to be usable.)",
          "type": [
            "string",
            "null"
          ]
        },
        "test": {
          "description": "A flag for enabling unit tests for this product. This is used by `cargo test`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "doctest": {
          "description": "A flag for enabling documentation tests for this product. This is only relevant\nfor libraries, it has no effect on other sections. This is used by\n`cargo test`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "bench": {
          "description": "A flag for enabling benchmarks for this product. This is used by `cargo bench`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "doc": {
          "description": "A flag for enabling documentation of this product. This is used by `cargo doc`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "plugin": {
          "description": "If the product is meant to be a compiler plugin, this field must be set to true\nfor Cargo to correctly compile it and make it available for all dependencies.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "proc-macro": {
          "description": "If the product is meant to be a \"macros 1.1\" procedural macro, this field must\nbe set to true.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "harness": {
          "description": "If set to false, `cargo test` will omit the `--test` flag to rustc, which\nstops it from generating a test harness. This is useful when the binary being\nbuilt manages the test runner itself.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "edition": {
          "description": "Deprecated. Edition should be set only per package.\n\nIf set then a product can be configured to use a different edition than the\n`[package]` is configured to use, perhaps only compiling a library with the\n2018 edition or only compiling one unit test with the 2015 edition. By default\nall products are compiled with the edition specified in `[package]`.",
          "anyOf": [
            {
              "$ref": "#/$defs/Edition"
            },
            {
              "type": "null"
            }
          ]
        },
        "crate-type": {
          "description": "The available options are \"dylib\", \"rlib\", \"staticlib\", \"cdylib\", and \"proc-macro\".",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "required-features": {
          "description": "The `required-features` field specifies which features the product needs in order to be built.\nIf any of the required features are not selected, the product will be skipped.\nThis is only relevant for the `[[bin]]`, `[[bench]]`, `[[test]]`, and `[[example]]` sections,\nit has no effect on `[lib]`.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "default": []
        }
      }
    },
    "Profiles": {
      "description": "Build-in an custom build/optimization settings",
      "type": "object",
      "properties": {
        "release": {
          "description": "Used for `--release`",
          "anyOf": [
            {
              "$ref": "#/$defs/Profile"
            },
            {
              "type": "null"
            }
          ]
        },
        "dev": {
          "description": "Used by default, weirdly called `debug` profile.",
          "anyOf": [
            {
              "$ref": "#/$defs/Profile"
            },
            {
              "type": "null"
            }
          ]
        },
        "test": {
          "description": "Used for `cargo test`",
          "anyOf": [
            {
              "$ref": "#/$defs/Profile"
            },
            {
              "type": "null"
            }
          ]
        },
        "bench": {
          "description": "Used for `cargo bench` (nightly)",
          "anyOf": [
            {
              "$ref": "#/$defs/Profile"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": {
        "$ref": "#/$defs/Profile"
      }
    },
    "Profile": {
      "description": "Compilation/optimization settings for a workspace",
      "type": "object",
      "properties": {
        "opt-level": {
          "description": "num or z, s"
        },
        "debug": {
          "description": "0,1,2 or bool",
          "anyOf": [
            {
              "$ref": "#/$defs/DebugSetting"
            },
            {
              "type": "null"
            }
          ]
        },
        "split-debuginfo": {
          "description": "Move debug info to separate files",
          "type": [
            "string",
            "null"
          ]
        },
        "rpath": {
          "description": "For dynamic libraries",
          "type": [
            "boolean",
            "null"
          ]
        },
        "lto": {
          "description": "Link-time-optimization",
          "anyOf": [
            {
              "$ref": "#/$defs/LtoSetting"
            },
            {
              "type": "null"
            }
          ]
        },
        "debug-assertions": {
          "description": "Extra assertions",
          "type": [
            "boolean",
            "null"
          ]
        },
        "codegen-units": {
          "description": "Parallel compilation",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0,
          "maximum": 65535
        },
        "panic": {
          "description": "Handling of panics/unwinding",
          "type": [
            "string",
            "null"
          ]
        },
        "incremental": {
          "description": "Support for incremental rebuilds",
          "type": [
            "boolean",
            "null"
          ]
        },
        "overflow-checks": {
          "description": "Check integer arithmetic",
          "type": [
            "boolean",
            "null"
          ]
        },
        "strip": {
          "description": "Remove debug info",
          "anyOf": [
            {
              "$ref": "#/$defs/StripSetting"
            },
            {
              "type": "null"
            }
          ]
        },
        "package": {
          "description": "Profile overrides for dependencies, `*` is special.",
          "type": "object",
          "additionalProperties": true
        },
        "build-override": {
          "description": "Profile overrides for build dependencies, `*` is special."
        },
        "inherits": {
          "description": "Only relevant for non-standard profiles",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "DebugSetting": {
      "description": "Verbosity of debug info in a [`Profile`]",
      "oneOf": [
        {
          "description": "0 or false",
          "type": "string",
          "const": "none"
        },
        {
          "description": "1 = line tables only",
          "type": "string",
          "const": "lines"
        },
        {
          "description": "2 or true",
          "type": "string",
          "const": "full"
        }
      ]
    },
    "LtoSetting": {
      "description": "Handling of LTO in a build profile",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "thin"
          ]
        },
        {
          "description": "off",
          "type": "string",
          "const": "none"
        },
        {
          "description": "false",
          "type": "string",
          "const": "thin-local"
        },
        {
          "description": "True",
          "type": "string",
          "const": "fat"
        }
      ]
    },
    "StripSetting": {
      "description": "Handling of debug symbols in a build profile",
      "oneOf": [
        {
          "description": "Same as `strip = false`",
          "type": "string",
          "const": "none"
        },
        {
          "description": "Detailed debug is stripped, but coarse debug is preserved",
          "type": "string",
          "const": "debuginfo"
        },
        {
          "description": "Stronger than the `Debuginfo` setting, same as `strip = true`",
          "type": "string",
          "const": "symbols"
        }
      ]
    },
    "Inheritable6": {
      "description": "A value that can be set to `workspace`",
      "anyOf": [
        {
          "description": "Inherit this setting from the `workspace`",
          "type": "object",
          "properties": {
            "workspace": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        },
        {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/Lint"
            }
          }
        }
      ]
    }
  }
}