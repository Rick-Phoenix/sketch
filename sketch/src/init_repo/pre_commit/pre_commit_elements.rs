use std::collections::BTreeSet;

use schemars::JsonSchema;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, JsonSchema, Eq, PartialOrd, Ord)]
#[serde(rename_all = "snake_case")]
pub enum Language {
  Conda,
  Coursier,
  Dart,
  Docker,
  DockerImage,
  Dotnet,
  Fail,
  Golang,
  Lua,
  Node,
  Perl,
  Python,
  PythonVenv,
  R,
  Ruby,
  Rust,
  Swift,
  Pygrep,
  Script,
  System,
}

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, JsonSchema, Eq, PartialOrd, Ord)]
#[serde(rename_all = "kebab-case")]
pub enum Stage {
  Commit,
  MergeCommit,
  Push,
  PrepareCommitMsg,
  CommitMsg,
  PostCheckout,
  PostCommit,
  PostMerge,
  PostRewrite,
  PreCommit,
  PreMergeCommit,
  PrePush,
  PreRebase,
  Manual,
}

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, JsonSchema, PartialOrd, Ord, Eq)]
#[serde(rename_all = "kebab-case")]
pub enum FileType {
  AdobeIllustrator,
  Alpm,
  Apinotes,
  Asar,
  Asciidor,
  Ash,
  Asm,
  Aspectj,
  Audio,
  Avif,
  Awk,
  Babelrc,
  Bash,
  Batch,
  Bats,
  Bazel,
  Bazelrc,
  Bib,
  Binary,
  Bitmap,
  Bowerrc,
  Browserslistrc,
  Bzip2,
  C,
  #[serde(rename = "c#")]
  CSharp,
  #[serde(rename = "c++")]
  CPP,
  C2hd,
  Cbsd,
  Clojure,
  Clojurescript,
  Cmake,
  Codespellrc,
  Coffee,
  Coveragerc,
  Crystal,
  Csh,
  Cson,
  Csproj,
  Css,
  Csslintrc,
  Csv,
  Cuda,
  Cython,
  Dart,
  Dash,
  Def,
  Diff,
  Directory,
  Dockerfile,
  Dotenv,
  Dtd,
  EditorConfig,
  Edn,
  Ejs,
  Eot,
  Eps,
  Erb,
  Executable,
  Expect,
  File,
  Fish,
  Flake8,
  Gdscript,
  Geojson,
  Gherkin,
  Gif,
  Gitattributes,
  Gitconfig,
  Gitignore,
  Gitlint,
  Gitmodules,
  Go,
  GoMod,
  GoSum,
  Gotimpl,
  Gpx,
  Graphql,
  Gyb,
  Gyp,
  Gzip,
  Handlebars,
  Haskell,
  Hcl,
  Header,
  Hgrc,
  Html,
  Icalendar,
  Icns,
  Icon,
  Idl,
  Idris,
  Image,
  Inc,
  Ini,
  Inl,
  Ino,
  Inx,
  Jade,
  Jar,
  Java,
  JavaProperties,
  Javascript,
  Jenkins,
  Jinja,
  Jpeg,
  Jshintrc,
  Json,
  Json5,
  Jsonnet,
  Jsx,
  Jupyter,
  Kml,
  Kotlin,
  Ksh,
  Lean,
  Lektor,
  Lektorproject,
  Less,
  Liquid,
  LiterateHaskell,
  Lua,
  Mailmap,
  Makefile,
  Manifest,
  Map,
  Markdown,
  Mdx,
  MentionBot,
  Meson,
  Mib,
  Modulemap,
  Musescore,
  Myst,
  Ngdoc,
  Nim,
  Nimble,
  Nix,
  NonExecutable,
  Npmignore,
  Nunjucks,
  ObjectiveC,
  #[serde(rename = "objective-c++")]
  ObjectiveCPP,
  Ocaml,
  Otf,
  P12,
  Pdbrc,
  Pdf,
  Pem,
  Perl,
  Php,
  Pkgbuild,
  PlainText,
  Plantuml,
  Plist,
  Png,
  Pofile,
  Powershell,
  Prettierignore,
  Prisma,
  Proto,
  Puppet,
  Purescript,
  Pyi,
  Pylintrc,
  Pypirc,
  Pyproj,
  Python,
  Python2,
  Python3,
  Pyz,
  Qml,
  R,
  RelaxNg,
  Rst,
  Ruby,
  Rust,
  Salt,
  Sass,
  Sbt,
  Scala,
  Scheme,
  Scss,
  Sh,
  Shell,
  Sln,
  Socket,
  Solidity,
  Spec,
  Sql,
  Stylus,
  Svelte,
  Svg,
  Swf,
  Swift,
  Swiftdeps,
  Symlink,
  SystemVerilog,
  Tar,
  Tcsh,
  Terraform,
  Tex,
  Text,
  Thrift,
  Tiff,
  Toml,
  Ts,
  Tsv,
  Tsx,
  Ttf,
  Twig,
  Twisted,
  Tsxprofile,
  Urdf,
  Vb,
  Vbproj,
  Vcxproj,
  Vdx,
  Verilog,
  Vhdl,
  Vim,
  Vtl,
  Vue,
  Wav,
  Webp,
  Wheel,
  Wky,
  Woff,
  Woff2,
  Wsgi,
  Xhtml,
  Xml,
  Xquery,
  Xsd,
  Xsl,
  Yaml,
  Yamllint,
  Yang,
  Yin,
  Zcml,
  Zig,
  Zip,
  Zpt,
  Zsh,
}

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, JsonSchema)]
#[serde(rename_all = "lowercase")]
pub enum AutoUpdateSchedule {
  Weekly,
  Monthly,
  Quarterly,
}

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, JsonSchema)]
pub struct CiSettings {
  pub autofix_commit_msg: Option<String>,
  pub autofix_prs: Option<bool>,
  pub autoupdate_branch: Option<String>,
  pub autoupdate_commit_msg: Option<String>,
  pub autoupdate_schedule: Option<AutoUpdateSchedule>,
  pub skip: Option<BTreeSet<String>>,
  pub submodules: Option<bool>,
}
