# ANCHOR: all
# ANCHOR: config
# This will be the starting path for the templates' output paths
out_dir = "../output/custom_templates"

# ANCHOR: global_vars
vars = { my_var = 15 }
# ANCHOR_END: global_vars

# We can define templates directly in the config file
# ANCHOR: lit_template
templates = { lit_template = "my_var: {{ my_var }}" }
# ANCHOR_END: lit_template

# Or as files inside a directory
templates_dir = "../templates"
# ANCHOR_END: config

# ANCHOR: preset
# A group of templates that will be rendered together
templating_presets.test = [
  # Full path to the template file from `templates_dir`
  { template = "subdir/nested.j2", output = "new_dir/nested.yaml" },

  # ANCHOR: context_example
  # Only using the global variables
  { template = "lit_template", output = "with_global_var.yaml" },

  # Using a local override
  { template = "lit_template", output = "with_override.yaml", context = { my_var = 20 } },
  # ANCHOR_END: context_example

  # Defining a literal template
  { template = { name = "literal_inlined", content = "my_var: {{ my_var }}" }, output = "literal_inlined.yaml" },
]
# ANCHOR_END: preset

# ANCHOR_END: all
